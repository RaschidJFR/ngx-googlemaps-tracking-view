{"version":3,"sources":["webpack:///./dist/ngx-googlemaps-tracking-view/fesm5/ngx-googlemaps-tracking-view.js","webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.scss","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":";;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAA0D;AACR;AACiB;AACX;AACT;AACuF;AAC1G;;AAE5B;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA,6BAA6B;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,2BAA2B,0DAAY;AACvC;AACA;AACA;AACA,yBAAyB,0DAAY;AACrC;AACA;AACA;AACA,iCAAiC,0DAAY;AAC7C;AACA,mBAAmB,EAAE;AACrB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,8BAA8B;AAC9B,SAAS;AACT;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,sCAAsC,EAAE;AAC7D;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,oCAAoC,EAAE;AAC9D;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,sBAAsB;AACvC;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA,iBAAiB,oBAAoB;AACrC;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB;AACA;AACA,mBAAmB,yDAAW;AAC9B;AACA;AACA;AACA,iEAAiE,sDAAQ,EAAE;AAC3E;AACA,6BAA6B,EAAE;AAC/B;AACA;AACA,mCAAmC,EAAE;AACrC,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA,oCAAoC;AACpC;AACA;AACA,uCAAuC,EAAE;AACzC;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA,oCAAoC;AACpC;AACA;AACA;AACA;AACA;AACA,yBAAyB;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT,uBAAuB,sDAAQ;AAC/B;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB,eAAe,GAAG;AAClB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,eAAe,GAAG;AAClB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,GAAG;AAClB;AACA,gBAAgB;AAChB;AACA;AACA,4BAA4B,gBAAgB;AAC5C,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,aAAa;AACb,2CAA2C,0DAAY;AACvD;AACA,wBAAwB;AACxB;AACA,yBAAyB,wCAAwC,EAAE;AACnE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,wDAAU;AAC1B;AACA;AACA,oDAAoD,WAAW;AAC/D;AACA,CAAC;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA,WAAW,EAAE;AACb;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iCAAiC,SAAS;AAC1C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mCAAmC,0DAAY;AAC/C;AACA;AACA;AACA,kCAAkC,0DAAY;AAC9C;AACA;AACA;AACA,mCAAmC,4CAAO;AAC1C;AACA;AACA;AACA,yCAAyC,iDAAY;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,wFAAwF,EAAE;AAC/G;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,iCAAiC,EAAE;AACnC;AACA;AACA;AACA,+BAA+B,uFAAuF,gBAAgB,SAAS,kBAAkB,0BAA0B,yBAAyB,oBAAoB,mBAAmB,wBAAwB;AACnR;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,yCAAyC,EAAE;AAChE,yCAAyC,iDAAY;AACrD;AACA,kBAAkB,0DAAG;AACrB,oBAAoB;AACpB;AACA;AACA;AACA;AACA,SAAS,IAAI,gEAAS;AACtB,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,2BAA2B,QAAQ,+CAAE,SAAS,EAAE,IAAI,+DAAQ;AAC5D,oBAAoB;AACpB;AACA,qBAAqB,QAAQ,kDAAK,OAAO,EAAE,IAAI,gEAAS;AACxD,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,2BAA2B,oBAAoB,EAAE,8EAA8E,EAAE;AACjI;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA;AACA,uCAAuC,mBAAmB;AAC1D,uBAAuB,EAAE;AACzB,sDAAsD,EAAE;AACxD,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,gBAAgB;AAChB,SAAS;AACT;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,0BAA0B,EAAE;AACjD;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oFAAoF,0BAA0B;AAC9G,mBAAmB,EAAE;AACrB,kCAAkC,EAAE;AACpC,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,QAAQ;AACrB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,mBAAmB,EAAE;AAC1C;AACA,qBAAqB,oBAAoB;AACzC;AACA;AACA,qBAAqB,qBAAqB;AAC1C,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,wBAAwB,wBAAwB,EAAE;AAClD;AACA;AACA,KAAK;AACL;AACA;AACA,yCAAyC,wFAAwF;AACjI;AACA;AACA,yCAAyC,yFAAyF;AAClI,oBAAoB;AACpB;AACA,qBAAqB,mCAAmC,EAAE;AAC1D;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,4MAA4M;AAC5M,mCAAmC,WAAW,YAAY;AAC1D,iBAAiB;AACjB;AACA;AACA,qEAAqE;AACrE,SAAS,0BAA0B;AACnC,SAAS,OAAO,8DAAgB,EAAE;AAClC,SAAS,OAAO,+DAAU;AAC1B,MAAM;AACN;AACA,kBAAkB,OAAO,uDAAS,kBAAkB;AACpD,sBAAsB,OAAO,mDAAK,EAAE;AACpC,8BAA8B,OAAO,mDAAK,EAAE;AAC5C,oBAAoB,OAAO,mDAAK,EAAE;AAClC,gBAAgB,OAAO,mDAAK,EAAE;AAC9B;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA,8BAA8B,0DAAY;AAC1C;AACA;AACA;AACA;AACA,gCAAgC,iDAAY;AAC5C;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2BAA2B,EAAE;AAClD;AACA,oBAAoB;AACpB;AACA,qBAAqB,gCAAgC,EAAE;AACvD;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,4DAA4D,oIAAoI,QAAQ,6EAA6E,MAAM,yDAAyD,6BAA6B,wDAAwD,4BAA4B;AACrc,iBAAiB;AACjB;AACA;AACA,sDAAsD;AACtD,SAAS,0BAA0B;AACnC,SAAS,OAAO,wDAAU;AAC1B,MAAM;AACN;AACA,gBAAgB,OAAO,uDAAS,mBAAmB;AACnD,8BAA8B,OAAO,uDAAS,8BAA8B;AAC5E,cAAc,OAAO,uDAAS,gBAAgB,OAAO,8DAAgB,EAAE,IAAI;AAC3E,kBAAkB,OAAO,oDAAM,EAAE;AACjC,sBAAsB,OAAO,oDAAM,EAAE;AACrC,qBAAqB,OAAO,mDAAK,EAAE;AACnC,mBAAmB,OAAO,mDAAK,EAAE;AACjC,cAAc,OAAO,mDAAK,EAAE;AAC5B,oBAAoB,OAAO,mDAAK,EAAE;AAClC,8BAA8B,OAAO,mDAAK,uBAAuB;AACjE,eAAe,OAAO,mDAAK,sBAAsB;AACjD,2BAA2B,OAAO,mDAAK,EAAE;AACzC;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA,UAAU;AACV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa,wBAAwB;AACrC;AACA,IAAI;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA,iDAAiD,YAAY,qBAAqB,EAAE;AACpF;AACA;AACA,gCAAgC,iDAAY;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA,eAAe,uDAAS;AACxB;AACA,mBAAmB,yDAAW;AAC9B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oCAAoC;AACpC;AACA,qCAAqC,kCAAkC,EAAE;AACzE;AACA;AACA;AACA,aAAa;AACb,SAAS;AACT;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,4EAA4E,EAAE;AACnG;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,+DAA+D,EAAE;AACtF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,2DAA2D,EAAE;AAClF;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA,qBAAqB,aAAa,EAAE;AACpC;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA,oBAAoB;AACpB;AACA;AACA;AACA,SAAS;AACT;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA;AACA,2BAA2B,EAAE;AAC7B,4BAA4B;AAC5B;AACA,8BAA8B,sFAAsF,EAAE;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,mBAAmB,EAAE;AAC3C;AACA;AACA,mBAAmB,EAAE;AACrB,oBAAoB;AACpB;AACA,sBAAsB,mBAAmB,EAAE;AAC3C;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,6BAA6B,4BAA4B,EAAE;AAC3D,4BAA4B;AAC5B;AACA,6BAA6B,2BAA2B,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4BAA4B;AAC5B;AACA,6BAA6B,4BAA4B,EAAE;AAC3D,4BAA4B;AAC5B;AACA,6BAA6B,2BAA2B,EAAE;AAC1D;AACA;AACA;AACA;AACA;AACA,wBAAwB;AACxB;AACA,yBAAyB,8BAA8B,EAAE;AACzD;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,YAAY;AACnC,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,uBAAuB,aAAa;AACpC,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA,eAAe,EAAE;AACjB,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA,mBAAmB,EAAE;AACrB;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB;AACA,uBAAuB,EAAE;AACzB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;AACb;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA,qFAAqF,yBAAyB;AAC9G,iBAAiB;AACjB;AACA;AACA,yDAAyD;AACzD,SAAS;AACT,MAAM;AACN;AACA,yBAAyB,OAAO,mDAAK,EAAE;AACvC,oBAAoB,OAAO,mDAAK,EAAE;AAClC,sBAAsB,OAAO,uDAAS,gCAAgC;AACtE;AACA;AACA,CAAC;;AAED;AACA;AACA,cAAc,wGAAwG;AACtH;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,wCAAwC,aAAa;AACrD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0BAA0B,0DAAY;AACtC;AACA;AACA;AACA;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA,gBAAgB;AAChB;AACA;AACA;AACA;AACA;AACA,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA,2BAA2B,EAAE;AAC7B;AACA,2BAA2B,EAAE;AAC7B;AACA,uDAAuD,qBAAqB;AAC5E;AACA;AACA;AACA;AACA,aAAa;AACb,uBAAuB,EAAE;AACzB,wBAAwB;AACxB;AACA;AACA;AACA,aAAa,IAAI,2BAA2B;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA,SAAS,OAAO,uDAAS;AACzB;AACA;AACA,iDAAiD,kBAAkB,WAAW,aAAa,UAAU,0BAA0B,sBAAsB,kBAAkB,oCAAoC,cAAc,WAAW,YAAY,gBAAgB,eAAe,0CAA0C,2DAA2D,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","file":"main.js","sourcesContent":["import { tap, switchMap, debounce } from 'rxjs/operators';\nimport { HttpClient } from '@angular/common/http';\nimport { __awaiter, __generator, __assign, __spread } from 'tslib';\nimport { Subject, Subscription, of, timer } from 'rxjs';\nimport { CommonModule } from '@angular/common';\nimport { Injectable, EventEmitter, Component, ViewChild, ElementRef, Input, ViewContainerRef, Output, NgModule } from '@angular/core';\nimport 'geolocation-marker';\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Helper class for handling common GoogleMaps SDK functions\r\n */\r\nvar GoogleMapsWrapper = /** @class */ (function () {\r\n    function GoogleMapsWrapper() {\r\n        var _this = this;\r\n        this._infowindows = { default: null };\r\n        this.markers = [];\r\n        this.polylines = [];\r\n        this.polygons = [];\r\n        this._isReady = false;\r\n        /**\r\n         * If `true` the infowindows will close on clicking on any point on the map\r\n         */\r\n        this.closeInfowindowOnClick = true;\r\n        /**\r\n         * Emits when the map has been inited by calling `GoogleMapsWrapper.init()`\r\n         */\r\n        this.onReady = new EventEmitter();\r\n        /**\r\n         * When the user clicks on the map\r\n         */\r\n        this.click = new EventEmitter();\r\n        /**\r\n         * When visible maps change but zooming or dragging the map\r\n         */\r\n        this.boundsChanged = new EventEmitter();\r\n        this._ready = new Promise((/**\r\n         * @param {?} resolve\r\n         * @param {?} reject\r\n         * @return {?}\r\n         */\r\n        function (resolve, reject) {\r\n            _this.resolver = { resolve: resolve, reject: reject };\r\n        }));\r\n    }\r\n    Object.defineProperty(GoogleMapsWrapper.prototype, \"infowindow\", {\r\n        /** The default infowindow object */\r\n        get: /**\r\n         * The default infowindow object\r\n         * @return {?}\r\n         */\r\n        function () { return this.getInfowindow('default'); },\r\n        set: /**\r\n         * @param {?} val\r\n         * @return {?}\r\n         */\r\n        function (val) { this._infowindows['default'] = val; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * `True` if the map has been inited by calling `GoogleMapsWrapper.init()`\r\n     */\r\n    /**\r\n     * `True` if the map has been inited by calling `GoogleMapsWrapper.init()`\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.isReady = /**\r\n     * `True` if the map has been inited by calling `GoogleMapsWrapper.init()`\r\n     * @return {?}\r\n     */\r\n    function () { return this._isReady; };\r\n    /**\r\n     * Resolves when the map has been inited by calling `GoogleMapsWrapper.init()`\r\n     */\r\n    /**\r\n     * Resolves when the map has been inited by calling `GoogleMapsWrapper.init()`\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.ready = /**\r\n     * Resolves when the map has been inited by calling `GoogleMapsWrapper.init()`\r\n     * @return {?}\r\n     */\r\n    function () { return this._ready; };\r\n    Object.defineProperty(GoogleMapsWrapper.prototype, \"map\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this._map;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @param {?=} tag\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.isInfowindowOpen = /**\r\n     * @param {?=} tag\r\n     * @return {?}\r\n     */\r\n    function (tag) {\r\n        return this.getInfowindow(tag)['isOpen'];\r\n    };\r\n    /**\r\n     * Call this before using any other function\r\n     */\r\n    /**\r\n     * Call this before using any other function\r\n     * @param {?} element\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.initMap = /**\r\n     * Call this before using any other function\r\n     * @param {?} element\r\n     * @param {?=} options\r\n     * @return {?}\r\n     */\r\n    function (element, options) {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var e_1;\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0:\r\n                        _a.trys.push([0, 2, , 3]);\r\n                        this._map = new google.maps.Map(element, __assign({ center: new google.maps.LatLng(19.53124, -96.91589), zoom: 14, clickableIcons: false, disableDefaultUI: false, zoomControl: true, streetViewControl: false, scaleControl: true, rotateControl: true, fullscreenControl: true, mapTypeControlOptions: {\r\n                                mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE]\r\n                            } }, options));\r\n                        // Add listeners\r\n                        this.map.addListener('click', (/**\r\n                         * @param {?} e\r\n                         * @return {?}\r\n                         */\r\n                        function (e) {\r\n                            if (_this.closeInfowindowOnClick)\r\n                                _this.closeInfowindow();\r\n                            _this.click.emit(e.latLng);\r\n                        }));\r\n                        this.map.addListener('bounds_changed', (/**\r\n                         * @return {?}\r\n                         */\r\n                        function () {\r\n                            /** @type {?} */\r\n                            var bounds = _this.map.getBounds();\r\n                            _this.boundsChanged.emit(bounds);\r\n                        }));\r\n                        console.debug('map created ');\r\n                        // Wait for SDK to load\r\n                        setTimeout((/**\r\n                         * @return {?}\r\n                         */\r\n                        function () {\r\n                            _this._isReady = true;\r\n                            _this.resolver.resolve();\r\n                            _this.onReady.emit();\r\n                        }), 1000);\r\n                        return [4 /*yield*/, this._isReady];\r\n                    case 1:\r\n                        _a.sent();\r\n                        return [2 /*return*/, this.map];\r\n                    case 2:\r\n                        e_1 = _a.sent();\r\n                        this.resolver.reject(e_1);\r\n                        return [3 /*break*/, 3];\r\n                    case 3: return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n       * Formula taken from:\r\n       * [What ratio scales do Google Maps zoom levels correspond to?\r\n     * ](https://gis.stackexchange.com/questions/7430/what-ratio-scales-do-google-maps-zoom-levels-correspond-to)\r\n       */\r\n    /**\r\n     * Formula taken from:\r\n     * [What ratio scales do Google Maps zoom levels correspond to?\r\n     * ](https://gis.stackexchange.com/questions/7430/what-ratio-scales-do-google-maps-zoom-levels-correspond-to)\r\n     * @param {?} latitude\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.getMetersPerPx = /**\r\n     * Formula taken from:\r\n     * [What ratio scales do Google Maps zoom levels correspond to?\r\n     * ](https://gis.stackexchange.com/questions/7430/what-ratio-scales-do-google-maps-zoom-levels-correspond-to)\r\n     * @param {?} latitude\r\n     * @return {?}\r\n     */\r\n    function (latitude) {\r\n        if (!latitude || !this.map)\r\n            return 0;\r\n        /** @type {?} */\r\n        var zoom = this.map.getZoom();\r\n        return 156543.03392 * Math.cos(latitude * Math.PI / 180) / Math.pow(2, zoom);\r\n    };\r\n    /**\r\n       * Subscribe to map event\r\n       */\r\n    // tslint:disable-next-line: no-any\r\n    /**\r\n     * Subscribe to map event\r\n     * @param {?} eventName\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    // tslint:disable-next-line: no-any\r\n    GoogleMapsWrapper.prototype.subscribe = /**\r\n     * Subscribe to map event\r\n     * @param {?} eventName\r\n     * @param {?} callback\r\n     * @return {?}\r\n     */\r\n    // tslint:disable-next-line: no-any\r\n    function (eventName, callback) {\r\n        this.map.addListener(eventName, callback);\r\n    };\r\n    /**\r\n       * Unsubscribe from map event\r\n       */\r\n    /**\r\n     * Unsubscribe from map event\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.unsubscribe = /**\r\n     * Unsubscribe from map event\r\n     * @param {?} eventName\r\n     * @return {?}\r\n     */\r\n    function (eventName) {\r\n        google.maps.event.clearListeners(this.map, eventName);\r\n    };\r\n    /**\r\n       * Unsubscribe from all map events\r\n       */\r\n    /**\r\n     * Unsubscribe from all map events\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.unsubcribeAll = /**\r\n     * Unsubscribe from all map events\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        google.maps.event.clearInstanceListeners(this.map);\r\n    };\r\n    /**\r\n       * Add a marker and show it on the map\r\n       */\r\n    /**\r\n     * Add a marker and show it on the map\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.addMarker = /**\r\n     * Add a marker and show it on the map\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    function (params) {\r\n        /** @type {?} */\r\n        var marker;\r\n        if (!(params instanceof google.maps.Marker)) {\r\n            params.map = this.map;\r\n            marker = new google.maps.Marker(params);\r\n        }\r\n        else {\r\n            marker = params;\r\n            marker.setMap(this.map);\r\n        }\r\n        this.markers.push(marker);\r\n        return marker;\r\n    };\r\n    /**\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.addPolyline = /**\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    function (params) {\r\n        /** @type {?} */\r\n        var line;\r\n        if (!(params instanceof google.maps.Polyline)) {\r\n            params.map = this.map;\r\n            line = new google.maps.Polyline(params);\r\n        }\r\n        else {\r\n            line = params;\r\n            line.setMap(this.map);\r\n        }\r\n        this.polylines.push(line);\r\n        return line;\r\n    };\r\n    /**\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.addPolygone = /**\r\n     * @param {?} params\r\n     * @return {?}\r\n     */\r\n    function (params) {\r\n        /** @type {?} */\r\n        var polygon;\r\n        if (!(params instanceof google.maps.Polygon)) {\r\n            params.map = this.map;\r\n            polygon = new google.maps.Polygon(params);\r\n        }\r\n        else {\r\n            polygon = params;\r\n            polygon.setMap(this.map);\r\n        }\r\n        this.polygons.push(polygon);\r\n        return polygon;\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.clearMarkers = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.markers.forEach((/**\r\n         * @param {?} m\r\n         * @return {?}\r\n         */\r\n        function (m) {\r\n            m.setMap(null);\r\n        }));\r\n        this.markers = [];\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.clearPolylines = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.polylines.forEach((/**\r\n         * @param {?} l\r\n         * @return {?}\r\n         */\r\n        function (l) {\r\n            l.setMap(null);\r\n        }));\r\n        this.polylines = [];\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.clearPolygones = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.polygons.forEach((/**\r\n         * @param {?} l\r\n         * @return {?}\r\n         */\r\n        function (l) {\r\n            l.setMap(null);\r\n        }));\r\n        this.polygons = [];\r\n    };\r\n    /**\r\n       * Removes current markers an copies all the markers of an array into the map\r\n       */\r\n    /**\r\n     * Removes current markers an copies all the markers of an array into the map\r\n     * @param {?} array\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.setMarkers = /**\r\n     * Removes current markers an copies all the markers of an array into the map\r\n     * @param {?} array\r\n     * @return {?}\r\n     */\r\n    function (array) {\r\n        var _this = this;\r\n        this.clearMarkers();\r\n        array.forEach((/**\r\n         * @param {?} m\r\n         * @return {?}\r\n         */\r\n        function (m) {\r\n            m.setMap(_this.map);\r\n        }));\r\n        this.markers = __spread(array);\r\n    };\r\n    /**\r\n     * @param id In case more than one infowindows are required to be shown. If no parameter is passed,\r\n     * the default infowindow will be opened. If a string is passed, a new infowindow will be created\r\n     * with that specifier.\r\n     */\r\n    /**\r\n     * @param {?=} anchor\r\n     * @param {?=} content\r\n     * @param {?=} id In case more than one infowindows are required to be shown. If no parameter is passed,\r\n     * the default infowindow will be opened. If a string is passed, a new infowindow will be created\r\n     * with that specifier.\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.openInfowindow = /**\r\n     * @param {?=} anchor\r\n     * @param {?=} content\r\n     * @param {?=} id In case more than one infowindows are required to be shown. If no parameter is passed,\r\n     * the default infowindow will be opened. If a string is passed, a new infowindow will be created\r\n     * with that specifier.\r\n     * @return {?}\r\n     */\r\n    function (anchor, content, id) {\r\n        /** @type {?} */\r\n        var infowindow = id ? this.getInfowindow(id) : this.infowindow;\r\n        if (content)\r\n            infowindow.setContent(content);\r\n        if (anchor instanceof google.maps.LatLng) {\r\n            infowindow.setPosition(anchor);\r\n            infowindow.open(this.map);\r\n        }\r\n        else {\r\n            infowindow.open(this.map, anchor);\r\n        }\r\n        infowindow['isOpen'] = true;\r\n    };\r\n    /**\r\n     * @param id Unique identifier for an infowindow in case more than one exist\r\n     */\r\n    /**\r\n     * @param {?=} id Unique identifier for an infowindow in case more than one exist\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.closeInfowindow = /**\r\n     * @param {?=} id Unique identifier for an infowindow in case more than one exist\r\n     * @return {?}\r\n     */\r\n    function (id) {\r\n        /** @type {?} */\r\n        var infowindow = id ? this.getInfowindow(id) : this.infowindow;\r\n        if (infowindow) {\r\n            infowindow.close();\r\n            infowindow['isOpen'] = false;\r\n        }\r\n    };\r\n    /**\r\n     * Retrieve a reference to a specific infowindow\r\n     * @param id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\r\n     * string is passed, the defoult infowindow will be returned.\r\n     */\r\n    /**\r\n     * Retrieve a reference to a specific infowindow\r\n     * @param {?=} id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\r\n     * string is passed, the defoult infowindow will be returned.\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.getInfowindow = /**\r\n     * Retrieve a reference to a specific infowindow\r\n     * @param {?=} id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\r\n     * string is passed, the defoult infowindow will be returned.\r\n     * @return {?}\r\n     */\r\n    function (id) {\r\n        if (id === void 0) { id = 'default'; }\r\n        /** @type {?} */\r\n        var infowindow = this._infowindows[id];\r\n        if (!infowindow) {\r\n            infowindow = new google.maps.InfoWindow({\r\n                content: '[info]',\r\n                position: this.map.getCenter()\r\n            });\r\n            infowindow['closeclick'] = new EventEmitter();\r\n            infowindow.addListener('closeclick', (/**\r\n             * @return {?}\r\n             */\r\n            function () { return infowindow['closeclick'].emit(); }));\r\n            this._infowindows[id] = infowindow;\r\n        }\r\n        return infowindow;\r\n    };\r\n    /**\r\n     * Destroy a reference to a specific infowindow.\r\n     * @param id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\r\n     * string is passed, the defoult infowindow will be returned.\r\n     */\r\n    /**\r\n     * Destroy a reference to a specific infowindow.\r\n     * @param {?} id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\r\n     * string is passed, the defoult infowindow will be returned.\r\n     * @return {?}\r\n     */\r\n    GoogleMapsWrapper.prototype.destroyInfowindow = /**\r\n     * Destroy a reference to a specific infowindow.\r\n     * @param {?} id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\r\n     * string is passed, the defoult infowindow will be returned.\r\n     * @return {?}\r\n     */\r\n    function (id) {\r\n        if (!id)\r\n            return;\r\n        /** @type {?} */\r\n        var infowindow = this._infowindows[id];\r\n        if (infowindow) {\r\n            infowindow.close();\r\n            infowindow.set('map', null);\r\n            google.maps.event.clearInstanceListeners(infowindow);\r\n            delete this._infowindows[id];\r\n        }\r\n    };\r\n    GoogleMapsWrapper.decorators = [\r\n        { type: Injectable }\r\n    ];\r\n    /** @nocollapse */\r\n    GoogleMapsWrapper.ctorParameters = function () { return []; };\r\n    return GoogleMapsWrapper;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/** @type {?} */\r\nvar API_KEY = '';\r\n/**\r\n * A marker fixed to the center of the map which emits the geo-decoded location\r\n * as a full address.\r\n *\r\n * @see {\\@link CenterMarker}\r\n * \\@emits CenterMarker#locationChanges locationChanges When the pin's location has changed\r\n * (by zooming or dragging) and the map has become idle again.\r\n * \\@emits CenterMarker#addressChanges addressChanges The the geocoded address has resolved.\r\n *\r\n * \\@example\r\n * <button (click)=\"map.centerPin.enable(infowindowLocation, <yourGMapsApiKey)\">Add center Pin</button>\r\n * <button (click)=\"map.centerPin.disable()\">Remove Pin</button>\r\n *\r\n * <ng-template #infowindowLocation let-address>\r\n *   <div>\r\n *     <span *ngIf=\"!address\">Loading...</span>\r\n *     <span *ngIf=\"!!address\">{{address}}</span>\r\n *   </div>\r\n * </ng-template>\r\n */\r\nvar /**\r\n * A marker fixed to the center of the map which emits the geo-decoded location\r\n * as a full address.\r\n *\r\n * @see {\\@link CenterMarker}\r\n * \\@emits CenterMarker#locationChanges locationChanges When the pin's location has changed\r\n * (by zooming or dragging) and the map has become idle again.\r\n * \\@emits CenterMarker#addressChanges addressChanges The the geocoded address has resolved.\r\n *\r\n * \\@example\r\n * <button (click)=\"map.centerPin.enable(infowindowLocation, <yourGMapsApiKey)\">Add center Pin</button>\r\n * <button (click)=\"map.centerPin.disable()\">Remove Pin</button>\r\n *\r\n * <ng-template #infowindowLocation let-address>\r\n *   <div>\r\n *     <span *ngIf=\"!address\">Loading...</span>\r\n *     <span *ngIf=\"!!address\">{{address}}</span>\r\n *   </div>\r\n * </ng-template>\r\n */\r\nCenterMarker = /** @class */ (function () {\r\n    function CenterMarker(googlemapsWrapper, viewContainer, http) {\r\n        this.googlemapsWrapper = googlemapsWrapper;\r\n        this.viewContainer = viewContainer;\r\n        this.http = http;\r\n        /**\r\n         * Emitted when the pin's location has changed (by zooming or dragging) and the map has become idle again.\r\n         */\r\n        this.locationChanges = new EventEmitter();\r\n        /**\r\n         * Emitted when the the geocoded address has resolved.\r\n         */\r\n        this.addressChanges = new EventEmitter();\r\n        /**\r\n         * @ignore\r\n         */\r\n        this._centerChanged$ = new Subject();\r\n        /**\r\n         * @ignore\r\n         */\r\n        this._mapEventSubscription = new Subscription();\r\n        /**\r\n         * @ignore\r\n         */\r\n        this._geocoder = new google.maps.Geocoder();\r\n    }\r\n    Object.defineProperty(CenterMarker.prototype, \"REVERSE_GEOCODING_URL\", {\r\n        /** @ignore */\r\n        get: /**\r\n         * @ignore\r\n         * @private\r\n         * @return {?}\r\n         */\r\n        function () { return \"https://maps.googleapis.com/maps/api/geocode/json?key=\" + API_KEY + \"&latlng=\"; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Activates the pin to show at the map's center\r\n     * @param infowindowTemplate A template for rendering the infowindow on top of the marker.\r\n     * It must have a single root element. The address string will be passed as implicit context.\r\n     * @param apiKey GoogleMaps API key\r\n     */\r\n    /**\r\n     * Activates the pin to show at the map's center\r\n     * @param {?} infowindowTemplate A template for rendering the infowindow on top of the marker.\r\n     * It must have a single root element. The address string will be passed as implicit context.\r\n     * @param {?} apiKey GoogleMaps API key\r\n     * @return {?}\r\n     */\r\n    CenterMarker.prototype.enable = /**\r\n     * Activates the pin to show at the map's center\r\n     * @param {?} infowindowTemplate A template for rendering the infowindow on top of the marker.\r\n     * It must have a single root element. The address string will be passed as implicit context.\r\n     * @param {?} apiKey GoogleMaps API key\r\n     * @return {?}\r\n     */\r\n    function (infowindowTemplate, apiKey) {\r\n        var _this = this;\r\n        API_KEY = apiKey;\r\n        this._infowindowTemplate = infowindowTemplate;\r\n        if (this._centerMarker)\r\n            return;\r\n        /** @type {?} */\r\n        var mapDiv = (/** @type {?} */ (this.googlemapsWrapper.map.getDiv()));\r\n        this._centerMarker = document.createElement('div');\r\n        this._centerMarker.classList.add('centerMarker');\r\n        this._centerMarker.style.cssText =\r\n            \"position:absolute;\\n      background:url(https://maps.gstatic.com/mapfiles/markers/marker.png) no-repeat;\\n      top:50%;left:50%;\\n      z-index:1;\\n      margin-left:-10px;\\n      margin-top:-34px;\\n      height:34px;\\n      width:20px;\\n      cursor: pointer;\";\r\n        mapDiv.appendChild(this._centerMarker);\r\n        this._centerMarker.onclick = (/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.displayInfowindowOverPin(); });\r\n        this._mapEventSubscription = new Subscription();\r\n        this._mapEventSubscription.add(this._centerChanged$\r\n            .pipe(tap((/**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            _this.address = null;\r\n            _this.displayInfowindowOverPin();\r\n        })), switchMap((/**\r\n         * @param {?} latLng\r\n         * @return {?}\r\n         */\r\n        function (latLng) { return of(latLng); })), debounce((/**\r\n         * @return {?}\r\n         */\r\n        function () { return timer(1000); })), switchMap((/**\r\n         * @param {?} latLng\r\n         * @return {?}\r\n         */\r\n        function (latLng) { return (/** @type {?} */ (_this.http.get(\"\" + _this.REVERSE_GEOCODING_URL + latLng.toUrlValue()))); })))\r\n            // .subscribe((latLng) => {\r\n            .subscribe((/**\r\n         * @param {?} response\r\n         * @return {?}\r\n         */\r\n        function (response) {\r\n            // this._geocoder.geocode({ location: latLng }, (response) => {\r\n            /** @type {?} */\r\n            var results = response[0] || ((/** @type {?} */ (response))).results;\r\n            /** @type {?} */\r\n            var firstResult = results[0] || results;\r\n            _this.address = firstResult && firstResult.formatted_address || 'desconocido';\r\n            _this.addressChanges.emit(_this.address);\r\n            _this.displayInfowindowOverPin();\r\n            // });\r\n        })));\r\n        this.onMapIdle();\r\n        this.displayInfowindowOverPin();\r\n        this._idleListener = this.googlemapsWrapper.map.addListener('idle', (/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.onMapIdle(); }));\r\n    };\r\n    /**\r\n     * Removes the pin from the map\r\n     */\r\n    /**\r\n     * Removes the pin from the map\r\n     * @return {?}\r\n     */\r\n    CenterMarker.prototype.disable = /**\r\n     * Removes the pin from the map\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this._centerMarker)\r\n            this._centerMarker.remove();\r\n        this._centerMarker = null;\r\n        this._mapEventSubscription.unsubscribe();\r\n        this.googlemapsWrapper.closeInfowindow();\r\n        google.maps.event.removeListener(this._idleListener);\r\n    };\r\n    /** @ignore */\r\n    /**\r\n     * @ignore\r\n     * @return {?}\r\n     */\r\n    CenterMarker.prototype.displayInfowindowOverPin = /**\r\n     * @ignore\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.viewContainer.clear();\r\n        /** @type {?} */\r\n        var view = this.viewContainer.createEmbeddedView(this._infowindowTemplate, { $implicit: this.address });\r\n        /** @type {?} */\r\n        var content = (/** @type {?} */ (view.rootNodes[0]));\r\n        /** @type {?} */\r\n        var center = this.googlemapsWrapper.map.getCenter();\r\n        /** @type {?} */\r\n        var offset = this.googlemapsWrapper.getMetersPerPx(center.lat()) * 36;\r\n        /** @type {?} */\r\n        var pos = google.maps.geometry.spherical.computeOffset(center, offset, 0);\r\n        this.googlemapsWrapper.openInfowindow(pos, content);\r\n    };\r\n    /** @ignore */\r\n    /**\r\n     * @ignore\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    CenterMarker.prototype.onMapIdle = /**\r\n     * @ignore\r\n     * @private\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var center = this.googlemapsWrapper.map.getCenter();\r\n        this.locationChanges.emit(center.toJSON());\r\n        this._centerChanged$.next(center);\r\n    };\r\n    return CenterMarker;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Creates an embeded google map with polygons representing the tracked objects.\r\n *\r\n * \\@example\r\n * <gmtv-map [data]=\"objectArray\" [template]=\"infowindow\" [mapOptions]=\"mapOptions\" [showLocationButton]=\"true\">\r\n *  <ng-template #infowindow let-o>\r\n *   <div id=\"root\">\r\n *     <h4>{{o.name}}</h4>\r\n *   </div>\r\n *  </ng-template>\r\n * </gmtv-map>\r\n */\r\nvar NgxGooglemapsTrackingViewComponent = /** @class */ (function () {\r\n    function NgxGooglemapsTrackingViewComponent(googlemapsWrapper, vc, http) {\r\n        this.googlemapsWrapper = googlemapsWrapper;\r\n        this.vc = vc;\r\n        this.http = http;\r\n        /**\r\n         * A marker fixed to the center of the map which emits the geo-decoded location\r\n         * as a full address.\r\n         * @see {\\@link CenterMarker}\r\n         */\r\n        this.centerPin = new CenterMarker(this.googlemapsWrapper, this.vc, this.http);\r\n        this._data = [];\r\n        /**\r\n         * Show location button in controls to retrieve user's location.\r\n         * An https connection is required.\r\n         */\r\n        this.showLocationButton = true;\r\n    }\r\n    Object.defineProperty(NgxGooglemapsTrackingViewComponent.prototype, \"data\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () { return this._data; },\r\n        /**\r\n         * Array of {@link TrackedObject} to draw on map\r\n         */\r\n        set: /**\r\n         * Array of {\\@link TrackedObject} to draw on map\r\n         * @param {?} val\r\n         * @return {?}\r\n         */\r\n        function (val) { this._data = val || []; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(NgxGooglemapsTrackingViewComponent.prototype, \"map\", {\r\n        /**\r\n         * Currently inited GoogleMaps  {@link https://developers.google.com/maps/documentation/javascript/reference/map#Map Map} object\r\n         */\r\n        get: /**\r\n         * Currently inited GoogleMaps  {\\@link https://developers.google.com/maps/documentation/javascript/reference/map#Map Map} object\r\n         * @return {?}\r\n         */\r\n        function () { return this.googlemapsWrapper.map; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    NgxGooglemapsTrackingViewComponent.prototype.ngOnInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.googlemapsWrapper.initMap(this.mapDiv.nativeElement, this.mapOptions);\r\n    };\r\n    /**\r\n     * Resolves when map has been inited\r\n     */\r\n    /**\r\n     * Resolves when map has been inited\r\n     * @return {?}\r\n     */\r\n    NgxGooglemapsTrackingViewComponent.prototype.ready = /**\r\n     * Resolves when map has been inited\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.googlemapsWrapper.ready();\r\n    };\r\n    /** @ignore */\r\n    /**\r\n     * @ignore\r\n     * @param {?} _index\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    NgxGooglemapsTrackingViewComponent.prototype.trackById = /**\r\n     * @ignore\r\n     * @param {?} _index\r\n     * @param {?} item\r\n     * @return {?}\r\n     */\r\n    function (_index, item) {\r\n        return item.id;\r\n    };\r\n    NgxGooglemapsTrackingViewComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'gmtv-map',\r\n                    template: \"<div id=\\\"map\\\" #map></div>\\r\\n\\r\\n<div id=\\\"tracked-object-list\\\">\\r\\n  <gmtv-tracked-object [trackedObject]=\\\"trkObj\\\" [template]=\\\"template\\\" *ngFor=\\\"let trkObj of data; trackBy: trackById\\\">\\r\\n  </gmtv-tracked-object>\\r\\n</div>\\r\\n\",\r\n                    styles: [\"#map{width:100%;height:100%}\"]\r\n                }] }\r\n    ];\r\n    /** @nocollapse */\r\n    NgxGooglemapsTrackingViewComponent.ctorParameters = function () { return [\r\n        { type: GoogleMapsWrapper },\r\n        { type: ViewContainerRef },\r\n        { type: HttpClient }\r\n    ]; };\r\n    NgxGooglemapsTrackingViewComponent.propDecorators = {\r\n        mapDiv: [{ type: ViewChild, args: ['map',] }],\r\n        mapOptions: [{ type: Input }],\r\n        showLocationButton: [{ type: Input }],\r\n        template: [{ type: Input }],\r\n        data: [{ type: Input }]\r\n    };\r\n    return NgxGooglemapsTrackingViewComponent;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar InfowindowComponent = /** @class */ (function () {\r\n    function InfowindowComponent(googleMaps, el) {\r\n        this.googleMaps = googleMaps;\r\n        this.el = el;\r\n        /**\r\n         * When infowindow has closed\r\n         */\r\n        this.closed = new EventEmitter();\r\n        /**\r\n         * Triggered on clicking on the X button\r\n         */\r\n        this.closeclick = new EventEmitter();\r\n        this.noPadding = false;\r\n        this.padding = false;\r\n        this.cssClass = '';\r\n        this.closeOnMapClick = true;\r\n        this.subscription = new Subscription();\r\n    }\r\n    Object.defineProperty(InfowindowComponent.prototype, \"nativeInfowindow\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.googleMaps.getInfowindow(this.id);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InfowindowComponent.prototype, \"addPadding\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return (this.isMobile && this.noPadding === false) || this.padding !== false;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InfowindowComponent.prototype, \"isMobile\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return window.innerWidth < 768;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(InfowindowComponent.prototype, \"isOpen\", {\r\n        get: /**\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.googleMaps.isInfowindowOpen(this.id);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * @return {?}\r\n     */\r\n    InfowindowComponent.prototype.ngAfterContentInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var template = this.contentTemplateRef || this.defaultTemplateRef;\r\n        this.view = template && template.createEmbeddedView(this.ctx);\r\n        this.googleMaps.click.subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.onMapClick(); }));\r\n        this.subscription = this.nativeInfowindow['closeclick'].subscribe((/**\r\n         * @return {?}\r\n         */\r\n        function () { return _this.closeclick.emit(); }));\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    InfowindowComponent.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.id)\r\n            this.googleMaps.destroyInfowindow(this.id);\r\n        this.subscription.unsubscribe();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    InfowindowComponent.prototype.getNativeInfowindow = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return this.googleMaps.getInfowindow(this.id);\r\n    };\r\n    /**\r\n     * @param {?} anchor\r\n     * @return {?}\r\n     */\r\n    InfowindowComponent.prototype.open = /**\r\n     * @param {?} anchor\r\n     * @return {?}\r\n     */\r\n    function (anchor) {\r\n        if (this.vc && this.view && !this.view.destroyed)\r\n            this.vc.insert(this.view);\r\n        this.content = this.view && this.view.rootNodes[0];\r\n        this.googleMaps.openInfowindow(anchor, this.content, this.id);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    InfowindowComponent.prototype.close = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.googleMaps.isInfowindowOpen(this.id)) {\r\n            this.googleMaps.closeInfowindow(this.id);\r\n            this.onClosed();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    InfowindowComponent.prototype.onMapClick = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.closeOnMapClick)\r\n            this.close();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    InfowindowComponent.prototype.onClosed = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        try {\r\n            this.vc.remove(0);\r\n            this.view.destroy();\r\n            this.vc.clear();\r\n        }\r\n        catch (ex) {\r\n            console.warn(ex);\r\n        }\r\n        this.closed.emit();\r\n    };\r\n    InfowindowComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'gmtv-infowindow',\r\n                    template: \"\\t<div style=\\\"display: none;\\\" #root>\\n                <ng-template #defaultTemplate let-o>\\n                  <div id=\\\"rootNode\\\">\\n                    <h3>{{o.name}}</h3>\\n                    <p>\\n                      <strong>ID:</strong> {{o.id}}<br>\\n                      <strong>Position:</strong> {{o.position?.toJSON() | json}}<br>\\n                      <strong>Heading:</strong> {{o.heading | number:'1.0-1'}}\\u00B0<br>\\n                    </p>\\n                  </div>\\n                </ng-template>\\n                <ng-container #vc></ng-container>\\n              </div>\"\r\n                }] }\r\n    ];\r\n    /** @nocollapse */\r\n    InfowindowComponent.ctorParameters = function () { return [\r\n        { type: GoogleMapsWrapper },\r\n        { type: ElementRef }\r\n    ]; };\r\n    InfowindowComponent.propDecorators = {\r\n        root: [{ type: ViewChild, args: ['root',] }],\r\n        defaultTemplateRef: [{ type: ViewChild, args: ['defaultTemplate',] }],\r\n        vc: [{ type: ViewChild, args: ['vc', { read: ViewContainerRef },] }],\r\n        closed: [{ type: Output }],\r\n        closeclick: [{ type: Output }],\r\n        noPadding: [{ type: Input }],\r\n        padding: [{ type: Input }],\r\n        id: [{ type: Input }],\r\n        cssClass: [{ type: Input }],\r\n        contentTemplateRef: [{ type: Input, args: ['template',] }],\r\n        ctx: [{ type: Input, args: ['context',] }],\r\n        closeOnMapClick: [{ type: Input }]\r\n    };\r\n    return InfowindowComponent;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Size in meters to draw each unity speed on map in a dashed line\r\n * @type {?}\r\n */\r\nvar SPEED_UNIT_LENGTH_M = 20;\r\n/**\r\n * Level of detail.\r\n * Minimal zoom to start drawing objects\r\n *\r\n * @type {?}\r\n */\r\nvar LOD = {\r\n    speed: 15,\r\n    scaleTriangle: 15,\r\n    nameLabels: 0\r\n}\r\n/**\r\n * This class renders a trackable object on the map\r\n *\r\n * @example\r\n * // component.ts\r\n * const objectsToTrack: TrackedObject[] = [{\r\n *   id: '1',\r\n *   color: 'blue',\r\n *   heading: 45,\r\n *   label: {text: 'Test object #1' },\r\n *   position: new google.maps.LatLng(19.53124, -96.91589),\r\n * }]\r\n *\r\n * // component.html\r\n * <gmtv-map [data]=\"objectsToTrack\"></gmtv-map>\r\n */\r\n;\r\n/**\r\n * This class renders a trackable object on the map\r\n *\r\n * \\@example\r\n * // component.ts\r\n * const objectsToTrack: TrackedObject[] = [{\r\n *   id: '1',\r\n *   color: 'blue',\r\n *   heading: 45,\r\n *   label: {text: 'Test object #1' },\r\n *   position: new google.maps.LatLng(19.53124, -96.91589),\r\n * }]\r\n *\r\n * // component.html\r\n * <gmtv-map [data]=\"objectsToTrack\"></gmtv-map>\r\n */\r\nvar TrackedObjectComponent = /** @class */ (function () {\r\n    function TrackedObjectComponent(googleMaps) {\r\n        this.googleMaps = googleMaps;\r\n        this.dotMarker = new google.maps.Marker({ position: { lat: NaN, lng: NaN } });\r\n        this.hoverDotListeners = [];\r\n        this.hoverPolygonListeners = [];\r\n        this.subscription = new Subscription();\r\n        this.defaultColor = 'red';\r\n        this.polygon = new google.maps.Polygon({\r\n            strokeColor: this.color,\r\n            strokeOpacity: 0.8,\r\n            strokeWeight: 2,\r\n            fillColor: this.color,\r\n            fillOpacity: !this.offline ? .55 : 0,\r\n            draggable: false\r\n        });\r\n        this.drawSpeedVector = false;\r\n    }\r\n    /**\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.ngAfterContentInit = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        return __awaiter(this, void 0, void 0, function () {\r\n            var _this = this;\r\n            return __generator(this, function (_a) {\r\n                switch (_a.label) {\r\n                    case 0: return [4 /*yield*/, this.googleMaps.ready()];\r\n                    case 1:\r\n                        _a.sent();\r\n                        // Add bounds changed event\r\n                        this.checkRenderObject();\r\n                        this.subscription.add(this.googleMaps.boundsChanged\r\n                            .subscribe((/**\r\n                         * @return {?}\r\n                         */\r\n                        function () { return _this.checkRenderObject(); })));\r\n                        this.drawObject();\r\n                        return [2 /*return*/];\r\n                }\r\n            });\r\n        });\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.ngOnChanges = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.trackedObject)\r\n            return;\r\n        this.drawObject();\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.ngOnDestroy = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.polygon.setMap(null);\r\n        this.vectorLine.setMap(null);\r\n        this.dotMarker.setMap(null);\r\n        this.subscription.unsubscribe();\r\n        if (this.zoomListener)\r\n            this.zoomListener.remove();\r\n    };\r\n    Object.defineProperty(TrackedObjectComponent.prototype, \"color\", {\r\n        /**\r\n         * Current color for the current tracked object\r\n         */\r\n        get: /**\r\n         * Current color for the current tracked object\r\n         * @return {?}\r\n         */\r\n        function () { return this.trackedObject && this.trackedObject.color || this.defaultColor; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TrackedObjectComponent.prototype, \"isMoving\", {\r\n        get: /**\r\n         * @protected\r\n         * @return {?}\r\n         */\r\n        function () { return !!this.trackedObject && this.trackedObject.speed !== 0; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TrackedObjectComponent.prototype, \"offline\", {\r\n        get: /**\r\n         * @protected\r\n         * @return {?}\r\n         */\r\n        function () { return this.trackedObject && this.trackedObject.isOffline; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TrackedObjectComponent.prototype, \"hasValidMeasures\", {\r\n        get: /**\r\n         * @protected\r\n         * @return {?}\r\n         */\r\n        function () { return true; },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TrackedObjectComponent.prototype, \"scale\", {\r\n        /**\r\n         * Adaptive scale according to current zoom\r\n         */\r\n        get: /**\r\n         * Adaptive scale according to current zoom\r\n         * @protected\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            /** @type {?} */\r\n            var zoom = this.googleMaps && this.googleMaps.map && this.googleMaps.map.getZoom() || 1;\r\n            /** @type {?} */\r\n            var s = Math.ceil(LOD.scaleTriangle - zoom);\r\n            return Math.pow(2, s) * (this.trackedObject.scale && this.trackedObject.scale || 1);\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TrackedObjectComponent.prototype, \"tipLatLng\", {\r\n        /**\r\n         * Tip point\r\n         */\r\n        get: /**\r\n         * Tip point\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.hasValidMeasures)\r\n                return this.polygon && this.polygon.getPath().getAt(3);\r\n            else\r\n                return this.trackedObject.position;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TrackedObjectComponent.prototype, \"rearLatLng\", {\r\n        /**\r\n         * Rear point\r\n         */\r\n        get: /**\r\n         * Rear point\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            if (this.hasValidMeasures)\r\n                return this.polygon && this.polygon.getPath().getAt(0);\r\n            else\r\n                return this.trackedObject.position;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TrackedObjectComponent.prototype, \"canDrawPolygon\", {\r\n        get: /**\r\n         * @protected\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.hasValidMeasures;\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    Object.defineProperty(TrackedObjectComponent.prototype, \"zoom\", {\r\n        /**\r\n         * Current map's zoom\r\n         */\r\n        get: /**\r\n         * Current map's zoom\r\n         * @protected\r\n         * @return {?}\r\n         */\r\n        function () {\r\n            return this.googleMaps.map && this.googleMaps.map.getZoom();\r\n        },\r\n        enumerable: true,\r\n        configurable: true\r\n    });\r\n    /**\r\n     * Current relation to convert pixels to meters on the map\r\n     */\r\n    /**\r\n     * Current relation to convert pixels to meters on the map\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.getMetersPerPx = /**\r\n     * Current relation to convert pixels to meters on the map\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.trackedObject.position || !this.googleMaps.map)\r\n            return 0;\r\n        return this.googleMaps.getMetersPerPx(this.trackedObject.position.lat());\r\n    };\r\n    /**\r\n     * Checks if object is on screen and renders/unrenders it\r\n     */\r\n    /**\r\n     * Checks if object is on screen and renders/unrenders it\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.checkRenderObject = /**\r\n     * Checks if object is on screen and renders/unrenders it\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var path = this.polygon && this.polygon.getPath();\r\n        // If showing a polygon\r\n        if (path && !!path.getLength()) {\r\n            /** @type {?} */\r\n            var isPolygonOnScreen_1 = false;\r\n            if (path.getArray().length) {\r\n                /** @type {?} */\r\n                var bounds_1 = this.googleMaps.map.getBounds();\r\n                path.forEach((/**\r\n                 * @param {?} p\r\n                 * @return {?}\r\n                 */\r\n                function (p) { return isPolygonOnScreen_1 = isPolygonOnScreen_1 || bounds_1 && bounds_1.contains(p); }));\r\n            }\r\n            if (isPolygonOnScreen_1) {\r\n                this.dotMarker.setVisible(true);\r\n                this.polygon.setVisible(true);\r\n                this.vectorLine.setVisible(true);\r\n            }\r\n            else {\r\n                this.dotMarker.setVisible(false);\r\n                this.polygon.setVisible(false);\r\n                this.vectorLine.setVisible(false);\r\n            }\r\n        }\r\n        // If using the dot marker\r\n        else if (this.dotMarker) {\r\n            /** @type {?} */\r\n            var bounds = this.googleMaps.map.getBounds();\r\n            /** @type {?} */\r\n            var visible = !!bounds && bounds.contains(this.dotMarker.getPosition());\r\n            this.dotMarker.setVisible(visible);\r\n            this.polygon.setVisible(visible);\r\n            this.vectorLine.setVisible(visible);\r\n        }\r\n    };\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.clearEventListeners = /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.hoverPolygonListeners.forEach((/**\r\n         * @param {?} l\r\n         * @return {?}\r\n         */\r\n        function (l) { return l.remove(); }));\r\n        this.hoverPolygonListeners = [];\r\n        this.hoverDotListeners.forEach((/**\r\n         * @param {?} l\r\n         * @return {?}\r\n         */\r\n        function (l) { return l.remove(); }));\r\n        this.hoverDotListeners = [];\r\n    };\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.setupEventListeners = /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        /** @type {?} */\r\n        var showPolygon = (this.canDrawPolygon && this.zoom >= LOD.scaleTriangle) || (this.isMoving && this.zoom < LOD.scaleTriangle);\r\n        if (showPolygon && !this.trackedObject.icon) {\r\n            // Add listeners for polygon, not do\r\n            if (this.hoverPolygonListeners.length < 1) {\r\n                this.clearEventListeners();\r\n                this.hoverPolygonListeners.push(this.polygon.addListener('mouseover', (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.onMouseOver(); })), this.polygon.addListener('mouseout', (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.onMouseOut(); })));\r\n            }\r\n        }\r\n        else {\r\n            // Add listeners for dot, not polygon\r\n            if (this.hoverDotListeners.length < 1) {\r\n                this.clearEventListeners();\r\n                this.hoverDotListeners.push(this.dotMarker.addListener('mouseover', (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.onMouseOver(); })), this.dotMarker.addListener('mouseout', (/**\r\n                 * @return {?}\r\n                 */\r\n                function () { return _this.onMouseOut(); })));\r\n            }\r\n        }\r\n        // Listen for zoom change\r\n        if (!this.zoomListener)\r\n            this.zoomListener = this.googleMaps.map.addListener('zoom_changed', (/**\r\n             * @return {?}\r\n             */\r\n            function () { return _this.onZoomChanged(); }));\r\n    };\r\n    /**\r\n       * Returns the series of icons according to the current zoom level\r\n       */\r\n    /**\r\n     * Returns the series of icons according to the current zoom level\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.getSpeedLineIcons = /**\r\n     * Returns the series of icons according to the current zoom level\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        /** @type {?} */\r\n        var s = Math.ceil(this.zoom - LOD.scaleTriangle);\r\n        /** @type {?} */\r\n        var icons = [];\r\n        /** @type {?} */\r\n        var l = SPEED_UNIT_LENGTH_M * this.scale;\r\n        /** @type {?} */\r\n        var dashLength = Math.round(l / this.getMetersPerPx() * .5);\r\n        /** @type {?} */\r\n        var skipIconOnFifth = false;\r\n        // Units\r\n        /** @type {?} */\r\n        var iconUnits = {\r\n            path: \"M 0 0 L 0 \" + dashLength,\r\n            scale: 1,\r\n            strokeWeight: 2,\r\n            fillOpacity: 1\r\n        };\r\n        /** @type {?} */\r\n        var units = Math.round(this.trackedObject.speed);\r\n        for (var i = 1; i <= units; i++) {\r\n            /** @type {?} */\r\n            var percent = Math.round(100 / units * i);\r\n            icons.push({\r\n                icon: (i % 5 == 0 && skipIconOnFifth) ? null : iconUnits,\r\n                offset: percent + \"%\"\r\n            });\r\n        }\r\n        // Fifths\r\n        /** @type {?} */\r\n        var iconFifths = {\r\n            path: \"M \" + dashLength + \" \" + dashLength / 2 + \" L -\" + dashLength + \" \" + dashLength / 2,\r\n            scale: 1,\r\n            strokeWeight: 2,\r\n        };\r\n        /** @type {?} */\r\n        var fifths = Math.floor(units / 5);\r\n        for (var i = 1; i <= fifths; i++) {\r\n            /** @type {?} */\r\n            var percent = Math.round(100 / units * 5 * i);\r\n            icons.push({\r\n                icon: iconFifths,\r\n                offset: percent + \"%\"\r\n            });\r\n        }\r\n        return icons;\r\n    };\r\n    /**\r\n       * Initis/updates polyline with icons according to current zoom level\r\n       */\r\n    /**\r\n     * Initis/updates polyline with icons according to current zoom level\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.initSpeedPolyline = /**\r\n     * Initis/updates polyline with icons according to current zoom level\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.vectorLine)\r\n            this.vectorLine.setMap(null);\r\n        this.vectorLine = new google.maps.Polyline({\r\n            strokeColor: 'green',\r\n            strokeWeight: 0,\r\n            draggable: false,\r\n            editable: false,\r\n            path: [],\r\n            icons: this.getSpeedLineIcons(),\r\n            map: this.googleMaps.map,\r\n        });\r\n        this.vectorLine.setVisible(false);\r\n    };\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.initDotaMarker = /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (this.dotMarker)\r\n            this.dotMarker.setMap(null);\r\n        this.googleMaps.addMarker(this.dotMarker);\r\n    };\r\n    /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.getTrianglePath = /**\r\n     * @protected\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.polygon)\r\n            return [];\r\n        /** @type {?} */\r\n        var positionDot = this.trackedObject.position;\r\n        /** @type {?} */\r\n        var center = positionDot;\r\n        /** @type {?} */\r\n        var h = this.trackedObject.heading || 0;\r\n        /** @type {?} */\r\n        var w = 50;\r\n        /** @type {?} */\r\n        var l = 100;\r\n        /** @type {?} */\r\n        var rear = google.maps.geometry.spherical.computeOffset(center, l / 2 * this.scale, h + 180);\r\n        /** @type {?} */\r\n        var rearLeft = google.maps.geometry.spherical.computeOffset(rear, w / 2 * this.scale, h - 90);\r\n        /** @type {?} */\r\n        var rearRight = google.maps.geometry.spherical.computeOffset(rear, w / 2 * this.scale, h + 90);\r\n        /** @type {?} */\r\n        var tip = google.maps.geometry.spherical.computeOffset(rear, l * this.scale, h);\r\n        return [rear, rearLeft, tip, rearRight];\r\n    };\r\n    /**\r\n     * @protected\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.getVectorLinePath = /**\r\n     * @protected\r\n     * @param {?} start\r\n     * @return {?}\r\n     */\r\n    function (start) {\r\n        /** @type {?} */\r\n        var l = SPEED_UNIT_LENGTH_M * this.trackedObject.speed;\r\n        /** @type {?} */\r\n        var end = google.maps.geometry.spherical.computeOffset(start, l, this.trackedObject.speed);\r\n        return [start, end];\r\n    };\r\n    /**\r\n     * @param {?} show\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.displayInfowindow = /**\r\n     * @param {?} show\r\n     * @return {?}\r\n     */\r\n    function (show) {\r\n        if (!this.infowindow)\r\n            return;\r\n        if (show) {\r\n            /** @type {?} */\r\n            var o = this.trackedObject.position;\r\n            this.infowindow.open(o);\r\n        }\r\n        else {\r\n            this.infowindow.close();\r\n        }\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.drawObject = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        if (!this.dotMarker)\r\n            this.initDotaMarker();\r\n        this.initSpeedPolyline();\r\n        if (!this.trackedObject.position)\r\n            return;\r\n        this.setupEventListeners();\r\n        /** @type {?} */\r\n        var showDot = !this.isMoving;\r\n        /** @type {?} */\r\n        var showTriangle = this.isMoving && !this.trackedObject.icon;\r\n        /** @type {?} */\r\n        var showSpeedLine = this.drawSpeedVector && this.isMoving && this.zoom >= LOD.speed;\r\n        // Show triangle\r\n        if (showTriangle) {\r\n            /** @type {?} */\r\n            var polygonPath = this.getTrianglePath();\r\n            if (polygonPath.length) {\r\n                this.polygon.setOptions({\r\n                    fillOpacity: !this.offline ? .55 : 0,\r\n                    fillColor: this.color,\r\n                    strokeColor: this.color,\r\n                });\r\n                this.polygon.setPath(polygonPath);\r\n                this.polygon.setVisible(true);\r\n                this.polygon.setMap(this.googleMaps.map);\r\n            }\r\n        }\r\n        else {\r\n            this.polygon.setVisible(false);\r\n            this.polygon.setMap(null);\r\n        }\r\n        // Draw speed vector\r\n        if (showSpeedLine) {\r\n            /** @type {?} */\r\n            var o = this.trackedObject.position;\r\n            /** @type {?} */\r\n            var linePath = this.getVectorLinePath(o);\r\n            this.vectorLine.setPath(linePath);\r\n            this.vectorLine.setVisible(true);\r\n            this.vectorLine.setMap(this.googleMaps.map);\r\n        }\r\n        else {\r\n            this.vectorLine.setVisible(false);\r\n            this.vectorLine.setMap(null);\r\n        }\r\n        // Update dot icon\r\n        this.dotMarker.setIcon(this.trackedObject.icon ||\r\n            {\r\n                path: google.maps.SymbolPath.CIRCLE,\r\n                fillColor: this.color,\r\n                fillOpacity: !this.offline && showDot ? 0.6 : 0,\r\n                strokeColor: this.color,\r\n                strokeOpacity: showDot ? 0.9 : 0,\r\n                strokeWeight: 1,\r\n                scale: 5 * (this.trackedObject.scale || 1),\r\n                labelOrigin: new google.maps.Point(0, 5),\r\n                anchor: new google.maps.Point(.5, .5),\r\n            });\r\n        this.dotMarker.setLabel(this.zoom >= LOD.nameLabels ? this.trackedObject.label : '');\r\n        this.dotMarker.setPosition(this.trackedObject.position);\r\n        this.dotMarker.setMap(this.googleMaps.map);\r\n        this.dotMarker.setVisible(true);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.onMouseOver = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.displayInfowindow(true);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.onMouseOut = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.displayInfowindow(false);\r\n    };\r\n    /**\r\n     * @return {?}\r\n     */\r\n    TrackedObjectComponent.prototype.onZoomChanged = /**\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        this.drawObject();\r\n    };\r\n    TrackedObjectComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'gmtv-tracked-object',\r\n                    template: \"<gmtv-infowindow [template]=\\\"template\\\" [context]=\\\"{$implicit: trackedObject}\\\"></gmtv-infowindow>\"\r\n                }] }\r\n    ];\r\n    /** @nocollapse */\r\n    TrackedObjectComponent.ctorParameters = function () { return [\r\n        { type: GoogleMapsWrapper }\r\n    ]; };\r\n    TrackedObjectComponent.propDecorators = {\r\n        trackedObject: [{ type: Input }],\r\n        template: [{ type: Input }],\r\n        infowindow: [{ type: ViewChild, args: [InfowindowComponent,] }]\r\n    };\r\n    return TrackedObjectComponent;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\n/**\r\n * Creates the default user location button.\r\n *\r\n * ⚠ Add this component as sibling **AFTER the\r\n * map element**, so if renders on top of it.\r\n *\r\n * \\@example\r\n * <div id=\"parent\" style=\"height: 100%; width: 100%;\">\r\n *   <div id=\"map\" #map></div>\r\n *   <gmtv-geolocation-button (locate)=\"onLocation()\"></gmtv-geolocation-button>\r\n * </div>\r\n */\r\nvar GeolocationButtonComponent = /** @class */ (function () {\r\n    function GeolocationButtonComponent(googlemapsWrapper) {\r\n        this.googlemapsWrapper = googlemapsWrapper;\r\n        /**\r\n         * Emited after obtaining the user's location\r\n         */\r\n        this.locate = new EventEmitter();\r\n    }\r\n    /**\r\n     * Center map on user's location\r\n     */\r\n    /**\r\n     * Center map on user's location\r\n     * @return {?}\r\n     */\r\n    GeolocationButtonComponent.prototype.centerOnUser = /**\r\n     * Center map on user's location\r\n     * @return {?}\r\n     */\r\n    function () {\r\n        var _this = this;\r\n        if (navigator.geolocation) {\r\n            navigator.geolocation.getCurrentPosition((/**\r\n             * @param {?} position\r\n             * @return {?}\r\n             */\r\n            function (position) {\r\n                /** @type {?} */\r\n                var lng = position.coords.longitude;\r\n                /** @type {?} */\r\n                var lat = position.coords.latitude;\r\n                _this.googlemapsWrapper.map.setCenter({ lat: lat, lng: lng });\r\n                if (_this._geoLocationMarker)\r\n                    _this._geoLocationMarker.setMap(null);\r\n                _this._geoLocationMarker = new GeolocationMarker(_this.googlemapsWrapper.map);\r\n                _this.locate.emit(_this._geoLocationMarker.position);\r\n            }), (/**\r\n             * @param {?} error\r\n             * @return {?}\r\n             */\r\n            function (error) {\r\n                console.error(error);\r\n            }), { enableHighAccuracy: true });\r\n        }\r\n        else {\r\n            console.error('No support for geolocation');\r\n        }\r\n    };\r\n    GeolocationButtonComponent.decorators = [\r\n        { type: Component, args: [{\r\n                    selector: 'gmtv-geolocation-button',\r\n                    template: \"<button aria-label=\\\"Show Your Location\\\" id=\\\"widget-mylocation\\\" class=\\\"widget-mylocation-button ripple-container\\\"\\r\\n  (click)=\\\"centerOnUser()\\\">\\r\\n  <div class=\\\"widget-mylocation-button-icon-common widget-mylocation-button-normal widget-mylocation-cookie\\\"></div>\\r\\n</button>\",\r\n                    styles: [\"#widget-mylocation{position:absolute;right:10px;bottom:110px;padding:0}.widget-mylocation-button{background-color:#fff;border-radius:3px;box-shadow:0 1px 4px rgba(0,0,0,.3);display:block;width:40px;height:40px;overflow:hidden;cursor:pointer;transition:background-color .16s ease-out}.widget-mylocation-button .widget-mylocation-button-normal{background-position:0 0}.widget-mylocation-button .widget-mylocation-cookie{background-image:url(//maps.gstatic.com/tactile/mylocation/mylocation-sprite-2x.png);background-size:200px 20px;height:100%;width:21px;background-position:2px 2px;background-repeat:no-repeat}.widget-mylocation-button-icon-common{display:block;height:18px;left:6px;margin:0;padding:0;position:absolute;top:6px;width:18px}\"]\r\n                }] }\r\n    ];\r\n    /** @nocollapse */\r\n    GeolocationButtonComponent.ctorParameters = function () { return [\r\n        { type: GoogleMapsWrapper }\r\n    ]; };\r\n    GeolocationButtonComponent.propDecorators = {\r\n        locate: [{ type: Output }]\r\n    };\r\n    return GeolocationButtonComponent;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\r\nvar NgxGooglemapsTrackingViewModule = /** @class */ (function () {\r\n    function NgxGooglemapsTrackingViewModule() {\r\n    }\r\n    NgxGooglemapsTrackingViewModule.decorators = [\r\n        { type: NgModule, args: [{\r\n                    declarations: [\r\n                        NgxGooglemapsTrackingViewComponent,\r\n                        TrackedObjectComponent,\r\n                        InfowindowComponent,\r\n                        GeolocationButtonComponent\r\n                    ],\r\n                    imports: [\r\n                        CommonModule\r\n                    ],\r\n                    providers: [GoogleMapsWrapper],\r\n                    exports: [\r\n                        NgxGooglemapsTrackingViewComponent,\r\n                        InfowindowComponent,\r\n                        GeolocationButtonComponent\r\n                    ]\r\n                },] }\r\n    ];\r\n    return NgxGooglemapsTrackingViewModule;\r\n}());\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\n/**\r\n * @fileoverview added by tsickle\r\n * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc\r\n */\n\nexport { NgxGooglemapsTrackingViewComponent, NgxGooglemapsTrackingViewModule, GeolocationButtonComponent as ɵd, InfowindowComponent as ɵc, TrackedObjectComponent as ɵb, GoogleMapsWrapper as ɵa };\n\n//# sourceMappingURL=ngx-googlemaps-tracking-view.js.map","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","module.exports = \"<!-- Center Pin Example -->\\r\\n<!-- <button (click)=\\\"map.centerPin.enable(infowindowLocation, '<yourApuKey>')\\\">Add center Pin</button>\\r\\n<button (click)=\\\"map.centerPin.disable()\\\">Remove Pin</button>\\r\\n<ng-template #infowindowLocation let-address>\\r\\n  <div style=\\\"min-height: 20px; min-width: 50px;\\\">\\r\\n    <span *ngIf=\\\"!address\\\">Loading...</span>\\r\\n    <span *ngIf=\\\"!!address\\\">{{address}}</span>\\r\\n  </div>\\r\\n</ng-template> -->\\r\\n\\r\\n\\r\\n<div id=\\\"parent\\\" style=\\\"height: 100%; width: 100%;\\\">\\r\\n\\r\\n  <gmtv-map [data]=\\\"objectsToTrack\\\" [template]=\\\"infowindow\\\" [mapOptions]=\\\"mapOptions\\\" [showLocationButton]=\\\"true\\\" #map>\\r\\n    <ng-template #infowindow let-o>\\r\\n      <div>\\r\\n        <h3>Flight #{{o.label?.text}} <span class=\\\"flag-icon flag-icon-{{getIsoCode(o.country)?.toLowerCase()}}\\\"\\r\\n            [title]=\\\"o.country\\\"></span></h3>\\r\\n        <span><strong>Altitude: </strong>{{o.altitude | number: '1.0-0'}}m</span>\\r\\n      </div>\\r\\n    </ng-template>\\r\\n  </gmtv-map>\\r\\n\\r\\n  <gmtv-geolocation-button></gmtv-geolocation-button>\\r\\n\\r\\n</div>\\r\\n\"","module.exports = \"#parent {\\n  padding-top: env(safe-area-inset-top, 40px);\\n  padding-bottom: env(safe-area-inset-bottom, 40px); }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvQzpcXFVzZXJzXFxSYXNjaGlkXFxHaXRcXGFuZ3VsYXJcXGdvb2dsZW1hcHMtdHJhY2tpbmctdmlldy9zcmNcXGFwcFxcYXBwLmNvbXBvbmVudC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0VBQ0UsMkNBQTJDO0VBQzNDLGlEQUFpRCxFQUFBIiwiZmlsZSI6InNyYy9hcHAvYXBwLmNvbXBvbmVudC5zY3NzIiwic291cmNlc0NvbnRlbnQiOlsiI3BhcmVudCB7XHJcbiAgcGFkZGluZy10b3A6IGVudihzYWZlLWFyZWEtaW5zZXQtdG9wLCA0MHB4KTtcclxuICBwYWRkaW5nLWJvdHRvbTogZW52KHNhZmUtYXJlYS1pbnNldC1ib3R0b20sIDQwcHgpO1xyXG59Il19 */\"","/// <reference types=\"@types/googlemaps\" />\r\nimport { Component, ViewChild, AfterContentInit, ViewContainerRef } from '@angular/core';\r\nimport { NgxGooglemapsTrackingViewComponent, TrackedObject } from 'ngx-googlemaps-tracking-view';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as i18IsoCountries from 'i18n-iso-countries';\r\nimport * as randomColor from 'randomcolor';\r\nimport * as parseSvg from 'parse-svg-path';\r\nimport * as extractSvg from 'extract-svg-path';\r\nimport * as loadSvg from 'load-svg';\r\n\r\ni18IsoCountries.registerLocale(require('i18n-iso-countries/langs/en.json'));\r\n\r\ninterface Aircraft {\r\n  /** icao24 */\r\n  0: string,\r\n  /** origin_country */\r\n  2: string,\r\n  /** longitude */\r\n  5: number,\r\n  /** latitude */\r\n  6: number,\r\n  /** on_ground */\r\n  8: boolean,\r\n  /** true_track */\r\n  10: number,\r\n  /** geo_altitude */\r\n  13: number,\r\n}\r\n\r\ninterface TrackedAircraft extends TrackedObject {\r\n  altitude: number,\r\n  country: string,\r\n  onGround: boolean,\r\n}\r\n\r\n@Component({\r\n  selector: 'app-root',\r\n  templateUrl: './app.component.html',\r\n  styleUrls: ['./app.component.scss'],\r\n})\r\nexport class AppComponent implements AfterContentInit {\r\n  @ViewChild(NgxGooglemapsTrackingViewComponent) mapView: NgxGooglemapsTrackingViewComponent;\r\n\r\n  objectsToTrack: TrackedObject[] = [];\r\n  symbolPath = '';\r\n\r\n  mapOptions: google.maps.MapOptions = {\r\n    center: {\r\n      lat: 42.504154,\r\n      lng: 12.646361\r\n    },\r\n    zoom: 6,\r\n    mapTypeId: google.maps.MapTypeId.SATELLITE,\r\n  }\r\n\r\n  constructor(private http: HttpClient, public vc: ViewContainerRef) {\r\n    // Load svg as symbol path\r\n    loadSvg('assets/baseline-local_airport-24px.svg', (err, svg) => {\r\n      const paths: any[][] = parseSvg(extractSvg.parse(svg));\r\n      const i = paths.findIndex(p => p[0] == 'z');\r\n      this.symbolPath = paths\r\n        .slice(0, i - 1)\r\n        .map(p => p.join(' ')).join(' ');\r\n    });\r\n  }\r\n\r\n  async ngAfterContentInit() {\r\n    await this.mapView.ready();\r\n    this.getAircracts();\r\n    setInterval(() => this.getAircracts(), 10000);\r\n  }\r\n\r\n  getAircracts() {\r\n    const bounds = this.mapView.map.getBounds();\r\n    const ne = bounds.getNorthEast();\r\n    const sw = bounds.getSouthWest();\r\n    this.http.get(`https://opensky-network.org/api/states/all?lamin=${sw.lat()}&lomin=${sw.lng()}&lamax=${ne.lat()}&lomax=${ne.lng()}`)\r\n      .subscribe((response: { states: Aircraft[] }) => {\r\n        this.objectsToTrack = response.states &&\r\n          response.states.map(aircraft => {\r\n            const found = this.objectsToTrack.find(a => a.id == aircraft[0]);\r\n            const trkObj: TrackedAircraft = {\r\n              altitude: aircraft[13],\r\n              id: aircraft[0],\r\n              color: found && found.color || randomColor(),\r\n              country: aircraft[2],\r\n              heading: aircraft[10],\r\n              icon: found && found.icon || this.getIcon(aircraft[10]),\r\n              // speed: 0,\r\n              label: {\r\n                text: aircraft[0].toLocaleUpperCase(),\r\n                color: 'white'\r\n              },\r\n              // isOffline: true,\r\n              onGround: aircraft[8],\r\n              position: new google.maps.LatLng(aircraft[6], aircraft[5]),\r\n              // scale: 2,\r\n            }\r\n            return trkObj;\r\n          })\r\n            .filter(a => !a.onGround)\r\n            .splice(0, 50)\r\n          || [];\r\n      });\r\n  }\r\n\r\n  getIsoCode(countryName: string) {\r\n    return i18IsoCountries.getAlpha2Code(countryName, 'en');\r\n  }\r\n\r\n  getIcon(rotation: number): google.maps.Symbol {\r\n    const color = randomColor();\r\n    return {\r\n      path: this.symbolPath,\r\n      labelOrigin: new google.maps.Point(0, 5),\r\n      fillColor: color,\r\n      fillOpacity: .6,\r\n      strokeColor: color,\r\n      strokeOpacity: 1,\r\n      strokeWeight: 2,\r\n      scale: 2,\r\n      rotation: rotation\r\n    }\r\n  }\r\n}\r\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { NgModule } from '@angular/core';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { NgxGooglemapsTrackingViewModule } from 'ngx-googlemaps-tracking-view';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    NgxGooglemapsTrackingViewModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","// This file can be replaced during build by using the `fileReplacements` array.\r\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\r\n// The list of file replacements can be found in `angular.json`.\r\n\r\nexport const environment = {\r\n  production: false\r\n};\r\n\r\n/*\r\n * For easier debugging in development mode, you can import the following file\r\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\r\n *\r\n * This import should be commented out in production mode because it will have a negative impact\r\n * on performance if an error is thrown.\r\n */\r\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\r\n","import { enableProdMode } from '@angular/core';\r\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\r\n\r\nimport { AppModule } from './app/app.module';\r\nimport { environment } from './environments/environment';\r\n\r\nif (environment.production) {\r\n  enableProdMode();\r\n}\r\n\r\nplatformBrowserDynamic().bootstrapModule(AppModule)\r\n  .catch(err => console.error(err));\r\n"],"sourceRoot":""}