{"version":3,"sources":["../http/src/backend.ts","../http/src/headers.ts","../http/src/params.ts","../http/src/request.ts","../http/src/response.ts","../http/src/client.ts","../http/src/interceptor.ts","../http/src/jsonp.ts","../http/src/xhr.ts","../http/src/xsrf.ts","../http/src/module.ts","../http/http.ts","./node_modules/diacritics/index.js","./node_modules/extract-svg-path/browser.js","./node_modules/global/window.js","./node_modules/i18n-iso-countries/index.js","./node_modules/load-svg/index.js","ng://ngx-googlemaps-tracking-view/lib/services/googlemaps-wrapper.ts","ng://ngx-googlemaps-tracking-view/lib/components/center-marker/center-marker.ts","ng://ngx-googlemaps-tracking-view/lib/ngx-googlemaps-tracking-view.component.ts","ng://ngx-googlemaps-tracking-view/lib/components/infowindow/infowindow.component.ts","ng://ngx-googlemaps-tracking-view/lib/components/tracked-object/tracked-object.component.ts","ng://ngx-googlemaps-tracking-view/lib/components/geolocation-button/geolocation-button.ts","ng://ngx-googlemaps-tracking-view/lib/ngx-googlemaps-tracking-view.module.ts","src/geolocation-marker.js"," [synthetic:es6/util/inherits] ","src/geolocation-marker-exports.js","./node_modules/ngx-googlemaps-tracking-view/node_modules/tslib/tslib.es6.js","./node_modules/parse-headers/parse-headers.js","./node_modules/parse-svg-path/index.js","./node_modules/randomcolor/randomColor.js","./src/app/home/home.page.html","(webpack)/buildin/module.js","./node_modules/xhr/index.js","./node_modules/xhr/node_modules/once/once.js","./node_modules/xml-parse-from-string/index.js","./src/app/home/home.module.ts","./src/app/home/home.page.scss","./src/app/home/home.page.ts"],"names":["parseCookieValue","constructor","GeolocationMarker","opt_map","opt_outerMarkerOpts","opt_markerOpts","opt_circleOpts","outerMarker_","marker_","circle_","watchId_","outerMarkerOpts","google","maps","SymbolPath","CIRCLE","LatLng","markerOpts","copyOptions_","circleOpts","Marker","Circle","MVCObject","prototype","set","call","enableHighAccuracy","maximumAge","bindTo","setMap","$jscomp.inherits","GeolocationMarker$$module$src$geolocation_marker.prototype","?.prototype","key","value","GeolocationMarker$$module$src$geolocation_marker.invalidPropertiesExpr_.test","test","GeolocationMarker$$module$src$geolocation_marker_prototype$getMap","getMap","get","getPositionOptions","setPositionOptions","positionOpts","GeolocationMarker$$module$src$geolocation_marker_prototype$getPosition","getPosition","GeolocationMarker$$module$src$geolocation_marker_prototype$getBounds","getBounds","getAccuracy","getMinimumAccuracy","setMinimumAccuracy","accuracy","map","navigator","geolocation","watchPosition_","watchPosition","updatePosition_","bind","geolocationError_","unbind","clearWatch","setMarkerOptions","setOptions","setCircleOptions","position","newPosition","coords","latitude","longitude","mapNotSet","equals","data","event","trigger","target","source","opt","GeolocationMarker$$module$src$geolocation_marker.DISALLOWED_OPTIONS","GeolocationMarker$$module$src$geolocation_marker.invalidPropertiesExpr_","window","root","factory"],"mappings":"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ACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;AAEA;AACA,eAAe,4BAA4B;AAC3C;AACA,iBAAiB,kBAAkB;AACnC;AACA;AACA;;AAEA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;;;;;;;;;;;;AC3TA,eAAe,mBAAO,CAAC,4EAAuB;;AAE9C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;;;;;;;;;;;ACzBA;;AAEA;AACA;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA,CAAC;AACD;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;ACZa;;AAEb,YAAY,mBAAO,CAAC,kEAAc;AAClC,uBAAuB,mBAAO,CAAC,sDAAY;AAC3C;;AAEA;AACA;AACA;AACA,eAAe;AACf,aAAa;AACb,cAAc;AACd;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;;AAED;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAC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AE;AACF;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACxDA;AACA;;AAEA,CAAC;;AAED;AACA,MAAM,IAA2B;AACjC;;AAEA;AACA,QAAQ,KAA0B;AAClC;AACA;;AAEA;AACA;;AAEA;AACA,GAAG,MAAM,EAMN;;AAEH,CAAC;;AAED;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;;AAEA;AACA,KAAK;AACL;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,qBAAqB,mBAAmB;AACxC;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA,oBAAoB;AACpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA,mBAAmB,4BAA4B;;AAE/C;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA,6BAA6B;AAC7B,OAAO,yCAAyC,EAAE,UAAU,EAAE;AAC9D;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;;AAEA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,kBAAkB;AAClB,oBAAoB;;AAEpB;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC,oBAAoB,OAAO,OAAO;AAClC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,mBAAmB,qBAAqB;AACxC;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,GAAG;AACH;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA,KAAK,uCAAuC,EAAE,UAAU,EAAE;AAC1D;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,CAAC;;;;;;;;;;;;;;ACtgBD;AAAe,irCAAknC,iBAAiB,8SAA8S,wCAAwC,6dAA6d,eAAe,qCAAqC,sCAAsC,2GAA2G,8BAA8B,+K;;;;;;;;;;;ACAxqE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;AACA;AACA,GAAG;AACH;AACA;AACA;AACA;;;;;;;;;;;;ACrBA,aAAa,mBAAO,CAAC,sDAAe;AACpC,WAAW,mBAAO,CAAC,0DAAM;AACzB,mBAAmB,mBAAO,CAAC,oEAAe;;AAE1C;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA,mBAAmB;AACnB;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,SAAS;AACT;AACA;;AAEA;AACA;AACA;AACA,aAAa;AACb;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,sCAAsC;AACtC;AACA,SAAS;AACT;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;;;;;;;;;;;;AChLA;;AAEA;AACA;AACA;AACA;AACA,KAAK;AACL;AACA,GAAG;AACH,CAA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","file":"home-home-module-es2015.js","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers !: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit !: HttpHeaders | Function | null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | string[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key) !.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        Object.keys(headers).forEach(name => {\n          let values: string|string[] = headers[name];\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the value or values.\n   * @param value The new value or array of values.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or overide for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete (name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key) !);\n      this.normalizedNames.set(key, other.normalizedNames.get(key) !);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value !;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key) !, this.headers.get(key) !));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string { return standardEncoding(key); }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string { return standardEncoding(value); }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string { return decodeURIComponent(key); }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) { return decodeURIComponent(value); }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\ninterface Update {\n  param: string;\n  value?: string;\n  op: 'a'|'d'|'s';\n}\n\n/** Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {[param: string]: string | ReadonlyArray<string>};\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        this.map !.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map !.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map !.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map !.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map !.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string): HttpParams { return this.clone({param, value, op: 'a'}); }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string): HttpParams { return this.clone({param, value, op: 's'}); }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete (param: string, value?: string): HttpParams { return this.clone({param, value, op: 'd'}); }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          return this.map !.get(key) !.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        .join('&');\n  }\n\n  private clone(update: Update): HttpParams {\n    const clone = new HttpParams({ encoder: this.encoder } as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat([update]);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map !.set(key, this.cloneFrom !.map !.get(key) !));\n      this.updates !.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map !.get(update.param) : undefined) || [];\n            base.push(update.value !);\n            this.map !.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map !.get(update.param) || [];\n              const idx = base.indexOf(update.value);\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map !.set(update.param, base);\n              } else {\n                this.map !.delete(update.param);\n              }\n            } else {\n              this.map !.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers !: HttpHeaders;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params !: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  constructor(method: 'DELETE'|'GET'|'HEAD'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST'|'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        Array.isArray(this.body)) {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders ![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams ![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(\n        method, url, body, {\n                               params, headers, reportProgress, responseType, withCredentials,\n                           });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent { type: HttpEventType.Sent; }\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> { type: HttpEventType.User; }\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent | HttpHeaderResponse | HttpResponse<T>| HttpProgressEvent | HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type !: HttpEventType.Response | HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = 200, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T | null, headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V | null, headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any | null; headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  readonly ok = false;\n\n  constructor(init: {\n    error?: any; headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message =\n          `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of } from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders | {[header: string]: string | string[]},\n      observe?: HttpObserve,\n      params?: HttpParams | {[param: string]: string | string[]},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',\n      withCredentials?: boolean,\n    },\n    body: T | null): any {\n  return {\n    body,\n    headers: options.headers,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n  };\n}\n\nexport type HttpObserve = 'body' | 'events' | 'response';\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HTTPRequest` and returns a stream of `HTTPEvents`.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HTTPEvents`.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in an\n   * `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HTTPEvents` for the\n   * request.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    params?: HttpParams|{[param: string]: string | string[]},\n    observe: 'events', reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of of all `HttpEvents` for the request,\n   * with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the reques,\n   * with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   *  with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HTTPResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HTTPResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full `HTTPResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full `HTTPResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HTTPResponse`,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns\n   * the full `HTTPResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HTTPResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full\n   * `HTTPResponse` as a JSON object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the reuested response, wuth body of type `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    params?: HttpParams|{[param: string]: string | string[]},\n    observe?: HttpObserve,\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  }): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first as HttpRequest<any>;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({ fromObject: options.params } as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url !, (options.body !== undefined ? options.body : null), {\n        headers,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of (req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HTTPEvents` for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HTTPEvents` for the request, with the response body as a\n   * `Blob`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HTTPEvents` for the request, with the response\n   *  body of type string.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HTTPEvents` for the request, with response body of\n   * type `Object`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HTTPEvents` for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HTTPResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `Blob`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HTTPResponse`, with the response body of type string.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JSON object and returns\n   * the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `Object`.\n   *\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete (url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as a JSON object and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with response body in the requested type.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the response in\n   *  an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   *  with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HTTPResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JSON object.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with a response body in the requested type.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of tall `HttpEvents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as a `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all HttpEvents for the request, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HTTPEvents` for the request, with a response body of\n   * type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HTTPEvents` for the request\n   * , with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with a responmse body of the requested type.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPEvents` for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvents` for the request with the response\n   * body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvents` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   *  with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   *  with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the response\n   * body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the response\n   * in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with a response body of the given type.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilites of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents` for the request, with the\n   * response body as `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents`for the request, with a\n   * response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents` for the request,\n   * with a response body of type `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents` for the request,\n   *  with a response body in the requested type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   *  with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request, with the response body as `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvents` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvents` for the request,\n   * with a response body of type `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HTTPresponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HTTPResponse` for the request, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HTTPResponse` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object and returns the full\n   * `HTTPResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a\n   * JSON object and returns the response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HTTPResponse` for the request, with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all HttpEvents for the request, with a response body\n   * of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request, with a response body of\n   * type `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events', responseType?: 'json', withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the response\n   * body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nexport class HttpInterceptorHandler implements HttpHandler {\n  constructor(private next: HttpHandler, private interceptor: HttpInterceptor) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS = new InjectionToken<HttpInterceptor[]>('HTTP_INTERCEPTORS');\n\n@Injectable()\nexport class NoopInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse} from './response';\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext { [key: string]: (data: any) => void; }\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  constructor(private callbackMap: JsonpCallbackContext, @Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string { return `ng_jsonp_callback_${nextRequestId++}`; }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any|null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Whether the request has been cancelled (and thus any other callbacks)\n      // should be ignored.\n      let cancelled: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Next, make sure the request wasn't cancelled in the meantime.\n        if (cancelled) {\n          return;\n        }\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // Do nothing if the request has been cancelled.\n        if (cancelled) {\n          return;\n        }\n\n        // Cleanup the page.\n        cleanup();\n\n        // Check whether the response callback has run.\n        if (!finished) {\n          // It hasn't, something went wrong with the request. Return an error via\n          // the Observable error path. All JSONP errors have status 0.\n          observer.error(new HttpErrorResponse({\n            url,\n            status: 0,\n            statusText: 'JSONP Error',\n            error: new Error(JSONP_ERR_NO_CALLBACK),\n          }));\n          return;\n        }\n\n        // Success. body either contains the response body or null if none was\n        // returned.\n        observer.next(new HttpResponse({\n          body,\n          status: 200,\n          statusText: 'OK', url,\n        }));\n\n        // Complete the stream, the response is over.\n        observer.complete();\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        // If the request was already cancelled, no need to emit anything.\n        if (cancelled) {\n          return;\n        }\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error', url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        // Track the cancellation so event listeners won't do anything even if already scheduled.\n        cancelled = true;\n\n        // Remove the event listeners so they won't run if the events later fire.\n        node.removeEventListener('load', onLoad);\n        node.removeEventListener('error', onError);\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private jsonp: JsonpClientBackend) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.method === 'JSONP') {\n      return this.jsonp.handle(req as HttpRequest<never>);\n    }\n    // Fall through for normal HTTP requests.\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpUploadProgressEvent} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nexport abstract class XhrFactory { abstract build(): XMLHttpRequest; }\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  constructor() {}\n  build(): any { return <any>(new XMLHttpRequest()); }\n}\n\n/**\n * Tracks a response from the server that does not yet have a body.\n */\ninterface PartialResponse {\n  headers: HttpHeaders;\n  status: number;\n  statusText: string;\n  url: string;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the JsonpClientModule\n    if (req.method === 'JSONP') {\n      throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n    }\n\n    // Everything happens on Observable subscription.\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      // Add all the requested headers.\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase();\n\n        // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n        xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n      }\n\n      // Serialize the request body if one is present. If not, this will be set to null.\n      const reqBody = req.serializeBody();\n\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      let headerResponse: HttpHeaderResponse|null = null;\n\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      const partialFromXhr = (): HttpHeaderResponse => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n\n        // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n        const status: number = xhr.status === 1223 ? 204 : xhr.status;\n        const statusText = xhr.statusText || 'OK';\n\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        const url = getResponseUrl(xhr) || req.url;\n\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({headers, status, statusText, url});\n        return headerResponse;\n      };\n\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n\n      // First up is the load event, which represents a response being fully available.\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {headers, status, statusText, url} = partialFromXhr();\n\n        // The body will be read out if present.\n        let body: any|null = null;\n\n        if (status !== 204) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n        }\n\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? 200 : 0;\n        }\n\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        let ok = status >= 200 && status < 300;\n\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody;\n\n            // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false;\n              // The parse error contains the text of the body that failed to parse.\n              body = { error, text: body } as HttpJsonParseError;\n            }\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n        }\n      };\n\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      const onError = (error: ProgressEvent) => {\n        const {url} = partialFromXhr();\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined,\n        });\n        observer.error(res);\n      };\n\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progerss event.\n      let sentHeaders = false;\n\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      const onDownProgress = (event: ProgressEvent) => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        let progressEvent: HttpDownloadProgressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded,\n        };\n\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      const onUpProgress = (event: ProgressEvent) => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress: HttpUploadProgressEvent = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded,\n        };\n\n        // If the total number of bytes being uploaded is available, include\n        // it.\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        }\n\n        // Send the event.\n        observer.next(progress);\n      };\n\n      // By default, register for load and error events.\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send(reqBody !);\n      observer.next({type: HttpEventType.Sent});\n\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('load', onLoad);\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        }\n\n        // Finally, abort the in-flight request.\n        xhr.abort();\n      };\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ÉµparseCookieValue as parseCookieValue} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME');\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME');\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(\n      private tokenService: HttpXsrfTokenExtractor,\n      @Inject(XSRF_HEADER_NAME) private headerName: string) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n        lcUrl.startsWith('https://')) {\n      return next.handle(req);\n    }\n    const token = this.tokenService.getToken();\n\n    // Be careful not to overwrite an existing header of the same name.\n    if (token !== null && !req.headers.has(this.headerName)) {\n      req = req.clone({headers: req.headers.set(this.headerName, token)});\n    }\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Injector, ModuleWithProviders, NgModule} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTORS, HttpInterceptor, HttpInterceptorHandler, NoopInterceptor} from './interceptor';\nimport {JsonpCallbackContext, JsonpClientBackend, JsonpInterceptor} from './jsonp';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\nimport {BrowserXhr, HttpXhrBackend, XhrFactory} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_HEADER_NAME} from './xsrf';\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n@Injectable()\nexport class HttpInterceptingHandler implements HttpHandler {\n  private chain: HttpHandler|null = null;\n\n  constructor(private backend: HttpBackend, private injector: Injector) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight(\n          (next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n    return this.chain.handle(req);\n  }\n}\n\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nexport function interceptingHandler(\n    backend: HttpBackend, interceptors: HttpInterceptor[] | null = []): HttpHandler {\n  if (!interceptors) {\n    return backend;\n  }\n  return interceptors.reduceRight(\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    {provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN'},\n    {provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN'},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        {provide: HttpXsrfInterceptor, useClass: NoopInterceptor},\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        options.cookieName ? {provide: XSRF_COOKIE_NAME, useValue: options.cookieName} : [],\n        options.headerName ? {provide: XSRF_HEADER_NAME, useValue: options.headerName} : [],\n      ],\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  /**\n   * Optional configuration for XSRF protection.\n   */\n  imports: [\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN',\n    }),\n  ],\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    HttpClient,\n    {provide: HttpHandler, useClass: HttpInterceptingHandler},\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    BrowserXhr,\n    {provide: XhrFactory, useExisting: BrowserXhr},\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true},\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {NoopInterceptor as Éµangular_packages_common_http_http_a} from './src/interceptor';\nexport {JsonpCallbackContext as Éµangular_packages_common_http_http_b} from './src/jsonp';\nexport {jsonpCallbackContext as Éµangular_packages_common_http_http_c} from './src/module';\nexport {BrowserXhr as Éµangular_packages_common_http_http_d} from './src/xhr';\nexport {HttpXsrfCookieExtractor as Éµangular_packages_common_http_http_g,HttpXsrfInterceptor as Éµangular_packages_common_http_http_h,XSRF_COOKIE_NAME as Éµangular_packages_common_http_http_e,XSRF_HEADER_NAME as Éµangular_packages_common_http_http_f} from './src/xsrf';","exports.remove = removeDiacritics;\n\nvar replacementList = [\n  {\n    base: ' ',\n    chars: \"\\u00A0\",\n  }, {\n    base: '0',\n    chars: \"\\u07C0\",\n  }, {\n    base: 'A',\n    chars: \"\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F\",\n  }, {\n    base: 'AA',\n    chars: \"\\uA732\",\n  }, {\n    base: 'AE',\n    chars: \"\\u00C6\\u01FC\\u01E2\",\n  }, {\n    base: 'AO',\n    chars: \"\\uA734\",\n  }, {\n    base: 'AU',\n    chars: \"\\uA736\",\n  }, {\n    base: 'AV',\n    chars: \"\\uA738\\uA73A\",\n  }, {\n    base: 'AY',\n    chars: \"\\uA73C\",\n  }, {\n    base: 'B',\n    chars: \"\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0181\",\n  }, {\n    base: 'C',\n    chars: \"\\u24b8\\uff23\\uA73E\\u1E08\\u0106\\u0043\\u0108\\u010A\\u010C\\u00C7\\u0187\\u023B\",\n  }, {\n    base: 'D',\n    chars: \"\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018A\\u0189\\u1D05\\uA779\",\n  }, {\n    base: 'Dh',\n    chars: \"\\u00D0\",\n  }, {\n    base: 'DZ',\n    chars: \"\\u01F1\\u01C4\",\n  }, {\n    base: 'Dz',\n    chars: \"\\u01F2\\u01C5\",\n  }, {\n    base: 'E',\n    chars: \"\\u025B\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E\\u1D07\",\n  }, {\n    base: 'F',\n    chars: \"\\uA77C\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B\",\n  }, {\n    base: 'G',\n    chars: \"\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E\\u0262\",\n  }, {\n    base: 'H',\n    chars: \"\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D\",\n  }, {\n    base: 'I',\n    chars: \"\\u24BE\\uFF29\\xCC\\xCD\\xCE\\u0128\\u012A\\u012C\\u0130\\xCF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197\",\n  }, {\n    base: 'J',\n    chars: \"\\u24BF\\uFF2A\\u0134\\u0248\\u0237\",\n  }, {\n    base: 'K',\n    chars: \"\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2\",\n  }, {\n    base: 'L',\n    chars: \"\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780\",\n  }, {\n    base: 'LJ',\n    chars: \"\\u01C7\",\n  }, {\n    base: 'Lj',\n    chars: \"\\u01C8\",\n  }, {\n    base: 'M',\n    chars: \"\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C\\u03FB\",\n  }, {\n    base: 'N',\n    chars: \"\\uA7A4\\u0220\\u24C3\\uFF2E\\u01F8\\u0143\\xD1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u019D\\uA790\\u1D0E\",\n  }, {\n    base: 'NJ',\n    chars: \"\\u01CA\",\n  }, {\n    base: 'Nj',\n    chars: \"\\u01CB\",\n  }, {\n    base: 'O',\n    chars: \"\\u24C4\\uFF2F\\xD2\\xD3\\xD4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\xD5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\xD6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\xD8\\u01FE\\u0186\\u019F\\uA74A\\uA74C\",\n  }, {\n    base: 'OE',\n    chars: \"\\u0152\",\n  }, {\n    base: 'OI',\n    chars: \"\\u01A2\",\n  }, {\n    base: 'OO',\n    chars: \"\\uA74E\",\n  }, {\n    base: 'OU',\n    chars: \"\\u0222\",\n  }, {\n    base: 'P',\n    chars: \"\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754\",\n  }, {\n    base: 'Q',\n    chars: \"\\u24C6\\uFF31\\uA756\\uA758\\u024A\",\n  }, {\n    base: 'R',\n    chars: \"\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782\",\n  }, {\n    base: 'S',\n    chars: \"\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784\",\n  }, {\n    base: 'T',\n    chars: \"\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786\",\n  }, {\n    base: 'Th',\n    chars: \"\\u00DE\",\n  }, {\n    base: 'TZ',\n    chars: \"\\uA728\",\n  }, {\n    base: 'U',\n    chars: \"\\u24CA\\uFF35\\xD9\\xDA\\xDB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\xDC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244\",\n  }, {\n    base: 'V',\n    chars: \"\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245\",\n  }, {\n    base: 'VY',\n    chars: \"\\uA760\",\n  }, {\n    base: 'W',\n    chars: \"\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72\",\n  }, {\n    base: 'X',\n    chars: \"\\u24CD\\uFF38\\u1E8A\\u1E8C\",\n  }, {\n    base: 'Y',\n    chars: \"\\u24CE\\uFF39\\u1EF2\\xDD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE\",\n  }, {\n    base: 'Z',\n    chars: \"\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762\",\n  }, {\n    base: 'a',\n    chars: \"\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0251\",\n  }, {\n    base: 'aa',\n    chars: \"\\uA733\",\n  }, {\n    base: 'ae',\n    chars: \"\\u00E6\\u01FD\\u01E3\",\n  }, {\n    base: 'ao',\n    chars: \"\\uA735\",\n  }, {\n    base: 'au',\n    chars: \"\\uA737\",\n  }, {\n    base: 'av',\n    chars: \"\\uA739\\uA73B\",\n  }, {\n    base: 'ay',\n    chars: \"\\uA73D\",\n  }, {\n    base: 'b',\n    chars: \"\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253\\u0182\",\n  }, {\n    base: 'c',\n    chars: \"\\uFF43\\u24D2\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184\",\n  }, {\n    base: 'd',\n    chars: \"\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\u018B\\u13E7\\u0501\\uA7AA\",\n  }, {\n    base: 'dh',\n    chars: \"\\u00F0\",\n  }, {\n    base: 'dz',\n    chars: \"\\u01F3\\u01C6\",\n  }, {\n    base: 'e',\n    chars: \"\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u01DD\",\n  }, {\n    base: 'f',\n    chars: \"\\u24D5\\uFF46\\u1E1F\\u0192\",\n  }, {\n    base: 'ff',\n    chars: \"\\uFB00\",\n  }, {\n    base: 'fi',\n    chars: \"\\uFB01\",\n  }, {\n    base: 'fl',\n    chars: \"\\uFB02\",\n  }, {\n    base: 'ffi',\n    chars: \"\\uFB03\",\n  }, {\n    base: 'ffl',\n    chars: \"\\uFB04\",\n  }, {\n    base: 'g',\n    chars: \"\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\uA77F\\u1D79\",\n  }, {\n    base: 'h',\n    chars: \"\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265\",\n  }, {\n    base: 'hv',\n    chars: \"\\u0195\",\n  }, {\n    base: 'i',\n    chars: \"\\u24D8\\uFF49\\xEC\\xED\\xEE\\u0129\\u012B\\u012D\\xEF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131\",\n  }, {\n    base: 'j',\n    chars: \"\\u24D9\\uFF4A\\u0135\\u01F0\\u0249\",\n  }, {\n    base: 'k',\n    chars: \"\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3\",\n  }, {\n    base: 'l',\n    chars: \"\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747\\u026D\",\n  }, {\n    base: 'lj',\n    chars: \"\\u01C9\",\n  }, {\n    base: 'm',\n    chars: \"\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F\",\n  }, {\n    base: 'n',\n    chars: \"\\u24DD\\uFF4E\\u01F9\\u0144\\xF1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043B\\u0509\",\n  }, {\n    base: 'nj',\n    chars: \"\\u01CC\",\n  }, {\n    base: 'o',\n    chars: \"\\u24DE\\uFF4F\\xF2\\xF3\\xF4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\xF5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\xF6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\xF8\\u01FF\\uA74B\\uA74D\\u0275\\u0254\\u1D11\",\n  }, {\n    base: 'oe',\n    chars: \"\\u0153\",\n  }, {\n    base: 'oi',\n    chars: \"\\u01A3\",\n  }, {\n    base: 'oo',\n    chars: \"\\uA74F\",\n  }, {\n    base: 'ou',\n    chars: \"\\u0223\",\n  }, {\n    base: 'p',\n    chars: \"\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755\\u03C1\",\n  }, {\n    base: 'q',\n    chars: \"\\u24E0\\uFF51\\u024B\\uA757\\uA759\",\n  }, {\n    base: 'r',\n    chars: \"\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783\",\n  }, {\n    base: 's',\n    chars: \"\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u0282\",\n  }, {\n    base: 'ss',\n    chars: \"\\xDF\",\n  }, {\n    base: 't',\n    chars: \"\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787\",\n  }, {\n    base: 'th',\n    chars: \"\\u00FE\",\n  }, {\n    base: 'tz',\n    chars: \"\\uA729\",\n  }, {\n    base: 'u',\n    chars: \"\\u24E4\\uFF55\\xF9\\xFA\\xFB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\xFC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289\",\n  }, {\n    base: 'v',\n    chars: \"\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C\",\n  }, {\n    base: 'vy',\n    chars: \"\\uA761\",\n  }, {\n    base: 'w',\n    chars: \"\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73\",\n  }, {\n    base: 'x',\n    chars: \"\\u24E7\\uFF58\\u1E8B\\u1E8D\",\n  }, {\n    base: 'y',\n    chars: \"\\u24E8\\uFF59\\u1EF3\\xFD\\u0177\\u1EF9\\u0233\\u1E8F\\xFF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF\",\n  }, {\n    base: 'z',\n    chars: \"\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763\",\n  }\n];\n\nvar diacriticsMap = {};\nfor (var i = 0; i < replacementList.length; i += 1) {\n  var chars = replacementList[i].chars;\n  for (var j = 0; j < chars.length; j += 1) {\n    diacriticsMap[chars[j]] = replacementList[i].base;\n  }\n}\n\nfunction removeDiacritics(str) {\n  return str.replace(/[^\\u0000-\\u007e]/g, function(c) {\n    return diacriticsMap[c] || c;\n  });\n}\n\nexports.replacementList = replacementList;\nexports.diacriticsMap = diacriticsMap;\n","var parseXml = require('xml-parse-from-string')\n\nfunction extractSvgPath (svgDoc) {\n  // concat all the <path> elements to form an SVG path string\n  if (typeof svgDoc === 'string') {\n    svgDoc = parseXml(svgDoc)\n  }\n  if (!svgDoc || typeof svgDoc.getElementsByTagName !== 'function') {\n    throw new Error('could not get an XML document from the specified SVG contents')\n  }\n\n  var paths = Array.prototype.slice.call(svgDoc.getElementsByTagName('path'))\n  return paths.reduce(function (prev, path) {\n    var d = path.getAttribute('d') || ''\n    return prev + ' ' + d.replace(/\\s+/g, ' ').trim()\n  }, '').trim()\n}\n\nmodule.exports = function () {\n  throw new Error('use extract-svg-path/transform to inline SVG contents into your bundle')\n}\n\nmodule.exports.parse = extractSvgPath\n\n//deprecated\nmodule.exports.fromString = extractSvgPath\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","\"use strict\";\n\nvar codes = require(\"./codes.json\");\nvar removeDiacritics = require('diacritics').remove;\nvar registeredLocales = {};\n\n/*\n * All codes map to ISO 3166-1 alpha-2\n */\nvar alpha2 = {},\n  alpha3 = {},\n  numeric = {},\n  invertedNumeric = {};\n\ncodes.forEach(function(codeInformation) {\n  var s = codeInformation;\n  alpha2[s[0]] = s[1];\n  alpha3[s[1]] = s[0];\n  numeric[s[2]] = s[0];\n  invertedNumeric[s[0]] = s[2];\n});\n\nfunction formatNumericCode(code) {\n  return String('000'+(code ? code : '')).slice(-3);\n}\n\nfunction registerLocale(localeData) {\n  if (!localeData.locale) {\n    throw new TypeError('Missing localeData.locale');\n  }\n\n  if (!localeData.countries) {\n    throw new TypeError('Missing localeData.countries');\n  }\n\n  registeredLocales[localeData.locale] = localeData.countries;\n}\n\nexports.registerLocale = registerLocale;\n\n/*\n * @param code Alpha-3 code\n * @return Alpha-2 code or undefined\n */\nfunction alpha3ToAlpha2(code) {\n  return alpha3[code];\n}\nexports.alpha3ToAlpha2 = alpha3ToAlpha2;\n\n/*\n * @param code Alpha-2 code\n * @return Alpha-3 code or undefined\n */\nfunction alpha2ToAlpha3(code) {\n  return alpha2[code];\n}\nexports.alpha2ToAlpha3 = alpha2ToAlpha3;\n\n/*\n * @param code Alpha-3 code\n * @return Numeric code or undefined\n */\nfunction alpha3ToNumeric(code) {\n  return invertedNumeric[alpha3ToAlpha2(code)];\n}\nexports.alpha3ToNumeric = alpha3ToNumeric;\n\n/*\n * @param code Alpha-2 code\n * @return Numeric code or undefined\n */\nfunction alpha2ToNumeric(code) {\n  return invertedNumeric[code];\n}\nexports.alpha2ToNumeric = alpha2ToNumeric;\n\n/*\n * @param code Numeric code\n * @return Alpha-3 code or undefined\n */\nfunction numericToAlpha3(code) {\n  var padded = formatNumericCode(code);\n  return alpha2ToAlpha3(numeric[padded]);\n}\nexports.numericToAlpha3 = numericToAlpha3;\n\n/*\n * @param code Numeric code\n * @return Alpha-2 code or undefined\n */\nfunction numericToAlpha2(code) {\n  var padded = formatNumericCode(code);\n  return numeric[padded];\n}\nexports.numericToAlpha2 = numericToAlpha2;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-3\n */\nfunction toAlpha3(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha3(code);\n    }\n    if(code.length === 2) {\n      return alpha2ToAlpha3(code.toUpperCase());\n    }\n    if (code.length === 3) {\n      return code.toUpperCase();\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha3(code);\n  }\n  return undefined;\n}\nexports.toAlpha3 = toAlpha3;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-2\n */\nfunction toAlpha2(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha2(code);\n    }\n    if (code.length === 2) {\n      return code.toUpperCase();\n    }\n    if(code.length === 3) {\n      return alpha3ToAlpha2(code.toUpperCase());\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha2(code);\n  }\n  return undefined;\n}\nexports.toAlpha2 = toAlpha2;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @param lang language for country name\n * @return name or undefined\n */\nexports.getName = function(code, lang) {\n  try {\n    var d = registeredLocales[lang.toLowerCase()];\n    return d[toAlpha2(code)];\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @param lang language for country names\n * @return Object of country code mapped to county name\n */\nexports.getNames = function(lang) {\n  var d = registeredLocales[lang.toLowerCase()];\n  if (d === undefined) {\n    return {};\n  }\n  return d;\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getAlpha2Code = function(name, lang) {\n  try {\n    var p, codenames = registeredLocales[lang.toLowerCase()];\n    for (p in codenames) {\n      if (codenames.hasOwnProperty(p)) {\n        if (codenames[p].toLowerCase() === name.toLowerCase()) {\n          return p;\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getSimpleAlpha2Code = function(name, lang) {\n  try {\n    var p, codenames = registeredLocales[lang.toLowerCase()];\n    for (p in codenames) {\n      if (codenames.hasOwnProperty(p)) {\n        if (removeDiacritics(codenames[p].toLowerCase()) === removeDiacritics(name.toLowerCase())) {\n          return p;\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-2 codes mapped to alpha-3 codes\n */\nexports.getAlpha2Codes = function() {\n  return alpha2;\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getAlpha3Code = function(name, lang) {\n  var alpha2 = this.getAlpha2Code(name, lang);\n  if (alpha2) {\n    return this.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getSimpleAlpha3Code = function(name, lang) {\n  var alpha2 = this.getSimpleAlpha2Code(name, lang);\n  if (alpha2) {\n    return this.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-3 codes mapped to alpha-2 codes\n */\nexports.getAlpha3Codes = function() {\n  return alpha3;\n};\n\n/*\n * @return Object of numeric codes mapped to alpha-2 codes\n */\nexports.getNumericCodes = function() {\n  return numeric;\n};\n\n/*\n * @return Array of supported languages\n */\nexports.langs = function() {\n  return Object.keys(registeredLocales);\n};\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return Boolean\n */\nexports.isValid = function(code) {\n  if (!code) {\n    return false;\n  }\n\n  var coerced = code.toString().toUpperCase();\n  return alpha3.hasOwnProperty(coerced) || alpha2.hasOwnProperty(coerced) ||\n    numeric.hasOwnProperty(coerced);\n};\n","var xhr = require('xhr');\n\nmodule.exports = function (opts, cb) {\n    if (typeof opts === 'string') opts = { uri: opts };\n    \n    xhr(opts, function (err, res, body) {\n        if (err) return cb(err);\n        if (!/^2/.test(res.statusCode)) {\n            return cb(new Error('http status code: ' + res.statusCode));\n        }\n        var div = document.createElement('div');\n        div.innerHTML = body;\n        var svg = div.querySelector('svg');\n        if (!svg) return cb(new Error('svg not present in resource'));\n        cb(null, svg);\n    });\n};\n","//// <reference types=\"@types/googlemaps\" />\r\nimport { Injectable, EventEmitter } from '@angular/core';\r\n\r\n/**\r\n * Helper class for handling common GoogleMaps SDK functions\r\n */\r\n@Injectable()\r\nexport class GoogleMapsWrapper {\r\n\r\n  protected _infowindows: { [id: string]: google.maps.InfoWindow } = { default: null };\r\n  protected _map: google.maps.Map;\r\n  protected markers: google.maps.Marker[] = [];\r\n  protected polylines: google.maps.Polyline[] = [];\r\n  protected polygons: google.maps.Polygon[] = [];\r\n  private _isReady = false;\r\n  private _ready: Promise<void>;\r\n  // tslint:disable-next-line: no-any\r\n  private resolver: { resolve: () => void, reject: (err: any) => void };\r\n\r\n  /** If `true` the infowindows will close on clicking on any point on the map */\r\n  closeInfowindowOnClick = true;\r\n\r\n  /** * Emits when the map has been inited by calling `GoogleMapsWrapper.init()` */\r\n  onReady: EventEmitter<void> = new EventEmitter<void>();\r\n\r\n  /** * When the user clicks on the map */\r\n  click: EventEmitter<google.maps.LatLng> = new EventEmitter<google.maps.LatLng>();\r\n\r\n  /** When visible maps change but zooming or dragging the map */\r\n  boundsChanged: EventEmitter<google.maps.LatLngBounds> = new EventEmitter<google.maps.LatLngBounds>();\r\n\r\n  /** The default infowindow object */\r\n  get infowindow(): google.maps.InfoWindow { return this.getInfowindow('default'); }\r\n  set infowindow(val: google.maps.InfoWindow) { this._infowindows['default'] = val; }\r\n\r\n  constructor() {\r\n    this._ready = new Promise((resolve, reject) => {\r\n      this.resolver = { resolve: resolve, reject: reject };\r\n    });\r\n  }\r\n\r\n  /**\r\n   * `True` if the map has been inited by calling `GoogleMapsWrapper.init()`\r\n   */\r\n  isReady(): boolean { return this._isReady; }\r\n\r\n  /**\r\n   * Resolves when the map has been inited by calling `GoogleMapsWrapper.init()`\r\n   */\r\n  ready(): Promise<void> { return this._ready; }\r\n\r\n  get map(): google.maps.Map {\r\n    return this._map;\r\n  }\r\n\r\n  isInfowindowOpen(tag?: string): boolean {\r\n    return this.getInfowindow(tag)['isOpen'];\r\n  }\r\n\r\n  /**\r\n   * Call this before using any other function\r\n   */\r\n  async initMap(element: HTMLElement, options?: google.maps.MapOptions): Promise<google.maps.Map> {\r\n    try {\r\n\r\n      this._map = new google.maps.Map(element, {\r\n        center: new google.maps.LatLng(19.53124, -96.91589),\r\n        zoom: 14,\r\n        clickableIcons: false,\r\n        disableDefaultUI: false,\r\n        zoomControl: true,\r\n        streetViewControl: false,\r\n        scaleControl: true,\r\n        rotateControl: true,\r\n        fullscreenControl: true,\r\n        mapTypeControlOptions: {\r\n          mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE]\r\n        },\r\n        ...options\r\n      });\r\n\r\n      // Add listeners\r\n      this.map.addListener('click', (e) => {\r\n        if (this.closeInfowindowOnClick) this.closeInfowindow();\r\n        this.click.emit(e.latLng);\r\n      });\r\n      this.map.addListener('bounds_changed', () => {\r\n        const bounds = this.map.getBounds();\r\n        this.boundsChanged.emit(bounds);\r\n      });\r\n\r\n      console.debug('map created ');\r\n\r\n      // Wait for SDK to load\r\n      setTimeout(() => {\r\n        this._isReady = true;\r\n        this.resolver.resolve();\r\n        this.onReady.emit();\r\n      }, 1000);\r\n\r\n      await this._isReady;\r\n      return this.map;\r\n    } catch (e) {\r\n      this.resolver.reject(e);\r\n    }\r\n  }\r\n\r\n  /**\r\n\t * Formula taken from:\r\n\t * [What ratio scales do Google Maps zoom levels correspond to?\r\n   * ](https://gis.stackexchange.com/questions/7430/what-ratio-scales-do-google-maps-zoom-levels-correspond-to)\r\n\t */\r\n  getMetersPerPx(latitude: number) {\r\n    if (!latitude || !this.map) return 0;\r\n    const zoom = this.map.getZoom();\r\n    return 156543.03392 * Math.cos(latitude * Math.PI / 180) / Math.pow(2, zoom);\r\n  }\r\n\r\n  /**\r\n\t * Subscribe to map event\r\n\t */\r\n  // tslint:disable-next-line: no-any\r\n  subscribe(eventName: string, callback: (event: any) => void) {\r\n    this.map.addListener(eventName, callback);\r\n  }\r\n\r\n  /**\r\n\t * Unsubscribe from map event\r\n\t */\r\n  unsubscribe(eventName: string) {\r\n    google.maps.event.clearListeners(this.map, eventName);\r\n  }\r\n\r\n  /**\r\n\t * Unsubscribe from all map events\r\n\t */\r\n  unsubcribeAll() {\r\n    google.maps.event.clearInstanceListeners(this.map);\r\n  }\r\n\r\n  /**\r\n\t * Add a marker and show it on the map\r\n\t */\r\n  addMarker(params: google.maps.MarkerOptions | google.maps.Marker) {\r\n    let marker: google.maps.Marker;\r\n\r\n    if (!(params instanceof google.maps.Marker)) {\r\n      params.map = this.map;\r\n      marker = new google.maps.Marker(params);\r\n    } else {\r\n      marker = params;\r\n      marker.setMap(this.map);\r\n    }\r\n    this.markers.push(marker);\r\n    return marker;\r\n  }\r\n\r\n  addPolyline(params: google.maps.PolylineOptions | google.maps.Polyline) {\r\n    let line: google.maps.Polyline;\r\n\r\n    if (!(params instanceof google.maps.Polyline)) {\r\n      params.map = this.map;\r\n      line = new google.maps.Polyline(params);\r\n    } else {\r\n      line = params;\r\n      line.setMap(this.map);\r\n    }\r\n\r\n    this.polylines.push(line);\r\n    return line;\r\n  }\r\n\r\n  addPolygone(params: google.maps.PolygonOptions | google.maps.Polygon) {\r\n    let polygon: google.maps.Polygon;\r\n\r\n    if (!(params instanceof google.maps.Polygon)) {\r\n      params.map = this.map;\r\n      polygon = new google.maps.Polygon(params);\r\n    } else {\r\n      polygon = params;\r\n      polygon.setMap(this.map);\r\n    }\r\n\r\n    this.polygons.push(polygon);\r\n    return polygon;\r\n  }\r\n\r\n  clearMarkers() {\r\n    this.markers.forEach(m => {\r\n      m.setMap(null);\r\n    });\r\n    this.markers = [];\r\n  }\r\n\r\n  clearPolylines() {\r\n    this.polylines.forEach(l => {\r\n      l.setMap(null);\r\n    });\r\n    this.polylines = [];\r\n  }\r\n\r\n  clearPolygones() {\r\n    this.polygons.forEach(l => {\r\n      l.setMap(null);\r\n    });\r\n    this.polygons = [];\r\n  }\r\n\r\n  /**\r\n\t * Removes current markers an copies all the markers of an array into the map\r\n\t */\r\n  setMarkers(array: google.maps.Marker[]) {\r\n    this.clearMarkers();\r\n    array.forEach(m => {\r\n      m.setMap(this.map);\r\n    });\r\n    this.markers = [...array];\r\n  }\r\n\r\n  /**\r\n   * @param id In case more than one infowindows are required to be shown. If no parameter is passed,\r\n   * the default infowindow will be opened. If a string is passed, a new infowindow will be created\r\n   * with that specifier.\r\n   */\r\n  openInfowindow(anchor?: google.maps.MVCObject | google.maps.LatLng, content?: string | Node, id?: string) {\r\n    const infowindow = id ? this.getInfowindow(id) : this.infowindow;\r\n    if (content) infowindow.setContent(content)\r\n\r\n    if (anchor instanceof google.maps.LatLng) {\r\n      infowindow.setPosition(anchor);\r\n      infowindow.open(this.map);\r\n    } else {\r\n      infowindow.open(this.map, anchor);\r\n    }\r\n    infowindow['isOpen'] = true;\r\n    return infowindow;\r\n  }\r\n\r\n  /**\r\n   * @param id Unique identifier for an infowindow in case more than one exist\r\n   */\r\n  closeInfowindow(id?: string) {\r\n    const infowindow = id ? this.getInfowindow(id) : this.infowindow;\r\n    if (infowindow) {\r\n      infowindow.close();\r\n      infowindow['isOpen'] = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Retrieve a reference to a specific infowindow\r\n   * @param id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\r\n   * string is passed, the defoult infowindow will be returned.\r\n   */\r\n  getInfowindow(id = 'default') {\r\n    let infowindow = this._infowindows[id];\r\n\r\n    if (!infowindow) {\r\n      infowindow = new google.maps.InfoWindow({\r\n        content: '[info]',\r\n        position: this.map.getCenter()\r\n      });\r\n      infowindow['closeclick'] = new EventEmitter<void>();\r\n      infowindow.addListener('closeclick', () => infowindow['closeclick'].emit());\r\n      this._infowindows[id] = infowindow;\r\n    }\r\n    return infowindow;\r\n  }\r\n\r\n  /**\r\n   * Destroy a reference to a specific infowindow.\r\n   * @param id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\r\n   * string is passed, the defoult infowindow will be returned.\r\n   */\r\n  destroyInfowindow(id: string) {\r\n    if (!id) return;\r\n    const infowindow = this._infowindows[id]\r\n    if (infowindow) {\r\n      infowindow.close();\r\n      infowindow.set('map', null);\r\n      google.maps.event.clearInstanceListeners(infowindow);\r\n      delete this._infowindows[id];\r\n    }\r\n  }\r\n}\r\n","//// <reference types=\"@types/googlemaps\" />\r\nimport { Subject, Subscription, of, timer } from 'rxjs';\r\nimport { TemplateRef, EventEmitter, ChangeDetectorRef, ViewContainerRef } from '@angular/core';\r\nimport { tap, switchMap, debounce } from 'rxjs/operators';\r\nimport { GoogleMapsWrapper } from '../../services/googlemaps-wrapper';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\nlet API_KEY = '';\r\nconst INFOWINDOW_ID = 'center-pin';\r\n\r\n/**\r\n * A marker fixed to the center of the map which emits the geo-decoded location\r\n * as a full address.\r\n *\r\n * @see {@link CenterMarker}\r\n * @emits CenterMarker#locationChanges locationChanges When the pin's location has changed\r\n * (by zooming or dragging) and the map has become idle again.\r\n * @emits CenterMarker#addressChanges addressChanges The the geocoded address has resolved.\r\n *\r\n * @example\r\n * <button (click)=\"map.centerPin.enable(infowindowLocation, <yourGMapsApiKey)\">Add center Pin</button>\r\n * <button (click)=\"map.centerPin.disable()\">Remove Pin</button>\r\n *\r\n * <ng-template #infowindowLocation let-address>\r\n *   <div>\r\n *     <span *ngIf=\"!address\">Loading...</span>\r\n *       <div *ngIf=\"!!address\">\r\n *       {{address}}\r\n *       <br>\r\n *       <button (click)=\"map.centerPin.fix = !map.centerPin.fix\">Fix</button>\r\n *     </div>\r\n *   </div>\r\n * </ng-template>\r\n */\r\nexport class CenterMarker {\r\n  /**\r\n   * The current decoded address obtained from google. It becomes `null` while fetching.\r\n   */\r\n  address: string;\r\n  /**\r\n   * Emitted when the the geocoded address has resolved.\r\n   */\r\n  addressChanges = new EventEmitter<string>();\r\n  /**\r\n   * Emitted when the pin's location has changed (by zooming or dragging) and the map has become idle again.\r\n   */\r\n  locationChanges = new EventEmitter<google.maps.LatLngLiteral>();\r\n\r\n  /** @ignore */\r\n  private _infowindowTemplate: TemplateRef<any>\r\n  /** @ignore */\r\n  private _centerChanged$ = new Subject<google.maps.LatLng>();\r\n  /** @ignore */\r\n  private _centerMarker: HTMLDivElement;\r\n  /** @ignore */\r\n  private _fixedMarker: google.maps.Marker;\r\n  /** @ignore */\r\n  private _mapEventSubscription = new Subscription();\r\n  /** @ignore */\r\n  private _geocoder = new google.maps.Geocoder();\r\n  /** @ignore */\r\n  private _idleListener: google.maps.MapsEventListener;\r\n  /** @ignore */\r\n  private _clickListener: google.maps.MapsEventListener;\r\n\r\n\r\n  constructor(\r\n    private googlemapsWrapper: GoogleMapsWrapper,\r\n    private viewContainer: ViewContainerRef,\r\n    private cdr: ChangeDetectorRef,\r\n    private http: HttpClient) { }\r\n\r\n  /**\r\n   * Fix the pin to its current position on map instead of floating over it.\r\n   * This value is reset on calling `disable()`.\r\n   */\r\n  get fix(): boolean { return !!this._fixedMarker; }\r\n  set fix(val: boolean) {\r\n    if (!this.googlemapsWrapper.isReady()) {\r\n      console.warn('Map is not ready');\r\n      return;\r\n    }\r\n\r\n    this.disable();\r\n    if (val) {\r\n      this.setFixedMarker();\r\n    } else {\r\n      this.enable(this._infowindowTemplate, API_KEY);\r\n    }\r\n  }\r\n\r\n  /** @ignore */\r\n  private get REVERSE_GEOCODING_URL() { return `https://maps.googleapis.com/maps/api/geocode/json?key=${API_KEY}&latlng=`; }\r\n\r\n  /**\r\n   * Activates the pin to show at the map's center\r\n   * @param infowindowTemplate A template for rendering the infowindow on top of the marker.\r\n   * It must have a single root element. The address string will be passed as implicit context.\r\n   * @param apiKey GoogleMaps API key. TODO: remove the need for this param in future versions.\r\n   * \r\n   * @example\r\n   * \r\n   * <button (click)=\"map.centerPin.enable(infowindowLocation, '<yourApiKey>')\">\r\n   *   Add center Pin\r\n   * </button>\r\n   * \r\n   * <ng-template #infowindowLocation let-address>\r\n   *   <div style=\"min-height: 20px; min-width: 50px;\">\r\n   *     {{address}}\r\n   *   </div>\r\n   * </ng-template>\r\n   */\r\n  enable(infowindowTemplate: TemplateRef<any>, apiKey: string) {\r\n    this.removeFixedMarker();\r\n\r\n    API_KEY = apiKey;\r\n    this._infowindowTemplate = infowindowTemplate;\r\n    if (this._centerMarker) return;\r\n\r\n    const mapDiv = this.googlemapsWrapper.map.getDiv() as HTMLDivElement;\r\n    this._centerMarker = document.createElement('div');\r\n    this._centerMarker.classList.add('centerMarker');\r\n    this._centerMarker.style.cssText =\r\n      `position:absolute;\r\n      background:url(https://maps.gstatic.com/mapfiles/markers/marker.png) no-repeat;\r\n      top:50%;left:50%;\r\n      z-index:1;\r\n      margin-left:-10px;\r\n      margin-top:-34px;\r\n      height:34px;\r\n      width:20px;\r\n      cursor: pointer;`;\r\n\r\n    mapDiv.parentElement.appendChild(this._centerMarker);\r\n    this._centerMarker.onclick = () => this.displayInfowindowOverPin();\r\n\r\n    this._mapEventSubscription = new Subscription();\r\n    this._mapEventSubscription.add(\r\n      this._centerChanged$\r\n        .pipe(\r\n          tap(() => {\r\n            this.address = null;\r\n            this.displayInfowindowOverPin();\r\n          }),\r\n          switchMap(latLng => of(latLng)),\r\n          debounce(() => timer(1000)),\r\n          switchMap(latLng => this.http.get(`${this.REVERSE_GEOCODING_URL}${latLng.toUrlValue()}`) as any)\r\n        )\r\n        // .subscribe((latLng) => {\r\n        .subscribe(response => {\r\n          // this._geocoder.geocode({ location: latLng }, (response) => {\r\n          const results = response[0] || (response as any).results;\r\n          const firstResult: google.maps.GeocoderResult = results[0] || results;\r\n          this.address = firstResult && firstResult.formatted_address || 'desconocido';\r\n          this.addressChanges.emit(this.address);\r\n          this.displayInfowindowOverPin();\r\n          this.cdr.detectChanges();\r\n          // });\r\n        })\r\n    );\r\n\r\n    this.updateAddress();\r\n    this._idleListener = this.googlemapsWrapper.map.addListener('idle', () => this.onMapIdle());\r\n    this._clickListener = this.googlemapsWrapper.map.addListener('click', () => this.googlemapsWrapper.closeInfowindow(INFOWINDOW_ID));\r\n  }\r\n\r\n  /**\r\n   * Removes the pin from the map\r\n   */\r\n  disable() {\r\n    if (this._centerMarker) this._centerMarker.remove();\r\n    this._centerMarker = null;\r\n    this._mapEventSubscription.unsubscribe();\r\n    this.googlemapsWrapper.closeInfowindow();\r\n    google.maps.event.removeListener(this._idleListener);\r\n    google.maps.event.removeListener(this._clickListener);\r\n    this.removeFixedMarker();\r\n    this.googlemapsWrapper.closeInfowindow(INFOWINDOW_ID);\r\n  }\r\n\r\n  /** @ignore */\r\n  displayInfowindowOverPin() {\r\n    this.viewContainer.clear();\r\n    const view = this.viewContainer.createEmbeddedView(this._infowindowTemplate, { $implicit: this.address });\r\n    const content = view.rootNodes[0] as HTMLElement;\r\n\r\n    const markerPosition = this.fix ? this._fixedMarker.getPosition() : this.googlemapsWrapper.map.getCenter();\r\n    const offset = this.googlemapsWrapper.getMetersPerPx(markerPosition.lat()) * 36;\r\n    const pos = google.maps.geometry.spherical.computeOffset(markerPosition, offset, 0);\r\n\r\n    this.googlemapsWrapper\r\n      .openInfowindow(pos, content, INFOWINDOW_ID)\r\n      .setOptions({ disableAutoPan: true });\r\n  }\r\n\r\n  /**\r\n   * Geodecode the current pin's location.\r\n   */\r\n  updateAddress() {\r\n    const markerPosition = this.fix ? this._fixedMarker.getPosition() : this.googlemapsWrapper.map.getCenter();\r\n    this._centerChanged$.next(markerPosition);\r\n  }\r\n\r\n  /** @ignore */\r\n  private setFixedMarker() {\r\n    if (this._fixedMarker) this.removeFixedMarker();\r\n    this._fixedMarker = new google.maps.Marker({\r\n      icon: 'https://maps.gstatic.com/mapfiles/markers/marker.png',\r\n      map: this.googlemapsWrapper.map,\r\n      position: this.googlemapsWrapper.map.getCenter(),\r\n    });\r\n\r\n    this._fixedMarker.addListener('click', () => this.displayInfowindowOverPin());\r\n  }\r\n\r\n  /** @ignore */\r\n  private removeFixedMarker() {\r\n    if (!this._fixedMarker) return;\r\n    this._fixedMarker.setMap(null);\r\n    google.maps.event.clearInstanceListeners(this._fixedMarker);\r\n    this._fixedMarker = null;\r\n  }\r\n\r\n  private onMapIdle() {\r\n    const center = this.googlemapsWrapper.map.getCenter();\r\n    this.locationChanges.emit(center.toJSON());\r\n    this.updateAddress();\r\n  }\r\n}\r\n","import { Component, OnInit, ViewChild, ElementRef, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\r\nimport { TrackedObject } from './models/tracked-object';\r\nimport { GoogleMapsWrapper } from './services/googlemaps-wrapper';\r\nimport { CenterMarker } from './components/center-marker/center-marker';\r\nimport { HttpClient } from '@angular/common/http';\r\n\r\n/**\r\n * Creates an embeded google map with polygons representing the tracked objects.\r\n *\r\n * @example\r\n * <gmtv-map [data]=\"objectArray\" [template]=\"infowindow\" [mapOptions]=\"mapOptions\" [showLocationButton]=\"true\">\r\n *  <ng-template #infowindow let-o>\r\n *   <div id=\"root\">\r\n *     <h4>{{o.name}}</h4>\r\n *   </div>\r\n *  </ng-template>\r\n * </gmtv-map>\r\n */\r\n@Component({\r\n  selector: 'gmtv-map',\r\n  templateUrl: './ngx-googlemaps-tracking-view.component.html',\r\n  styleUrls: ['./ngx-googlemaps-tracking-view.component.scss'],\r\n  // encapsulation: ViewEncapsulation.ShadowDom,\r\n})\r\nexport class NgxGooglemapsTrackingViewComponent implements OnInit {\r\n  // tslint:disable-next-line: no-any\r\n  @ViewChild('map', { static: true } as any) mapDiv: ElementRef;\r\n  /**\r\n   * A marker fixed to the center of the map which emits the geo-decoded location\r\n   * as a full address.\r\n   * @see {@link CenterMarker}\r\n   */\r\n  centerPin: CenterMarker = new CenterMarker(this.googlemapsWrapper, this.vc, this.cdr, this.http);\r\n  protected _data: TrackedObject[] = [];\r\n\r\n  /**\r\n   * Options to pass on map initialization.\r\n   * See {@link https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions MapOptions}\r\n   */\r\n  @Input() mapOptions: google.maps.MapOptions;\r\n\r\n  /**\r\n   * Show location button in controls to retrieve user's location.\r\n   * An https connection is required.\r\n   */\r\n  @Input() showLocationButton = true;\r\n\r\n  /**\r\n   * Infowindow's template\r\n   */\r\n  // tslint:disable-next-line: no-any\r\n  @Input() template: TemplateRef<any>;\r\n\r\n  /**\r\n   * Set this to `'hover'` to display the infowindow when hovering on the objects.\r\n   * Set this to `'click'` to display the infowindow when clicking on the objects.\r\n   */\r\n  @Input() triggerInfowindow: 'hover' | 'click' = 'hover';\r\n\r\n  /**\r\n   * Array of {@link TrackedObject} to draw on map\r\n   */\r\n  @Input()\r\n  set data(val: TrackedObject[]) { this._data = val || []; }\r\n  get data(): TrackedObject[] { return this._data; }\r\n\r\n  /**\r\n   * Currently inited GoogleMaps  {@link https://developers.google.com/maps/documentation/javascript/reference/map#Map Map} object\r\n   */\r\n  get map(): google.maps.Map { return this.googlemapsWrapper.map; }\r\n\r\n  constructor(\r\n    protected googlemapsWrapper: GoogleMapsWrapper,\r\n    protected vc: ViewContainerRef,\r\n    private http: HttpClient,\r\n    protected cdr: ChangeDetectorRef) { }\r\n\r\n  ngOnInit() {\r\n    this.googlemapsWrapper.initMap(this.mapDiv.nativeElement, this.mapOptions);\r\n  }\r\n\r\n  /**\r\n   * Resolves when map has been inited\r\n   */\r\n  ready(): Promise<void> {\r\n    return this.googlemapsWrapper.ready();\r\n  }\r\n\r\n  /** @ignore */\r\n  trackById(_index: number, item: TrackedObject) {\r\n    return item.id;\r\n  }\r\n}\r\n","import {\r\n  Component,\r\n  Output,\r\n  EventEmitter,\r\n  ElementRef,\r\n  TemplateRef,\r\n  Input,\r\n  ViewContainerRef,\r\n  ViewChild,\r\n  EmbeddedViewRef,\r\n  OnDestroy,\r\n  AfterContentInit\r\n} from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { GoogleMapsWrapper } from '../../services/googlemaps-wrapper';\r\n\r\n@Component({\r\n  selector: 'gmtv-infowindow',\r\n  template: `\t<div style=\"display: none;\" #root>\r\n                <ng-template #defaultTemplate let-o>\r\n                  <div id=\"rootNode\">\r\n                    <h3>{{o.name}}</h3>\r\n                    <p>\r\n                      <strong>ID:</strong> {{o.id}}<br>\r\n                      <strong>Position:</strong> {{o.position?.toJSON() | json}}<br>\r\n                      <strong>Heading:</strong> {{o.heading | number:'1.0-1'}}Â°<br>\r\n                    </p>\r\n                  </div>\r\n                </ng-template>\r\n                <ng-container #vc></ng-container>\r\n              </div>`\r\n})\r\nexport class InfowindowComponent implements AfterContentInit, OnDestroy {\r\n  @ViewChild('root') root: ElementRef;\r\n  // tslint:disable-next-line: no-any\r\n  @ViewChild('defaultTemplate') defaultTemplateRef: TemplateRef<any>;\r\n  @ViewChild('vc', { read: ViewContainerRef }) vc: ViewContainerRef;\r\n  /** When infowindow has closed */\r\n  @Output() closed = new EventEmitter<void>();\r\n  /** Triggered on clicking on the X button */\r\n  @Output() closeclick = new EventEmitter<void>();\r\n\r\n  @Input() noPadding = false;\r\n  @Input() padding = false;\r\n  /** Unique infowindow identifier */\r\n  @Input() id: string;\r\n  @Input() cssClass = '';\r\n  /** Template for infowindow content */\r\n  // tslint:disable-next-line: no-any\r\n  @Input('template') contentTemplateRef: TemplateRef<any>;\r\n  /** Implicit context for content template */\r\n  // tslint:disable-next-line: no-any\r\n  @Input('context') ctx: any;\r\n  @Input() closeOnMapClick = true;\r\n\r\n  content: Node;\r\n  // tslint:disable-next-line: no-any\r\n  view: EmbeddedViewRef<any>;\r\n  subscription = new Subscription();\r\n\r\n  constructor(protected googleMaps: GoogleMapsWrapper, protected el: ElementRef) { }\r\n\r\n  get nativeInfowindow() {\r\n    return this.googleMaps.getInfowindow(this.id);\r\n  }\r\n\r\n  get addPadding() {\r\n    return (this.isMobile && this.noPadding === false) || this.padding !== false;\r\n  }\r\n\r\n  get isMobile() {\r\n    return window.innerWidth < 768;\r\n  }\r\n\r\n  get isOpen() {\r\n    return this.googleMaps.isInfowindowOpen(this.id);\r\n  }\r\n\r\n  ngAfterContentInit() {\r\n    const template = this.contentTemplateRef || this.defaultTemplateRef;\r\n    this.view = template && template.createEmbeddedView(this.ctx);\r\n    this.googleMaps.click.subscribe(() => this.onMapClick());\r\n    this.subscription = this.nativeInfowindow['closeclick'].subscribe(() => this.closeclick.emit());\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.id) this.googleMaps.destroyInfowindow(this.id);\r\n    this.subscription.unsubscribe();\r\n  }\r\n\r\n  getNativeInfowindow(): google.maps.InfoWindow {\r\n    return this.googleMaps.getInfowindow(this.id);\r\n  }\r\n\r\n  open(anchor: google.maps.MVCObject | google.maps.LatLng) {\r\n    if (this.vc && this.view && !this.view.destroyed) this.vc.insert(this.view);\r\n    this.content = this.view && this.view.rootNodes[0];\r\n    this.googleMaps.openInfowindow(anchor, this.content, this.id);\r\n  }\r\n\r\n  close() {\r\n    if (this.googleMaps.isInfowindowOpen(this.id)) {\r\n      this.googleMaps.closeInfowindow(this.id);\r\n      this.onClosed();\r\n    }\r\n  }\r\n\r\n  /** @ignore */\r\n  private onMapClick() {\r\n    if (this.closeOnMapClick)\r\n      this.close();\r\n  }\r\n\r\n  /** @ignore */\r\n  private onClosed() {\r\n    try {\r\n      this.vc.remove(0);\r\n      this.view.destroy();\r\n      this.vc.clear();\r\n    } catch (ex) {\r\n      console.warn(ex);\r\n    }\r\n    this.closed.emit();\r\n  }\r\n}\r\n","/// <reference types=\"@types/googlemaps\" />\r\nimport { Component, OnDestroy, Input, ViewChild, AfterContentInit, OnChanges, TemplateRef } from '@angular/core';\r\nimport { Subscription } from 'rxjs';\r\nimport { InfowindowComponent } from '../infowindow/infowindow.component';\r\nimport { TrackedObject } from '../../models/tracked-object';\r\nimport { GoogleMapsWrapper } from '../../services/googlemaps-wrapper';\r\n\r\n/** Size in meters to draw each unity speed on map in a dashed line */\r\nconst SPEED_UNIT_LENGTH_M = 20;\r\n\r\n/**\r\n * Level of detail.\r\n * Minimal zoom to start drawing objects\r\n * */\r\nconst LOD = {\r\n  speed: 15,\r\n  scaleTriangle: 15,\r\n  nameLabels: 0\r\n}\r\n\r\n/**\r\n * This class renders a trackable object on the map\r\n *\r\n * @example\r\n * // component.ts\r\n * const objectsToTrack: TrackedObject[] = [{\r\n *   id: '1',\r\n *   color: 'blue',\r\n *   heading: 45,\r\n *   label: {text: 'Test object #1' },\r\n *   position: new google.maps.LatLng(19.53124, -96.91589),\r\n * }]\r\n *\r\n * // component.html\r\n * <gmtv-map [data]=\"objectsToTrack\"></gmtv-map>\r\n */\r\n@Component({\r\n  selector: 'gmtv-tracked-object',\r\n  templateUrl: './tracked-object.component.html',\r\n})\r\nexport class TrackedObjectComponent implements AfterContentInit, OnChanges, OnDestroy {\r\n  vectorLine: google.maps.Polyline;\r\n  dotMarker = new google.maps.Marker({ position: { lat: NaN, lng: NaN } });\r\n  hoverDotListeners: google.maps.MapsEventListener[] = [];\r\n  hoverPolygonListeners: google.maps.MapsEventListener[] = [];\r\n  zoomListener: google.maps.MapsEventListener;\r\n  subscription = new Subscription();\r\n  defaultColor = 'red';\r\n  polygon = new google.maps.Polygon({\r\n    strokeColor: this.color,\r\n    strokeOpacity: 0.8,\r\n    strokeWeight: 2,\r\n    fillColor: this.color,\r\n    fillOpacity: !this.offline ? .55 : 0,\r\n    draggable: false\r\n  });\r\n\r\n  @Input() trackedObject: TrackedObject;\r\n  // tslint:disable-next-line: no-any\r\n  @Input() template: TemplateRef<any>;\r\n  drawSpeedVector = false;\r\n\r\n  /**\r\n   * Set this to `'hover'` to display the infowindow when hovering on the object.\r\n   * Set this to `'click'` to display the infowindow when clicking on the object.\r\n   */\r\n  @Input() triggerInfowindow: 'hover' | 'click' = 'hover';\r\n\r\n  @ViewChild(InfowindowComponent) infowindow: InfowindowComponent;\r\n  constructor(private googleMaps: GoogleMapsWrapper) { }\r\n\r\n  async ngAfterContentInit() {\r\n    await this.googleMaps.ready();\r\n\r\n    // Add bounds changed event\r\n    this.checkRenderObject();\r\n    this.subscription.add(\r\n      this.googleMaps.boundsChanged\r\n        .subscribe(() => this.checkRenderObject())\r\n    );\r\n\r\n    this.drawObject();\r\n  }\r\n\r\n  ngOnChanges() {\r\n    if (!this.trackedObject) return;\r\n    this.drawObject();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.polygon.setMap(null);\r\n    this.vectorLine.setMap(null);\r\n    this.dotMarker.setMap(null);\r\n    this.subscription.unsubscribe();\r\n    if (this.zoomListener) this.zoomListener.remove();\r\n  }\r\n\r\n  /**\r\n   * Current color for the current tracked object\r\n   */\r\n  get color(): string { return this.trackedObject && this.trackedObject.color || this.defaultColor; }\r\n\r\n  protected get isMoving(): boolean { return !!this.trackedObject && this.trackedObject.speed > 0; }\r\n  protected get offline(): boolean { return this.trackedObject && this.trackedObject.isOffline; }\r\n  protected get hasValidMeasures(): boolean { return true; }\r\n\r\n\r\n  /**\r\n   * Adaptive scale according to current zoom\r\n   */\r\n  protected get scale(): number {\r\n    const zoom = this.googleMaps && this.googleMaps.map && this.googleMaps.map.getZoom() || 1;\r\n    const s = Math.ceil(LOD.scaleTriangle - zoom);\r\n    return Math.pow(2, s) * (this.trackedObject.scale && this.trackedObject.scale || 1);\r\n  }\r\n\r\n  /**\r\n   * Tip point\r\n   */\r\n  get tipLatLng(): google.maps.LatLng {\r\n    if (this.hasValidMeasures)\r\n      return this.polygon && this.polygon.getPath().getAt(3);\r\n    else\r\n      return this.trackedObject.position;\r\n  }\r\n\r\n  /**\r\n   * Rear point\r\n   */\r\n  get rearLatLng(): google.maps.LatLng {\r\n    if (this.hasValidMeasures)\r\n      return this.polygon && this.polygon.getPath().getAt(0);\r\n    else\r\n      return this.trackedObject.position;\r\n  }\r\n\r\n  protected get canDrawPolygon(): boolean {\r\n    return this.hasValidMeasures;\r\n  }\r\n\r\n  /**\r\n   * Current map's zoom\r\n   */\r\n  protected get zoom(): number {\r\n    return this.googleMaps.map && this.googleMaps.map.getZoom();\r\n  }\r\n\r\n  /**\r\n   * Current relation to convert pixels to meters on the map\r\n   */\r\n  getMetersPerPx() {\r\n    if (!this.trackedObject.position || !this.googleMaps.map) return 0;\r\n    return this.googleMaps.getMetersPerPx(this.trackedObject.position.lat());\r\n  }\r\n\r\n  /**\r\n   * Checks if object is on screen and renders/unrenders it\r\n   */\r\n  protected checkRenderObject() {\r\n    const path = this.polygon && this.polygon.getPath();\r\n\r\n    // If showing a polygon\r\n    if (path && !!path.getLength()) {\r\n      let isPolygonOnScreen = false;\r\n      if (path.getArray().length) {\r\n        const bounds = this.googleMaps.map.getBounds();\r\n        path.forEach(p => isPolygonOnScreen = isPolygonOnScreen || bounds && bounds.contains(p));\r\n      }\r\n\r\n      if (isPolygonOnScreen) {\r\n        this.dotMarker.setVisible(true);\r\n        this.polygon.setVisible(true);\r\n        this.vectorLine.setVisible(true);\r\n      } else {\r\n        this.dotMarker.setVisible(false);\r\n        this.polygon.setVisible(false);\r\n        this.vectorLine.setVisible(false);\r\n      }\r\n    }\r\n    // If using the dot marker\r\n    else if (this.dotMarker) {\r\n      const bounds = this.googleMaps.map.getBounds();\r\n      const visible = !!bounds && bounds.contains(this.dotMarker.getPosition());\r\n      this.dotMarker.setVisible(visible);\r\n      this.polygon.setVisible(visible);\r\n      this.vectorLine.setVisible(visible);\r\n    }\r\n  }\r\n\r\n  protected clearEventListeners() {\r\n    this.hoverPolygonListeners.forEach(l => l.remove());\r\n    this.hoverPolygonListeners = [];\r\n    this.hoverDotListeners.forEach(l => l.remove());\r\n    this.hoverDotListeners = [];\r\n  }\r\n\r\n  protected setupEventListeners() {\r\n    const showPolygon = (this.canDrawPolygon && this.zoom >= LOD.scaleTriangle) || (this.isMoving && this.zoom < LOD.scaleTriangle);\r\n\r\n    if (showPolygon && !this.trackedObject.icon) {\r\n\r\n      // Add listeners for polygon, not do\r\n      if (this.hoverPolygonListeners.length < 1) {\r\n        this.clearEventListeners();\r\n        if (this.triggerInfowindow === 'click') {\r\n          this.hoverPolygonListeners.push(\r\n            this.polygon.addListener('click', () => this.onMouseOver()),\r\n          );\r\n        } else {\r\n          if (this.triggerInfowindow === 'hover') {\r\n            this.hoverPolygonListeners.push(\r\n              this.polygon.addListener('mouseover', () => this.onMouseOver()),\r\n              this.polygon.addListener('mouseout', () => this.onMouseOut()),\r\n            );\r\n          }\r\n        }\r\n      }\r\n    } else {\r\n\r\n      // Add listeners for dot, not polygon\r\n      if (this.hoverDotListeners.length < 1) {\r\n        this.clearEventListeners();\r\n        if (this.triggerInfowindow === 'click') {\r\n          this.hoverDotListeners.push(\r\n            this.dotMarker.addListener('click', () => this.onMouseOver()),\r\n          );\r\n        } else {\r\n          this.hoverDotListeners.push(\r\n            this.dotMarker.addListener('mouseover', () => this.onMouseOver()),\r\n            this.dotMarker.addListener('mouseout', () => this.onMouseOut()),\r\n          );\r\n        }\r\n      }\r\n    }\r\n\r\n    // Listen for zoom change\r\n    if (!this.zoomListener)\r\n      this.zoomListener = this.googleMaps.map.addListener('zoom_changed', () => this.onZoomChanged());\r\n  }\r\n\r\n  /**\r\n\t * Returns the series of icons according to the current zoom level\r\n\t */\r\n  protected getSpeedLineIcons() {\r\n    const s = Math.ceil(this.zoom - LOD.scaleTriangle);\r\n    s <= 0 ? 1 : Math.pow(2, s);\r\n\r\n    const icons: google.maps.IconSequence[] = [];\r\n    const l = SPEED_UNIT_LENGTH_M * this.scale;\r\n    const dashLength = Math.round(l / this.getMetersPerPx() * .5);\r\n    const skipIconOnFifth = false;\r\n\r\n    // Units\r\n\r\n    const iconUnits = {\r\n      path: `M 0 0 L 0 ${dashLength}`,\r\n      scale: 1,\r\n      strokeWeight: 2,\r\n      fillOpacity: 1\r\n    };\r\n\r\n    const units = Math.round(this.trackedObject.speed);\r\n    for (let i = 1; i <= units; i++) {\r\n      const percent = Math.round(100 / units * i);\r\n      icons.push({\r\n        icon: (i % 5 == 0 && skipIconOnFifth) ? null : iconUnits,\r\n        offset: `${percent}%`\r\n      });\r\n    }\r\n\r\n    // Fifths\r\n\r\n    const iconFifths = {\r\n      path: `M ${dashLength} ${dashLength / 2} L -${dashLength} ${dashLength / 2}`,\r\n      scale: 1,\r\n      strokeWeight: 2,\r\n    }\r\n\r\n    const fifths = Math.floor(units / 5);\r\n    for (let i = 1; i <= fifths; i++) {\r\n      const percent = Math.round(100 / units * 5 * i);\r\n      icons.push({\r\n        icon: iconFifths,\r\n        offset: `${percent}%`\r\n      });\r\n    }\r\n\r\n    return icons;\r\n  }\r\n\r\n  /**\r\n\t * Initis/updates polyline with icons according to current zoom level\r\n\t */\r\n  protected initSpeedPolyline() {\r\n    if (this.vectorLine) this.vectorLine.setMap(null);\r\n\r\n    this.vectorLine = new google.maps.Polyline({\r\n      strokeColor: 'green',\r\n      strokeWeight: 0,\r\n      draggable: false,\r\n      editable: false,\r\n      path: [],\r\n      icons: this.getSpeedLineIcons(),\r\n      map: this.googleMaps.map,\r\n    });\r\n\r\n    this.vectorLine.setVisible(false);\r\n  }\r\n\r\n  protected initDotaMarker() {\r\n    if (this.dotMarker) this.dotMarker.setMap(null);\r\n    this.googleMaps.addMarker(this.dotMarker);\r\n  }\r\n\r\n  protected getTrianglePath() {\r\n    if (!this.polygon) return [];\r\n\r\n    const positionDot = this.trackedObject.position;\r\n    const center = positionDot;\r\n    const h = this.trackedObject.heading || 0;\r\n    const w = 50;\r\n    const l = 100;\r\n\r\n    const rear = google.maps.geometry.spherical.computeOffset(center, l / 2 * this.scale, h + 180);\r\n    const rearLeft = google.maps.geometry.spherical.computeOffset(rear, w / 2 * this.scale, h - 90);\r\n    const rearRight = google.maps.geometry.spherical.computeOffset(rear, w / 2 * this.scale, h + 90);\r\n    const tip = google.maps.geometry.spherical.computeOffset(rear, l * this.scale, h);\r\n\r\n    return [rear, rearLeft, tip, rearRight];\r\n  }\r\n\r\n  protected getVectorLinePath(start: google.maps.LatLng) {\r\n    const l = SPEED_UNIT_LENGTH_M * this.trackedObject.speed;\r\n    const end = google.maps.geometry.spherical.computeOffset(start, l, this.trackedObject.speed);\r\n    return [start, end];\r\n  }\r\n\r\n  displayInfowindow(show: boolean) {\r\n    if (!this.infowindow) return;\r\n\r\n    if (show) {\r\n      const o = this.trackedObject.position;\r\n      this.infowindow.open(o);\r\n    } else {\r\n      this.infowindow.close();\r\n    }\r\n  }\r\n\r\n  drawObject() {\r\n    if (!this.dotMarker) this.initDotaMarker();\r\n    this.initSpeedPolyline();\r\n\r\n    if (!this.trackedObject.position) return;\r\n\r\n    this.setupEventListeners();\r\n    const showDot = !this.isMoving;\r\n    const showTriangle = this.isMoving && !this.trackedObject.icon;\r\n    const showSpeedLine = this.drawSpeedVector && this.isMoving && this.zoom >= LOD.speed;\r\n\r\n    // Show triangle\r\n    if (showTriangle) {\r\n      const polygonPath = this.getTrianglePath();\r\n      if (polygonPath.length) {\r\n        this.polygon.setOptions({\r\n          fillOpacity: !this.offline ? .55 : 0,\r\n          fillColor: this.color,\r\n          strokeColor: this.color,\r\n        });\r\n        this.polygon.setPath(polygonPath);\r\n        this.polygon.setVisible(true);\r\n        this.polygon.setMap(this.googleMaps.map);\r\n      }\r\n    }\r\n    else {\r\n      this.polygon.setVisible(false);\r\n      this.polygon.setMap(null);\r\n    }\r\n\r\n    // Draw speed vector\r\n    if (showSpeedLine) {\r\n      const o = this.trackedObject.position;\r\n      const linePath = this.getVectorLinePath(o);\r\n      this.vectorLine.setPath(linePath);\r\n      this.vectorLine.setVisible(true);\r\n      this.vectorLine.setMap(this.googleMaps.map);\r\n    } else {\r\n      this.vectorLine.setVisible(false);\r\n      this.vectorLine.setMap(null);\r\n    }\r\n\r\n    // Update dot icon\r\n    this.dotMarker.setIcon(\r\n      this.trackedObject.icon ||\r\n      {\r\n        path: google.maps.SymbolPath.CIRCLE,\r\n        fillColor: this.color,\r\n        fillOpacity: !this.offline && showDot ? 0.6 : 0,\r\n        strokeColor: this.color,\r\n        strokeOpacity: showDot ? 0.9 : 0,\r\n        strokeWeight: 1,\r\n        scale: 10 * (this.trackedObject.scale || 1),\r\n        labelOrigin: new google.maps.Point(0, 3),\r\n        anchor: new google.maps.Point(.5, .5),\r\n      }\r\n    );\r\n    this.dotMarker.setLabel(this.zoom >= LOD.nameLabels ? this.trackedObject.label : '');\r\n    this.dotMarker.setPosition(this.trackedObject.position);\r\n    this.dotMarker.setMap(this.googleMaps.map);\r\n    this.dotMarker.setVisible(true);\r\n  }\r\n\r\n  protected onMouseOver() {\r\n    this.displayInfowindow(true);\r\n  }\r\n\r\n  protected onMouseOut() {\r\n    this.displayInfowindow(false);\r\n  }\r\n\r\n  protected onZoomChanged() {\r\n    this.drawObject();\r\n  }\r\n}\r\n","/// <reference types=\"@types/googlemaps\" />\r\nimport { Component, Output, EventEmitter, Input } from '@angular/core';\r\nimport geolocationMarkrFn from 'geolocation-marker';\r\nimport { GoogleMapsWrapper } from '../../services/googlemaps-wrapper';\r\ngeolocationMarkrFn;\r\n\r\n/**\r\n * Extends from {@link google.maps.MVCObject https://developers.google.com/maps/documentation/javascript/reference/event#MVCObject}.\r\n * It shows the default blue sphere with proximity shade.\r\n */\r\ndeclare class GeolocationMarker {\r\n  constructor(map: google.maps.Map);\r\n  setMap(map: google.maps.Map);\r\n  position: google.maps.LatLng;\r\n}\r\n\r\n/**\r\n * Creates the default user location button.\r\n *\r\n * â  Add this component as sibling **AFTER the\r\n * map element**, so if renders on top of it.\r\n *\r\n * @example\r\n * <div id=\"parent\" style=\"height: 100%; width: 100%;\">\r\n *   <div id=\"map\" #map></div>\r\n *   <gmtv-geolocation-button (locate)=\"onLocation()\"></gmtv-geolocation-button>\r\n * </div>\r\n */\r\n@Component({\r\n  selector: 'gmtv-geolocation-button',\r\n  templateUrl: './geolocation-button.html',\r\n  styleUrls: ['./geolocation-button.scss']\r\n})\r\nexport class GeolocationButtonComponent {\r\n  /**\r\n   * If `true`, the button won't attempt to center the map on the user when clicked,\r\n   * but will emit the event `click` instead.\r\n   * \r\n   * @example\r\n   * \r\n   * <gmtv-geolocation-button \r\n   *   [useCustomClickFn]=\"true\" \r\n   *   (click)=\"myCustomFunction()\"></gmtv-geolocation-button>\r\n   */\r\n  @Input() useCustomClickFn = false;\r\n  /**\r\n   * Emited after obtaining the user's location\r\n   */\r\n  @Output() locate = new EventEmitter<google.maps.LatLng>();\r\n  private _geoLocationMarker: GeolocationMarker;\r\n\r\n  constructor(protected googlemapsWrapper: GoogleMapsWrapper) { }\r\n\r\n  /**\r\n   * Get user's location and center map on it\r\n   */\r\n  centerOnUser() {\r\n    if (this.useCustomClickFn) {\r\n      return;\r\n    }\r\n\r\n    if (navigator.geolocation) {\r\n      navigator.geolocation.getCurrentPosition((position) => this.onPosition(position), console.error, { enableHighAccuracy: true });\r\n    } else {\r\n      console.error('No support for geolocation');\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Center the map on a specific position and draw the geoLocationMarker\r\n   */\r\n  setUserPosition(lat: number, lng: number) {\r\n    this.googlemapsWrapper.map.setCenter({ lat, lng });\r\n    if (this._geoLocationMarker) this._geoLocationMarker.setMap(null);\r\n    this._geoLocationMarker = new GeolocationMarker(this.googlemapsWrapper.map);\r\n    this.locate.emit(this._geoLocationMarker.position);\r\n  }\r\n\r\n  private onPosition(position: Position) {\r\n    const lng = position.coords.longitude;\r\n    const lat = position.coords.latitude;\r\n    // this.googlemapsWrapper.map.setCenter({ lat, lng });\r\n\r\n    // if (this._geoLocationMarker) this._geoLocationMarker.setMap(null);\r\n    // this._geoLocationMarker = new GeolocationMarker(this.googlemapsWrapper.map);\r\n    // this.locate.emit(this._geoLocationMarker.position);\r\n    this.setUserPosition(lat, lng);\r\n  }\r\n}\r\n","import { NgModule } from '@angular/core';\r\nimport { NgxGooglemapsTrackingViewComponent } from './ngx-googlemaps-tracking-view.component';\r\nimport { TrackedObjectComponent } from './components/tracked-object/tracked-object.component';\r\nimport { CommonModule } from '@angular/common';\r\nimport { GoogleMapsWrapper } from './services/googlemaps-wrapper';\r\nimport { InfowindowComponent } from './components/infowindow/infowindow.component';\r\nimport { GeolocationButtonComponent } from './components/geolocation-button/geolocation-button';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    NgxGooglemapsTrackingViewComponent,\r\n    TrackedObjectComponent,\r\n    InfowindowComponent,\r\n    GeolocationButtonComponent\r\n  ],\r\n  imports: [\r\n    CommonModule,\r\n    HttpClientModule\r\n  ],\r\n  providers: [GoogleMapsWrapper],\r\n  exports: [\r\n    NgxGooglemapsTrackingViewComponent,\r\n    InfowindowComponent,\r\n    GeolocationButtonComponent\r\n  ]\r\n})\r\nexport class NgxGooglemapsTrackingViewModule { }\r\n","/**\r\n * @license geolocation-marker\r\n * @copyright 2012, 2015 Chad Killingsworth\r\n * @see https://github.com/ChadKillingsworth/geolocation-marker/blob/master/LICENSE.txt\r\n */\r\n\r\n/**\r\n * @name GeolocationMarker for Google Maps v3\r\n * @version version 1.1\r\n * @author Chad Killingsworth [chadkillingsworth at gmail.com]\r\n * Copyright 2012\r\n * @fileoverview\r\n * This library uses geolocation to add a marker and accuracy circle to a map.\r\n * The marker position is automatically updated as the user position changes.\r\n */\r\n\r\n'use strict';\r\n\r\nclass GeolocationMarker extends google.maps.MVCObject {\r\n  /**\r\n  * @param {google.maps.Map=} opt_map\r\n  * @param {(google.maps.MarkerOptions|Object.<string>)=} opt_outerMarkerOpts\r\n  * @param {(google.maps.MarkerOptions|Object.<string>)=} opt_markerOpts\r\n  * @param {(google.maps.CircleOptions|Object.<string>)=} opt_circleOpts\r\n  */\r\n  constructor(opt_map, opt_outerMarkerOpts, opt_markerOpts, opt_circleOpts) {\r\n     super();\r\n\r\n     /**\r\n      * @private\r\n      * @type {google.maps.Marker}\r\n      */\r\n     this.outerMarker_ = null;\r\n\r\n     /**\r\n      * @private\r\n      * @type {google.maps.Marker}\r\n      */\r\n     this.marker_ = null;\r\n\r\n     /**\r\n      * @private\r\n      * @type {google.maps.Circle}\r\n      */\r\n     this.circle_ = null;\r\n\r\n     /**\r\n      * @private\r\n      * @type {number}\r\n      */\r\n     this.watchId_ = -1;\r\n\r\n     var outerMarkerOpts = {\r\n       'clickable': false,\r\n       'cursor': 'pointer',\r\n       'draggable': false,\r\n       'flat': true,\r\n       'icon': {\r\n           'path': google.maps.SymbolPath.CIRCLE,\r\n           'fillColor': '#C8D6EC',\r\n           'fillOpacity': 0.7,\r\n           'scale': 12,\r\n           'strokeWeight': 0,\r\n       },\r\n       'position': new google.maps.LatLng(0, 0),\r\n       'title': 'Current location',\r\n       'zIndex': 2\r\n     };\r\n\r\n     var markerOpts = {\r\n       'clickable': false,\r\n       'cursor': 'pointer',\r\n       'draggable': false,\r\n       'flat': true,\r\n       'icon': {\r\n           'path': google.maps.SymbolPath.CIRCLE,\r\n           'fillColor': '#4285F4',\r\n           'fillOpacity': 1,\r\n           'scale': 6,\r\n           'strokeColor': 'white',\r\n           'strokeWeight': 2,\r\n       },\r\n       // This marker may move frequently - don't force canvas tile redraw\r\n       'optimized': false,\r\n       'position': new google.maps.LatLng(0, 0),\r\n       'title': 'Current location',\r\n       'zIndex': 3\r\n     };\r\n\r\n     if(opt_outerMarkerOpts) {\r\n       outerMarkerOpts = this.copyOptions_(outerMarkerOpts, opt_outerMarkerOpts);\r\n     }\r\n\r\n     if(opt_markerOpts) {\r\n       markerOpts = this.copyOptions_(markerOpts, opt_markerOpts);\r\n     }\r\n\r\n     var circleOpts = {\r\n       'clickable': false,\r\n       'radius': 0,\r\n       'strokeColor': '1bb6ff',\r\n       'strokeOpacity': .4,\r\n       'fillColor': '61a0bf',\r\n       'fillOpacity': .4,\r\n       'strokeWeight': 1,\r\n       'zIndex': 1\r\n     };\r\n\r\n     if(opt_circleOpts) {\r\n       circleOpts = this.copyOptions_(circleOpts, opt_circleOpts);\r\n     }\r\n\r\n     this.outerMarker_ = new google.maps.Marker(outerMarkerOpts);\r\n     this.marker_ = new google.maps.Marker(markerOpts);\r\n     this.circle_ = new google.maps.Circle(circleOpts);\r\n\r\n     google.maps.MVCObject.prototype.set.call(this, 'accuracy', null);\r\n     google.maps.MVCObject.prototype.set.call(this, 'position', null);\r\n     google.maps.MVCObject.prototype.set.call(this, 'map', null);\r\n\r\n     this.set('minimum_accuracy', null);\r\n\r\n     this.set('position_options', /** GeolocationPositionOptions */\r\n         ({enableHighAccuracy: true, maximumAge: 1000}));\r\n\r\n     this.circle_.bindTo('map', this.outerMarker_);\r\n     this.circle_.bindTo('map', this.marker_);\r\n\r\n     if(opt_map) {\r\n       this.setMap(opt_map);\r\n     }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @param {string} key\r\n   * @param {*} value\r\n   */\r\n  set(key, value) {\r\n     if (GeolocationMarker.invalidPropertiesExpr_.test(key)) {\r\n       throw '\\'' + key + '\\' is a read-only property.';\r\n     } else if (key === 'map') {\r\n       this.setMap(/** @type {google.maps.Map} */ (value));\r\n     } else {\r\n       google.maps.MVCObject.prototype.set.call(this, key, value);\r\n     }\r\n  }\r\n\r\n  /** @return {google.maps.Map} */\r\n  getMap() {\r\n     return /** @type {google.maps.Map|null} */ (this.get('map'));\r\n  }\r\n\r\n  /** @return {GeolocationPositionOptions} */\r\n  getPositionOptions() {\r\n     return /** @type {GeolocationPositionOptions} */(this.get('position_options'));\r\n  }\r\n\r\n  /** @param {!GeolocationPositionOptions|!Object.<string, *>} positionOpts */\r\n  setPositionOptions(positionOpts) {\r\n     this.set('position_options', positionOpts);\r\n  }\r\n\r\n  /** @return {google.maps.LatLng|null} */\r\n  getPosition() {\r\n     return /** @type {google.maps.LatLng|null} */ (this.get('position'));\r\n  }\r\n\r\n  /** @return {google.maps.LatLngBounds?} */\r\n  getBounds() {\r\n     if (this.get('position')) {\r\n       return this.circle_.getBounds();\r\n     } else {\r\n       return null;\r\n     }\r\n  }\r\n\r\n  /** @return {number|null} */\r\n  getAccuracy() {\r\n     return /** @type {number|null} */ (this.get('accuracy'));\r\n  }\r\n\r\n  /** @return {number|null} */\r\n  getMinimumAccuracy() {\r\n     return /** @type {number|null} */ (this.get('minimum_accuracy'));\r\n  }\r\n\r\n  /** @param {number|null} accuracy */\r\n  setMinimumAccuracy(accuracy) {\r\n     this.set('minimum_accuracy', accuracy);\r\n  }\r\n\r\n  /** @param {google.maps.Map|null} map */\r\n  setMap(map) {\r\n     google.maps.MVCObject.prototype.set.call(this, 'map', map);\r\n     if (map) {\r\n       this.watchPosition_();\r\n     } else {\r\n       this.outerMarker_.unbind('position');\r\n       this.marker_.unbind('position');\r\n       this.circle_.unbind('center');\r\n       this.circle_.unbind('radius');\r\n       google.maps.MVCObject.prototype.set.call(this, 'accuracy', null);\r\n       google.maps.MVCObject.prototype.set.call(this, 'position', null);\r\n       navigator.geolocation.clearWatch(this.watchId_);\r\n       this.watchId_ = -1;\r\n       this.outerMarker_.setMap(map);\r\n       this.marker_.setMap(map);\r\n     }\r\n  }\r\n\r\n  /** @param {google.maps.MarkerOptions|Object.<string>} outerMarkerOpts */\r\n  setOuterMarkerOptions(outerMarkerOpts) {\r\n     this.outerMarker_.setOptions(this.copyOptions_({}, outerMarkerOpts));\r\n  }\r\n\r\n  /** @param {google.maps.MarkerOptions|Object.<string>} markerOpts */\r\n  setMarkerOptions(markerOpts) {\r\n     this.marker_.setOptions(this.copyOptions_({}, markerOpts));\r\n  }\r\n\r\n  /** @param {google.maps.CircleOptions|Object.<string>} circleOpts */\r\n  setCircleOptions(circleOpts) {\r\n     this.circle_.setOptions(this.copyOptions_({}, circleOpts));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {GeolocationPosition} position\r\n   */\r\n  updatePosition_(position) {\r\n     var newPosition = new google.maps.LatLng(position.coords.latitude,\r\n         position.coords.longitude), mapNotSet = this.marker_.getMap() == null;\r\n\r\n     if (mapNotSet) {\r\n       if (this.getMinimumAccuracy() != null &&\r\n           position.coords.accuracy > this.getMinimumAccuracy()) {\r\n         return;\r\n       }\r\n       this.outerMarker_.setMap(this.getMap());\r\n       this.marker_.setMap(this.getMap());\r\n       this.outerMarker_.bindTo('position', this);\r\n       this.marker_.bindTo('position', this);\r\n       this.circle_.bindTo('center', this, 'position');\r\n       this.circle_.bindTo('radius', this, 'accuracy');\r\n     }\r\n\r\n     if (this.getAccuracy() != position.coords.accuracy) {\r\n       // The local set method does not allow accuracy to be updated\r\n       google.maps.MVCObject.prototype.set.call(this, 'accuracy',\r\n           position.coords.accuracy);\r\n     }\r\n\r\n     if (mapNotSet || this.getPosition() == null ||\r\n         !this.getPosition().equals(newPosition)) {\r\n       // The local set method does not allow position to be updated\r\n       google.maps.MVCObject.prototype.set.call(this, 'position', newPosition);\r\n     }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  watchPosition_() {\r\n     if (navigator.geolocation) {\r\n       this.watchId_ = navigator.geolocation.watchPosition(\r\n           this.updatePosition_.bind(this),\r\n           this.geolocationError_.bind(this),\r\n           this.getPositionOptions());\r\n     }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {GeolocationPositionError} data\r\n   */\r\n  geolocationError_(data) {\r\n     google.maps.event.trigger(this, 'geolocation_error', data);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object.<string,*>} target\r\n   * @param {Object.<string,*>} source\r\n   * @return {Object.<string,*>}\r\n   */\r\n  copyOptions_(target, source) {\r\n     for (var opt in source) {\r\n       if (GeolocationMarker.DISALLOWED_OPTIONS[opt] !== true) {\r\n         target[opt] = source[opt];\r\n       }\r\n     }\r\n     return target;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object.<string, boolean>}\r\n */\r\nGeolocationMarker.DISALLOWED_OPTIONS = {\r\n    'map': true,\r\n    'position': true,\r\n    'radius': true\r\n};\r\n\r\n/**\r\n * @private\r\n * @const\r\n */\r\nGeolocationMarker.invalidPropertiesExpr_ = /^(?:position|accuracy)$/i;\r\n\r\nexport default GeolocationMarker;\r\n",null,"/*\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *       http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @name GeolocationMarker for Google Maps v3\r\n * @version version 1.1\r\n * @author Chad Killingsworth [chadkillingsworth at gmail.com]\r\n * Copyright 2012\r\n * @fileoverview\r\n * Exports for compiling the GeolocationMarker library with Closure-compiler\r\n * for use in external code. When compiling the library with other user\r\n * scripts, these exports are not needed.\r\n */\r\n\r\nimport GeolocationMarker from './geolocation-marker.js';\r\n\r\n;(function(root, factory) {\r\n   if (typeof root['define'] === 'function' && root['define']['amd']) {\r\n     root['define']([], factory);\r\n   } else if (typeof root['exports'] === 'object') {\r\n     root['module']['exports'] = factory();\r\n   } else {\r\n     root['GeolocationMarker'] = factory();\r\n   }\r\n }(window, function() {\r\n  GeolocationMarker.prototype['getAccuracy'] = GeolocationMarker.prototype.getAccuracy;\r\n  GeolocationMarker.prototype['getBounds'] = GeolocationMarker.prototype.getBounds;\r\n  GeolocationMarker.prototype['getMap'] = GeolocationMarker.prototype.getMap;\r\n  GeolocationMarker.prototype['getMinimumAccuracy'] = GeolocationMarker.prototype.getMinimumAccuracy;\r\n  GeolocationMarker.prototype['getPosition'] = GeolocationMarker.prototype.getPosition;\r\n  GeolocationMarker.prototype['getPositionOptions'] = GeolocationMarker.prototype.getPositionOptions;\r\n  GeolocationMarker.prototype['setCircleOptions'] = GeolocationMarker.prototype.setCircleOptions;\r\n  GeolocationMarker.prototype['setMap'] = GeolocationMarker.prototype.setMap;\r\n  GeolocationMarker.prototype['setMarkerOptions'] = GeolocationMarker.prototype.setMarkerOptions;\r\n  GeolocationMarker.prototype['setMinimumAccuracy'] = GeolocationMarker.prototype.setMinimumAccuracy;\r\n  GeolocationMarker.prototype['setPositionOptions'] = GeolocationMarker.prototype.setPositionOptions;\r\n\r\n  return GeolocationMarker;\r\n}));\r\n","/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\r\n            if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))\r\n                t[p[i]] = s[p[i]];\r\n        }\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var s = typeof Symbol === \"function\" && Symbol.iterator, m = s && o[s], i = 0;\r\n    if (m) return m.call(o);\r\n    if (o && typeof o.length === \"number\") return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n    throw new TypeError(s ? \"Object is not iterable.\" : \"Symbol.iterator is not defined.\");\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __spreadArrays() {\r\n    for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;\r\n    for (var r = Array(s), k = 0, i = 0; i < il; i++)\r\n        for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)\r\n            r[k] = a[j];\r\n    return r;\r\n};\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n\r\nexport function __classPrivateFieldGet(receiver, privateMap) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to get private field on non-instance\");\r\n    }\r\n    return privateMap.get(receiver);\r\n}\r\n\r\nexport function __classPrivateFieldSet(receiver, privateMap, value) {\r\n    if (!privateMap.has(receiver)) {\r\n        throw new TypeError(\"attempted to set private field on non-instance\");\r\n    }\r\n    privateMap.set(receiver, value);\r\n    return value;\r\n}\r\n","var trim = function(string) {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  var headersArr = trim(headers).split('\\n')\n\n  for (var i = 0; i < headersArr.length; i++) {\n    var row = headersArr[i]\n    var index = row.indexOf(':')\n    , key = trim(row.slice(0, index)).toLowerCase()\n    , value = trim(row.slice(index + 1))\n\n    if (typeof(result[key]) === 'undefined') {\n      result[key] = value\n    } else if (isArray(result[key])) {\n      result[key].push(value)\n    } else {\n      result[key] = [ result[key], value ]\n    }\n  }\n\n  return result\n}\n","\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        // Since we're generating multiple colors,\n        // incremement the seed. Otherwise we'd just\n        // generate the same color each time...\n        if (seed && options.seed) options.seed += 1;\n\n        colors.push(randomColor(options));\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [19,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [47,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [63,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [179, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [258, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [283, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>Tracking View Demo</ion-title>\\r\\n  </ion-toolbar>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"end\\\">\\r\\n      <ion-button size=\\\"small\\\" fill=\\\"clear\\\" color=\\\"primary\\\" (click)=\\\"openDocumentation()\\\">Documentation</ion-button>\\r\\n      <ion-button size=\\\"small\\\" fill=\\\"outline\\\" (click)=\\\"map.centerPin.enable(infowindowLocation, '<yourApiKey>')\\\">Add Pin\\r\\n      </ion-button>\\r\\n      <ion-button size=\\\"small\\\" fill=\\\"outline\\\" (click)=\\\"map.centerPin.disable()\\\">Remove Pin</ion-button>\\r\\n    </ion-buttons>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content [fullscreen]=\\\"true\\\">\\r\\n\\r\\n  <div class=\\\"container text-center bg-white\\\" id=\\\"header\\\">\\r\\n    <p class=\\\"ion-margin-vertical\\\">\\r\\n      This demo shows 50 real-time aircrafts flying over the location, updated every 10 seconds.\\r\\n      <br>\\r\\n      The map includes geolocation functions. Click on the top right buttons to add a pick-location pin.\\r\\n    </p>\\r\\n  </div>\\r\\n\\r\\n  <!-- Address Infowindow Template -->\\r\\n  <ng-template #infowindowLocation let-address>\\r\\n    <div style=\\\"min-height: 20px; min-width: 50px;\\\">\\r\\n      <span *ngIf=\\\"!address\\\">Loading...</span>\\r\\n      <div *ngIf=\\\"!!address\\\" class=\\\"ion-text-center\\\">\\r\\n        (add your gMaps Api Key to call geolocation service)\\r\\n        <br>\\r\\n        <ion-button size=\\\"small\\\" (click)=\\\"map.centerPin.fix = !map.centerPin.fix\\\">\\r\\n          {{map.centerPin.fix ? 'Move' : 'Fix Pin'}}</ion-button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </ng-template>\\r\\n\\r\\n  <!-- Map Component -->\\r\\n  <div id=\\\"parent\\\">\\r\\n    <gmtv-map [data]=\\\"objectsToTrack\\\"\\r\\n              [triggerInfowindow]=\\\"isMobile ? 'click' : 'hover'\\\"\\r\\n              [template]=\\\"infowindow\\\"\\r\\n              [mapOptions]=\\\"mapOptions\\\"\\r\\n              [showLocationButton]=\\\"true\\\"\\r\\n              #map>\\r\\n      <ng-template #infowindow let-o>\\r\\n        <div>\\r\\n          <h3>Flight #{{o.label?.text}} <span class=\\\"flag-icon flag-icon-{{getIsoCode(o.country)?.toLowerCase()}}\\\"\\r\\n                  [title]=\\\"o.country\\\"></span></h3>\\r\\n          <span><strong>Altitude: </strong>{{o.altitude | number: '1.0-0'}}m</span>\\r\\n        </div>\\r\\n      </ng-template>\\r\\n    </gmtv-map>\\r\\n\\r\\n    <gmtv-geolocation-button></gmtv-geolocation-button>\\r\\n\\r\\n  </div>\\r\\n\\r\\n</ion-content>\\r\\n\"","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var window = require(\"global/window\")\nvar once = require(\"once\")\nvar parseHeaders = require('parse-headers')\n\nvar messages = {\n    \"0\": \"Internal XMLHttpRequest Error\",\n    \"4\": \"4xx Client Error\",\n    \"5\": \"5xx Server Error\"\n}\n\nvar XHR = window.XMLHttpRequest || noop\nvar XDR = \"withCredentials\" in (new XHR()) ? XHR : window.XDomainRequest\n\nmodule.exports = createXHR\n\nfunction createXHR(options, callback) {\n    if (typeof options === \"string\") {\n        options = { uri: options }\n    }\n\n    options = options || {}\n    callback = once(callback)\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new XDR()\n        }else{\n            xhr = new XHR()\n        }\n    }\n\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var key\n    var load = options.response ? loadResponse : loadXhr\n\n    if (\"json\" in options) {\n        isJson = true\n        headers[\"Accept\"] = \"application/json\"\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"Content-Type\"] = \"application/json\"\n            body = JSON.stringify(options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = load\n    xhr.onerror = error\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    // hate IE\n    xhr.ontimeout = noop\n    xhr.open(method, uri, !sync)\n                                    //backward compatibility\n    if (options.withCredentials || (options.cors && options.withCredentials !== false)) {\n        xhr.withCredentials = true\n    }\n\n    // Cannot set timeout with sync request\n    if (!sync) {\n        xhr.timeout = \"timeout\" in options ? options.timeout : 5000\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n    \n    if (\"beforeSend\" in options && \n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    xhr.send(body)\n\n    return xhr\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            load()\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = null\n\n        if (xhr.response) {\n            body = xhr.response\n        } else if (xhr.responseType === 'text' || !xhr.responseType) {\n            body = xhr.responseText || xhr.responseXML\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function getStatusCode() {\n        return xhr.status === 1223 ? 204 : xhr.status\n    }\n\n    // if we're getting a none-ok statusCode, build & return an error\n    function errorFromStatusCode(status, body) {\n        var error = null\n        if (status === 0 || (status >= 400 && status < 600)) {\n            var message = (typeof body === \"string\" ? body : false) ||\n                messages[String(status).charAt(0)]\n            error = new Error(message)\n            error.statusCode = status\n        }\n\n        return error\n    }\n\n    // will load the data & process the response in a special response object\n    function loadResponse() {\n        var status = getStatusCode()\n        var body = getBody()\n        var error = errorFromStatusCode(status, body)\n        var response = {\n            body: body,\n            statusCode: status,\n            statusText: xhr.statusText,\n            raw: xhr\n        }\n        if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n            response.headers = parseHeaders(xhr.getAllResponseHeaders())\n        } else {\n            response.headers = {}\n        }\n\n        callback(error, response, response.body)\n    }\n\n    // will load the data and add some response properties to the source xhr\n    // and then respond with that\n    function loadXhr() {\n        var status = getStatusCode()\n        var error = errorFromStatusCode(status)\n\n        xhr.status = xhr.statusCode = status\n        xhr.body = getBody()\n        xhr.headers = parseHeaders(xhr.getAllResponseHeaders())\n\n        callback(error, xhr, xhr.body)\n    }\n\n    function error(evt) {\n        callback(evt, xhr)\n    }\n}\n\n\nfunction noop() {}\n","module.exports = once\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var called = false\n  return function () {\n    if (called) return\n    called = true\n    return fn.apply(this, arguments)\n  }\n}\n","module.exports = (function xmlparser() {\n  //common browsers\n  if (typeof self.DOMParser !== 'undefined') {\n    return function(str) {\n      var parser = new self.DOMParser()\n      return parser.parseFromString(str, 'application/xml')\n    }\n  } \n\n  //IE8 fallback\n  if (typeof self.ActiveXObject !== 'undefined'\n      && new self.ActiveXObject('Microsoft.XMLDOM')) {\n    return function(str) {\n      var xmlDoc = new self.ActiveXObject(\"Microsoft.XMLDOM\")\n      xmlDoc.async = \"false\"\n      xmlDoc.loadXML(str)\n      return xmlDoc\n    }\n  }\n\n  //last resort fallback\n  return function(str) {\n    var div = document.createElement('div')\n    div.innerHTML = str\n    return div\n  }\n})()\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HomePage } from './home.page';\r\nimport { NgxGooglemapsTrackingViewModule } from 'ngx-googlemaps-tracking-view';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  providers: [],\r\n  imports: [\r\n    NgxGooglemapsTrackingViewModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    IonicModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: '',\r\n        component: HomePage\r\n      }\r\n    ])\r\n  ],\r\n  declarations: [HomePage]\r\n})\r\nexport class HomePageModule {}\r\n","export default \"* {\\n  --header-height: 90px; }\\n\\n#header {\\n  height: var(--header-height);\\n  overflow-y: auto; }\\n\\n#parent {\\n  width: 100%;\\n  position: relative;\\n  height: calc(100% - var(--header-height)); }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvaG9tZS9DOlxcVXNlcnNcXFJhc2NoaWRcXEdpdFxcYW5ndWxhclxcZ29vZ2xlbWFwcy10cmFja2luZy12aWV3XFxkZW1vL3NyY1xcYXBwXFxob21lXFxob21lLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHFCQUFnQixFQUFBOztBQUdsQjtFQUNFLDRCQUE0QjtFQUM1QixnQkFBZ0IsRUFBQTs7QUFHbEI7RUFDRSxXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLHlDQUF5QyxFQUFBIiwiZmlsZSI6InNyYy9hcHAvaG9tZS9ob21lLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIioge1xyXG4gIC0taGVhZGVyLWhlaWdodDogOTBweDtcclxufVxyXG5cclxuI2hlYWRlciB7XHJcbiAgaGVpZ2h0OiB2YXIoLS1oZWFkZXItaGVpZ2h0KTtcclxuICBvdmVyZmxvdy15OiBhdXRvO1xyXG59XHJcblxyXG4jcGFyZW50IHtcclxuICB3aWR0aDogMTAwJTtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSB2YXIoLS1oZWFkZXItaGVpZ2h0KSk7XHJcbn1cclxuIl19 */\"","/// <reference types=\"@types/googlemaps\" />\r\nimport { Component, ViewChild, AfterContentInit, ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { NgxGooglemapsTrackingViewComponent, TrackedObject } from 'ngx-googlemaps-tracking-view';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as i18IsoCountries from 'i18n-iso-countries';\r\nimport * as randomColor from 'randomcolor';\r\nimport * as parseSvg from 'parse-svg-path';\r\nimport * as extractSvg from 'extract-svg-path';\r\nimport * as loadSvg from 'load-svg';\r\nimport { Platform } from '@ionic/angular';\r\n\r\ni18IsoCountries.registerLocale(require('i18n-iso-countries/langs/en.json'));\r\ninterface Aircraft {\r\n  /** icao24 */\r\n  0: string;\r\n  /** origin_country */\r\n  2: string;\r\n  /** longitude */\r\n  5: number;\r\n  /** latitude */\r\n  6: number;\r\n  /** on_ground */\r\n  8: boolean;\r\n  /** true_track */\r\n  10: number;\r\n  /** geo_altitude */\r\n  13: number;\r\n}\r\n\r\ninterface TrackedAircraft extends TrackedObject {\r\n  altitude: number;\r\n  country: string;\r\n  onGround: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: 'home.page.html',\r\n  styleUrls: ['home.page.scss'],\r\n})\r\nexport class HomePage implements AfterContentInit {\r\n  @ViewChild(NgxGooglemapsTrackingViewComponent, { static: true }) mapView: NgxGooglemapsTrackingViewComponent;\r\n  @ViewChild('infowindowLocation', { static: false }) infowindowLocation: TemplateRef<any>;\r\n\r\n  objectsToTrack: TrackedObject[] = [1, 2, 3, 4, 5] as any;\r\n  symbolPath = '';\r\n\r\n  mapOptions: google.maps.MapOptions = {\r\n    center: {\r\n      lat: 42.504154,\r\n      lng: 12.646361\r\n    },\r\n    zoom: 6,\r\n    mapTypeId: google.maps.MapTypeId.SATELLITE,\r\n  };\r\n\r\n  get isMobile() { return this.platform.is('mobile'); }\r\n\r\n  constructor(private http: HttpClient, public vc: ViewContainerRef, private platform: Platform) {\r\n    // Load svg as symbol path\r\n    loadSvg('assets/baseline-local_airport-24px.svg', (err, svg) => {\r\n      const paths: any[][] = parseSvg(extractSvg.parse(svg));\r\n      const i = paths.findIndex(p => p[0] === 'z');\r\n      this.symbolPath = paths\r\n        .slice(0, i - 1)\r\n        .map(p => p.join(' ')).join(' ');\r\n    });\r\n  }\r\n\r\n  async ngAfterContentInit() {\r\n    await this.mapView.ready();\r\n    this.getAircracts();\r\n    setInterval(() => this.getAircracts(), 10000);\r\n  }\r\n\r\n  getAircracts() {\r\n    const bounds = this.mapView.map.getBounds();\r\n    const ne = bounds.getNorthEast();\r\n    const sw = bounds.getSouthWest();\r\n    this.http.get(`https://opensky-network.org/api/states/all?lamin=${sw.lat()}&lomin=${sw.lng()}&lamax=${ne.lat()}&lomax=${ne.lng()}`)\r\n      .subscribe((response: { states: Aircraft[] }) => {\r\n        this.objectsToTrack = response.states &&\r\n          response.states.map(aircraft => {\r\n            const found = this.objectsToTrack.find(a => a.id === aircraft[0]);\r\n            const trkObj: TrackedAircraft = {\r\n              altitude: aircraft[13],\r\n              id: aircraft[0],\r\n              color: found && found.color || randomColor(),\r\n              country: aircraft[2],\r\n              heading: aircraft[10],\r\n              icon: found && found.icon || this.getIcon(aircraft[10]),\r\n              speed: 1,\r\n              label: {\r\n                text: aircraft[0].toLocaleUpperCase(),\r\n                color: 'white'\r\n              },\r\n              // isOffline: true,\r\n              onGround: aircraft[8],\r\n              position: new google.maps.LatLng(aircraft[6], aircraft[5]),\r\n              // scale: 2,\r\n            };\r\n            return trkObj;\r\n          })\r\n            .filter(a => !a.onGround)\r\n            .splice(0, 50)\r\n          || [];\r\n      });\r\n  }\r\n\r\n  getIsoCode(countryName: string) {\r\n    return i18IsoCountries.getAlpha2Code(countryName, 'en');\r\n  }\r\n\r\n  getIcon(rotation: number): google.maps.Symbol {\r\n    const color = randomColor();\r\n    return {\r\n      path: this.symbolPath,\r\n      labelOrigin: new google.maps.Point(0, 5),\r\n      fillColor: color,\r\n      fillOpacity: .6,\r\n      strokeColor: color,\r\n      strokeOpacity: 1,\r\n      strokeWeight: 2,\r\n      scale: 2,\r\n      rotation\r\n    };\r\n  }\r\n\r\n  openDocumentation() {\r\n    open('https://raschidjfr.github.io/ngx-googlemaps-tracking-view/reference/', '_blank');\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///"}