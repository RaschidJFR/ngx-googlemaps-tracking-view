{"version":3,"sources":["../http/src/backend.ts","../http/src/headers.ts","../http/src/params.ts","../http/src/request.ts","../http/src/response.ts","../http/src/client.ts","../http/src/interceptor.ts","../http/src/jsonp.ts","../http/src/xhr.ts","../http/src/xsrf.ts","../http/src/module.ts","../http/http.ts","node_modules/diacritics/index.js","node_modules/extract-svg-path/browser.js","src/geolocation-marker.js"," [synthetic:es6/util/inherits] ","src/geolocation-marker-exports.js","node_modules/global/window.js","node_modules/i18n-iso-countries/index.js","node_modules/load-svg/index.js","ng://ngx-googlemaps-tracking-view/lib/services/googlemaps-wrapper.ts","ng://ngx-googlemaps-tracking-view/lib/components/center-marker/center-marker.ts","ng://ngx-googlemaps-tracking-view/lib/ngx-googlemaps-tracking-view.component.ts","ng://ngx-googlemaps-tracking-view/lib/components/infowindow/infowindow.component.ts","ng://ngx-googlemaps-tracking-view/lib/components/tracked-object/tracked-object.component.ts","ng://ngx-googlemaps-tracking-view/lib/components/geolocation-button/geolocation-button.ts","ng://ngx-googlemaps-tracking-view/lib/ngx-googlemaps-tracking-view.module.ts","node_modules/parse-headers/parse-headers.js","node_modules/parse-svg-path/index.js","node_modules/randomcolor/randomColor.js","src/app/home/home.page.html","(webpack)/buildin/module.js","node_modules/xhr/index.js","node_modules/xhr/node_modules/once/once.js","node_modules/xml-parse-from-string/index.js","src/app/home/home.module.ts","src/app/home/home.page.scss","src/app/home/home.page.ts"],"names":["parseCookieValue","GeolocationMarker","$jscomp.inherits","outerMarkerOpts","google","markerOpts","opt_outerMarkerOpts","copyOptions_","opt_markerOpts","circleOpts","opt_circleOpts","enableHighAccuracy","maximumAge","opt_map","GeolocationMarker$$module$src$geolocation_marker.invalidPropertiesExpr_.test","?.prototype","setPositionOptions","setMap","map","watchPosition_","navigator","setMarkerOptions","updatePosition_","newPosition","position","mapNotSet","geolocationError_","opt","GeolocationMarker$$module$src$geolocation_marker.DISALLOWED_OPTIONS","target","source","GeolocationMarker$$module$src$geolocation_marker.invalidPropertiesExpr_","root","factory","window","prototype"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAwBA,UAAsB,WAAtB,CAAiC;;;;;;;;;;;;;;;;AAcjC,UAAsB,WAAtB,CAAiC;;;;;;;;;;;;;;;;;;;;;AC9BjC,aAAA,MAAA,GAAA,CAIC;;;;;;;;;;;;AASD,UAAa,WAAb,CAAwB;;;;;AA0BtB,MAAA,WAAA,CAAY,OAAZ,EAAgE;;;;;AAdxD,aAAA,eAAA,GAAuC,IAAI,GAAJ,EAAvC;;;;;AAUA,aAAA,UAAA,GAA4B,IAA5B;;AAKN,YAAI,CAAC,OAAL,EAAc;AACZ,eAAK,OAAL,GAAe,IAAI,GAAJ,EAAf;AACD,SAFD,MAEO,IAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AACtC,eAAK,QAAL;AAAa;;;AAAG,gBAAA;AACd,iBAAK,OAAL,GAAe,IAAI,GAAJ,EAAf;AACA,YAAA,OAAO,CAAC,KAAR,CAAc,IAAd,EAAoB,OAApB;AAA2B;;;;AAAC,YAAA,IAAI,IAAA;;oBACxB,KAAK,GAAG,IAAI,CAAC,OAAL,CAAa,GAAb,C;;AACd,kBAAI,KAAK,GAAG,CAAZ,EAAe;;sBACP,IAAI,GAAG,IAAI,CAAC,KAAL,CAAW,CAAX,EAAc,KAAd,C;;;sBACP,GAAG,GAAG,IAAI,CAAC,WAAL,E;;;sBACN,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,CAAnB,EAAsB,IAAtB,E;AACd,qBAAK,sBAAL,CAA4B,IAA5B,EAAkC,GAAlC;;AACA,oBAAI,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAJ,EAA2B;AACzB;AAAA,uBAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAA,CAAwB,IAAxB,CAA6B,KAA7B;AACD,iBAFD,MAEO;AACL,uBAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,EAAsB,CAAC,KAAD,CAAtB;AACD;AACF;AACF,aAbD;AAcD,WAhBD;AAiBD,SAlBM,MAkBA;AACL,eAAK,QAAL;AAAa;;;AAAG,gBAAA;AACd,iBAAK,OAAL,GAAe,IAAI,GAAJ,EAAf;AACA,YAAA,MAAM,CAAC,IAAP,CAAY,OAAZ,EAAqB,OAArB;AAA4B;;;;AAAC,YAAA,IAAI,IAAA;;kBAC3B,MAAM,GAAoB,OAAO,CAAC,IAAD,C;;;oBAC/B,GAAG,GAAG,IAAI,CAAC,WAAL,E;;AACZ,kBAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,gBAAA,MAAM,GAAG,CAAC,MAAD,CAAT;AACD;;AACD,kBAAI,MAAM,CAAC,MAAP,GAAgB,CAApB,EAAuB;AACrB,qBAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,EAAsB,MAAtB;AACA,qBAAK,sBAAL,CAA4B,IAA5B,EAAkC,GAAlC;AACD;AACF,aAVD;AAWD,WAbD;AAcD;AACF;;;;;;;;;;AASD,MAAA,GAAG,CAAC,IAAD,EAAa;AACd,aAAK,IAAL;AAEA,eAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,WAAL,EAAjB,CAAP;AACD;;;;;;;;;;AASD,MAAA,GAAG,CAAC,IAAD,EAAa;AACd,aAAK,IAAL;;;cAEM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,WAAL,EAAjB,C;AACf,eAAO,MAAM,IAAI,MAAM,CAAC,MAAP,GAAgB,CAA1B,GAA8B,MAAM,CAAC,CAAD,CAApC,GAA0C,IAAjD;AACD;;;;;;;;AAOD,MAAA,IAAI,GAAA;AACF,aAAK,IAAL;AAEA,eAAO,KAAK,CAAC,IAAN,CAAW,KAAK,eAAL,CAAqB,MAArB,EAAX,CAAP;AACD;;;;;;;;;;AASD,MAAA,MAAM,CAAC,IAAD,EAAa;AACjB,aAAK,IAAL;AAEA,eAAO,KAAK,OAAL,CAAa,GAAb,CAAiB,IAAI,CAAC,WAAL,EAAjB,KAAwC,IAA/C;AACD;;;;;;;;;;;;AAYD,MAAA,MAAM,CAAC,IAAD,EAAe,KAAf,EAAqC;AACzC,eAAO,KAAK,KAAL,CAAW;AAAC,UAAA,IAAD;AAAO,UAAA,KAAP;AAAc,UAAA,EAAE,EAAE;AAAlB,SAAX,CAAP;AACD;;;;;;;;;;;;;AAWD,MAAA,GAAG,CAAC,IAAD,EAAe,KAAf,EAAqC;AACtC,eAAO,KAAK,KAAL,CAAW;AAAC,UAAA,IAAD;AAAO,UAAA,KAAP;AAAc,UAAA,EAAE,EAAE;AAAlB,SAAX,CAAP;AACD;;;;;;;;;;;AASD,MAAA,MAAM,CAAE,IAAF,EAAgB,KAAhB,EAAuC;AAC3C,eAAO,KAAK,KAAL,CAAW;AAAC,UAAA,IAAD;AAAO,UAAA,KAAP;AAAc,UAAA,EAAE,EAAE;AAAlB,SAAX,CAAP;AACD;;;;;;;;;AAEO,MAAA,sBAAsB,CAAC,IAAD,EAAe,MAAf,EAA6B;AACzD,YAAI,CAAC,KAAK,eAAL,CAAqB,GAArB,CAAyB,MAAzB,CAAL,EAAuC;AACrC,eAAK,eAAL,CAAqB,GAArB,CAAyB,MAAzB,EAAiC,IAAjC;AACD;AACF;;;;;;;AAEO,MAAA,IAAI,GAAA;AACV,YAAI,CAAC,CAAC,KAAK,QAAX,EAAqB;AACnB,cAAI,KAAK,QAAL,YAAyB,WAA7B,EAA0C;AACxC,iBAAK,QAAL,CAAc,KAAK,QAAnB;AACD,WAFD,MAEO;AACL,iBAAK,QAAL;AACD;;AACD,eAAK,QAAL,GAAgB,IAAhB;;AACA,cAAI,CAAC,CAAC,KAAK,UAAX,EAAuB;AACrB,iBAAK,UAAL,CAAgB,OAAhB;AAAuB;;;;AAAC,YAAA,MAAM,IAAI,KAAK,WAAL,CAAiB,MAAjB,CAAlC;AACA,iBAAK,UAAL,GAAkB,IAAlB;AACD;AACF;AACF;;;;;;;;AAEO,MAAA,QAAQ,CAAC,KAAD,EAAmB;AACjC,QAAA,KAAK,CAAC,IAAN;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,KAAK,CAAC,OAAN,CAAc,IAAd,EAAX,EAAiC,OAAjC;AAAwC;;;;AAAC,QAAA,GAAG,IAAA;AAC1C,eAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB;AAAoB;AAAE,UAAA,KAAK,CAAC,OAAN,CAAc,GAAd,CAAkB,GAAlB,CAAtB;AACA,eAAK,eAAL,CAAqB,GAArB,CAAyB,GAAzB;AAA4B;AAAE,UAAA,KAAK,CAAC,eAAN,CAAsB,GAAtB,CAA0B,GAA1B,CAA9B;AACD,SAHD;AAID;;;;;;;;AAEO,MAAA,KAAK,CAAC,MAAD,EAAe;;cACpB,KAAK,GAAG,IAAI,WAAJ,E;AACd,QAAA,KAAK,CAAC,QAAN,GACK,CAAC,CAAC,KAAK,QAAP,IAAmB,KAAK,QAAL,YAAyB,WAA7C,GAA4D,KAAK,QAAjE,GAA4E,IADhF;AAEA,QAAA,KAAK,CAAC,UAAN,GAAmB,CAAC,KAAK,UAAL,IAAmB,EAApB,EAAwB,MAAxB,CAA+B,CAAC,MAAD,CAA/B,CAAnB;AACA,eAAO,KAAP;AACD;;;;;;;;AAEO,MAAA,WAAW,CAAC,MAAD,EAAe;;cAC1B,GAAG,GAAG,MAAM,CAAC,IAAP,CAAY,WAAZ,E;;AACZ,gBAAQ,MAAM,CAAC,EAAf;AACE,eAAK,GAAL;AACA,eAAK,GAAL;;gBACM,KAAK;AAAA;AAAG,YAAA,MAAM,CAAC,K;;AACnB,gBAAI,OAAO,KAAP,KAAiB,QAArB,EAA+B;AAC7B,cAAA,KAAK,GAAG,CAAC,KAAD,CAAR;AACD;;AACD,gBAAI,KAAK,CAAC,MAAN,KAAiB,CAArB,EAAwB;AACtB;AACD;;AACD,iBAAK,sBAAL,CAA4B,MAAM,CAAC,IAAnC,EAAyC,GAAzC;;;kBACM,IAAI,GAAG,CAAC,MAAM,CAAC,EAAP,KAAc,GAAd,GAAoB,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAApB,GAA4C,SAA7C,KAA2D,E;AACxE,YAAA,IAAI,CAAC,IAAL,CAAU,GAAG,KAAb;AACA,iBAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,EAAsB,IAAtB;AACA;;AACF,eAAK,GAAL;;kBACQ,QAAQ;AAAA;AAAG,YAAA,MAAM,CAAC,K;;AACxB,gBAAI,CAAC,QAAL,EAAe;AACb,mBAAK,OAAL,CAAa,MAAb,CAAoB,GAApB;AACA,mBAAK,eAAL,CAAqB,MAArB,CAA4B,GAA5B;AACD,aAHD,MAGO;;kBACD,QAAQ,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,C;;AACf,kBAAI,CAAC,QAAL,EAAe;AACb;AACD;;AACD,cAAA,QAAQ,GAAG,QAAQ,CAAC,MAAT;AAAe;;;;AAAC,cAAA,KAAK,IAAI,QAAQ,CAAC,OAAT,CAAiB,KAAjB,MAA4B,CAAC,CAAtD,CAAX;;AACA,kBAAI,QAAQ,CAAC,MAAT,KAAoB,CAAxB,EAA2B;AACzB,qBAAK,OAAL,CAAa,MAAb,CAAoB,GAApB;AACA,qBAAK,eAAL,CAAqB,MAArB,CAA4B,GAA5B;AACD,eAHD,MAGO;AACL,qBAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,EAAsB,QAAtB;AACD;AACF;;AACD;AAjCJ;AAmCD;;;;;;;;AAKD,MAAA,OAAO,CAAC,EAAD,EAA6C;AAClD,aAAK,IAAL;AACA,QAAA,KAAK,CAAC,IAAN,CAAW,KAAK,eAAL,CAAqB,IAArB,EAAX,EACK,OADL;AACY;;;;AAAC,QAAA,GAAG,IAAI,EAAE;AAAA;AAAC,aAAK,eAAL,CAAqB,GAArB,CAAyB,GAAzB,CAAD;AAA8B;AAAI,aAAK,OAAL,CAAa,GAAb,CAAiB,GAAjB,CAAlC,CADtB;AAED;;AA7OqB;;;;;;;;;;;;;;;;;;;;;;;;;;;ACNxB,aAAA,kBAAA,GAAA,CAMC;;;;;;;;;;;;;;;AAYD,UAAa,oBAAb,CAAiC;;;;;;AAM/B,MAAA,SAAS,CAAC,GAAD,EAAY;AAAY,eAAO,gBAAgB,CAAC,GAAD,CAAvB;AAA+B;;;;;;;;AAOhE,MAAA,WAAW,CAAC,KAAD,EAAc;AAAY,eAAO,gBAAgB,CAAC,KAAD,CAAvB;AAAiC;;;;;;;;AAOtE,MAAA,SAAS,CAAC,GAAD,EAAY;AAAY,eAAO,kBAAkB,CAAC,GAAD,CAAzB;AAAiC;;;;;;;;AAOlE,MAAA,WAAW,CAAC,KAAD,EAAc;AAAI,eAAO,kBAAkB,CAAC,KAAD,CAAzB;AAAmC;;AA3BjC;;;;;;;;AA+BjC,aAAS,WAAT,CAAqB,SAArB,EAAwC,KAAxC,EAAiE;;YACzD,GAAG,GAAG,IAAI,GAAJ,E;;AACZ,UAAI,SAAS,CAAC,MAAV,GAAmB,CAAvB,EAA0B;;cAClB,MAAM,GAAa,SAAS,CAAC,KAAV,CAAgB,GAAhB,C;AACzB,QAAA,MAAM,CAAC,OAAP;AAAc;;;;AAAE,QAAA,KAAD,IAAc;;gBACrB,KAAK,GAAG,KAAK,CAAC,OAAN,CAAc,GAAd,C;gBACR,CAAC,GAAD,EAAM,GAAN,IAAuB,KAAK,IAAI,CAAC,CAAV,GACzB,CAAC,KAAK,CAAC,SAAN,CAAgB,KAAhB,CAAD,EAAyB,EAAzB,CADyB,GAEzB,CAAC,KAAK,CAAC,SAAN,CAAgB,KAAK,CAAC,KAAN,CAAY,CAAZ,EAAe,KAAf,CAAhB,CAAD,EAAyC,KAAK,CAAC,WAAN,CAAkB,KAAK,CAAC,KAAN,CAAY,KAAK,GAAG,CAApB,CAAlB,CAAzC,C;;;gBACE,IAAI,GAAG,GAAG,CAAC,GAAJ,CAAQ,GAAR,KAAgB,E;AAC7B,UAAA,IAAI,CAAC,IAAL,CAAU,GAAV;AACA,UAAA,GAAG,CAAC,GAAJ,CAAQ,GAAR,EAAa,IAAb;AACD,SARD;AASD;;AACD,aAAO,GAAP;AACD;;;;;;;AACD,aAAS,gBAAT,CAA0B,CAA1B,EAAmC;AACjC,aAAO,kBAAkB,CAAC,CAAD,CAAlB,CACF,OADE,CACM,OADN,EACe,GADf,EAEF,OAFE,CAEM,OAFN,EAEe,GAFf,EAGF,OAHE,CAGM,OAHN,EAGe,GAHf,EAIF,OAJE,CAIM,OAJN,EAIe,GAJf,EAKF,OALE,CAKM,OALN,EAKe,GALf,EAMF,OANE,CAMM,OANN,EAMe,GANf,EAOF,OAPE,CAOM,OAPN,EAOe,GAPf,EAQF,OARE,CAQM,OARN,EAQe,GARf,EASF,OATE,CASM,OATN,EASe,GATf,CAAP;AAUD;;;;;;AAED,aAAA,QAAA,GAAA,CAIC;;;;;;;;;;;AAMD,aAAA,iBAAA,GAAA,CAYC;;;;;;;;;;;;;AAUD,UAAa,UAAb,CAAuB;;;;AAMrB,MAAA,WAAA,CAAY,OAAA;AAAA;AAA6B,QAAzC,EAAgE;AAHxD,aAAA,OAAA,GAAyB,IAAzB;AACA,aAAA,SAAA,GAA6B,IAA7B;AAGN,aAAK,OAAL,GAAe,OAAO,CAAC,OAAR,IAAmB,IAAI,oBAAJ,EAAlC;;AACA,YAAI,CAAC,CAAC,OAAO,CAAC,UAAd,EAA0B;AACxB,cAAI,CAAC,CAAC,OAAO,CAAC,UAAd,EAA0B;AACxB,kBAAM,IAAI,KAAJ,kDAAN;AACD;;AACD,eAAK,GAAL,GAAW,WAAW,CAAC,OAAO,CAAC,UAAT,EAAqB,KAAK,OAA1B,CAAtB;AACD,SALD,MAKO,IAAI,CAAC,CAAC,OAAO,CAAC,UAAd,EAA0B;AAC/B,eAAK,GAAL,GAAW,IAAI,GAAJ,EAAX;AACA,UAAA,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,UAApB,EAAgC,OAAhC;AAAuC;;;;AAAC,UAAA,GAAG,IAAA;;kBACnC,KAAK;AAAG;AAAC,YAAA,OAAO,CAAC,UAAT,CAA4B,GAA5B,C;;AACd;AAAA,iBAAK,GAAL,CAAW,GAAX,CAAe,GAAf,EAAoB,KAAK,CAAC,OAAN,CAAc,KAAd,IAAuB,KAAvB,GAA+B,CAAC,KAAD,CAAnD;AACD,WAHD;AAID,SANM,MAMA;AACL,eAAK,GAAL,GAAW,IAAX;AACD;AACF;;;;;;;;;AAQD,MAAA,GAAG,CAAC,KAAD,EAAc;AACf,aAAK,IAAL;AACA,eAAO;AAAA;AAAA,eAAK,GAAL,CAAW,GAAX,CAAe,KAAf;AAAP;AACD;;;;;;;;;AAQD,MAAA,GAAG,CAAC,KAAD,EAAc;AACf,aAAK,IAAL;;;cACM,GAAG;AAAG;AAAA,aAAK,GAAL,CAAW,GAAX,CAAe,KAAf,C;AACZ,eAAO,CAAC,CAAC,GAAF,GAAQ,GAAG,CAAC,CAAD,CAAX,GAAiB,IAAxB;AACD;;;;;;;;;AAQD,MAAA,MAAM,CAAC,KAAD,EAAc;AAClB,aAAK,IAAL;AACA,eAAO;AAAA;AAAA,eAAK,GAAL,CAAW,GAAX,CAAe,KAAf,KAAyB;AAAhC;AACD;;;;;;;AAMD,MAAA,IAAI,GAAA;AACF,aAAK,IAAL;AACA,eAAO,KAAK,CAAC,IAAN;AAAW;AAAA,aAAK,GAAL,CAAW,IAAX,EAAX,CAAP;AACD;;;;;;;;;AAQD,MAAA,MAAM,CAAC,KAAD,EAAgB,KAAhB,EAA6B;AAAgB,eAAO,KAAK,KAAL,CAAW;AAAC,UAAA,KAAD;AAAQ,UAAA,KAAR;AAAe,UAAA,EAAE,EAAE;AAAnB,SAAX,CAAP;AAA6C;;;;;;;;;AAQhG,MAAA,GAAG,CAAC,KAAD,EAAgB,KAAhB,EAA6B;AAAgB,eAAO,KAAK,KAAL,CAAW;AAAC,UAAA,KAAD;AAAQ,UAAA,KAAR;AAAe,UAAA,EAAE,EAAE;AAAnB,SAAX,CAAP;AAA6C;;;;;;;;;;AAS7F,MAAA,MAAM,CAAE,KAAF,EAAiB,KAAjB,EAA+B;AAAgB,eAAO,KAAK,KAAL,CAAW;AAAC,UAAA,KAAD;AAAQ,UAAA,KAAR;AAAe,UAAA,EAAE,EAAE;AAAnB,SAAX,CAAP;AAA6C;;;;;;;;AAMlG,MAAA,QAAQ,GAAA;AACN,aAAK,IAAL;AACA,eAAO,KAAK,IAAL,GACF,GADE;AACC;;;;AAAC,QAAA,GAAG,IAAA;;gBACA,IAAI,GAAG,KAAK,OAAL,CAAa,SAAb,CAAuB,GAAvB,C;AACb,iBAAO;AAAA;;AAAA;AAAA,iBAAK,GAAL,CAAW,GAAX,CAAe,GAAf,CAAA,CAAsB,GAAtB;AAAyB;;;;AAAC,YAAA,KAAK,IAAI,IAAI,GAAG,GAAP,GAAa,KAAK,OAAL,CAAa,WAAb,CAAyB,KAAzB,CAAhD,EACF,IADE,CACG,GADH;AAAP;AAED,SALE,EAMF,IANE,CAMG,GANH,CAAP;AAOD;;;;;;;;AAEO,MAAA,KAAK,CAAC,MAAD,EAAe;;cACpB,KAAK,GAAG,IAAI,UAAJ;AAAc;AAAC;AAAE,UAAA,OAAO,EAAE,KAAK;AAAhB,SAAf,C;AACd,QAAA,KAAK,CAAC,SAAN,GAAkB,KAAK,SAAL,IAAkB,IAApC;AACA,QAAA,KAAK,CAAC,OAAN,GAAgB,CAAC,KAAK,OAAL,IAAgB,EAAjB,EAAqB,MAArB,CAA4B,CAAC,MAAD,CAA5B,CAAhB;AACA,eAAO,KAAP;AACD;;;;;;;AAEO,MAAA,IAAI,GAAA;AACV,YAAI,KAAK,GAAL,KAAa,IAAjB,EAAuB;AACrB,eAAK,GAAL,GAAW,IAAI,GAAJ,EAAX;AACD;;AACD,YAAI,KAAK,SAAL,KAAmB,IAAvB,EAA6B;AAC3B,eAAK,SAAL,CAAe,IAAf;AACA,eAAK,SAAL,CAAe,IAAf,GAAsB,OAAtB;AAA6B;;;;AAAC,UAAA,GAAG;AAAI;AAAA,eAAK,GAAL,CAAW,GAAX,CAAe,GAAf;AAAkB;;AAAE;;AAAA;AAAA,eAAK,SAAL,CAAiB,GAAjB,CAAuB,GAAvB,CAA2B,GAA3B,CAApB,CAArC;;AACA;AAAA,eAAK,OAAL,CAAe,OAAf;AAAsB;;;;AAAC,UAAA,MAAM,IAAA;AAC3B,oBAAQ,MAAM,CAAC,EAAf;AACE,mBAAK,GAAL;AACA,mBAAK,GAAL;;sBACQ,IAAI,GAAG,CAAC,MAAM,CAAC,EAAP,KAAc,GAAd;AAAoB;AAAA,qBAAK,GAAL,CAAW,GAAX,CAAe,MAAM,CAAC,KAAtB,CAApB,GAAmD,SAApD,KAAkE,E;AAC/E,gBAAA,IAAI,CAAC,IAAL;AAAS;AAAC,gBAAA,MAAM,CAAC,KAAjB;;AACA;AAAA,qBAAK,GAAL,CAAW,GAAX,CAAe,MAAM,CAAC,KAAtB,EAA6B,IAA7B;AACA;;AACF,mBAAK,GAAL;AACE,oBAAI,MAAM,CAAC,KAAP,KAAiB,SAArB,EAAgC;;sBAC1B,IAAI;AAAG;AAAA,uBAAK,GAAL,CAAW,GAAX,CAAe,MAAM,CAAC,KAAtB,KAAgC,E;;;wBACrC,GAAG,GAAG,IAAI,CAAC,OAAL,CAAa,MAAM,CAAC,KAApB,C;;AACZ,sBAAI,GAAG,KAAK,CAAC,CAAb,EAAgB;AACd,oBAAA,IAAI,CAAC,MAAL,CAAY,GAAZ,EAAiB,CAAjB;AACD;;AACD,sBAAI,IAAI,CAAC,MAAL,GAAc,CAAlB,EAAqB;AACnB;AAAA,yBAAK,GAAL,CAAW,GAAX,CAAe,MAAM,CAAC,KAAtB,EAA6B,IAA7B;AACD,mBAFD,MAEO;AACL;AAAA,yBAAK,GAAL,CAAW,MAAX,CAAkB,MAAM,CAAC,KAAzB;AACD;AACF,iBAXD,MAWO;AACL;AAAA,uBAAK,GAAL,CAAW,MAAX,CAAkB,MAAM,CAAC,KAAzB;AACA;AACD;;AAtBL;AAwBD,WAzBD;AA0BA,eAAK,SAAL,GAAiB,KAAK,OAAL,GAAe,IAAhC;AACD;AACF;;AArJoB;;;;;;;;;;;;;;;;AC7GvB,aAAA,eAAA,GAAA,CAMC;;;;;;;;;;AAKD,aAAS,aAAT,CAAuB,MAAvB,EAAqC;AACnC,cAAQ,MAAR;AACE,aAAK,QAAL;AACA,aAAK,KAAL;AACA,aAAK,MAAL;AACA,aAAK,SAAL;AACA,aAAK,OAAL;AACE,iBAAO,KAAP;;AACF;AACE,iBAAO,IAAP;AARJ;AAUD;;;;;;;;;;AAOD,aAAS,aAAT,CAAuB,KAAvB,EAAiC;AAC/B,aAAO,OAAO,WAAP,KAAuB,WAAvB,IAAsC,KAAK,YAAY,WAA9D;AACD;;;;;;;;;;AAOD,aAAS,MAAT,CAAgB,KAAhB,EAA0B;AACxB,aAAO,OAAO,IAAP,KAAgB,WAAhB,IAA+B,KAAK,YAAY,IAAvD;AACD;;;;;;;;;;AAOD,aAAS,UAAT,CAAoB,KAApB,EAA8B;AAC5B,aAAO,OAAO,QAAP,KAAoB,WAApB,IAAmC,KAAK,YAAY,QAA3D;AACD;;;;;;;;;;;;;;AAYD,UAAa,WAAb,CAAwB;;;;;;;AA0EtB,MAAA,WAAA,CACI,MADJ,EAC6B,GAD7B,EAC0C,KAD1C,EAQI,MARJ,EAcK;AAbwB,aAAA,GAAA,GAAA,GAAA;;;;;;;;;AAnEpB,aAAA,IAAA,GAAe,IAAf;;;;;;;;AAcA,aAAA,cAAA,GAA0B,KAA1B;;;;;AAKA,aAAA,eAAA,GAA2B,KAA3B;;;;;;;;AAQA,aAAA,YAAA,GAAmD,MAAnD;AAsDP,aAAK,MAAL,GAAc,MAAM,CAAC,WAAP,EAAd,CADG,C;;;;;YAIC,O,CAJD,C;;;AAQH,YAAI,aAAa,CAAC,KAAK,MAAN,CAAb,IAA8B,CAAC,CAAC,MAApC,EAA4C;;AAE1C,eAAK,IAAL,GAAa,KAAK,KAAK,SAAX;AAAoB;AAAI,UAAA,KAAxB,GAAqC,IAAjD;AACA,UAAA,OAAO,GAAG,MAAV;AACD,SAJD,MAIO;;AAEL,UAAA,OAAO;AAAA;AAAG,UAAA,KAAV;AACD,SAfE,C;;;AAkBH,YAAI,OAAJ,EAAa;;AAEX,eAAK,cAAL,GAAsB,CAAC,CAAC,OAAO,CAAC,cAAhC;AACA,eAAK,eAAL,GAAuB,CAAC,CAAC,OAAO,CAAC,eAAjC,CAHW,C;;AAMX,cAAI,CAAC,CAAC,OAAO,CAAC,YAAd,EAA4B;AAC1B,iBAAK,YAAL,GAAoB,OAAO,CAAC,YAA5B;AACD,WARU,C;;;AAWX,cAAI,CAAC,CAAC,OAAO,CAAC,OAAd,EAAuB;AACrB,iBAAK,OAAL,GAAe,OAAO,CAAC,OAAvB;AACD;;AAED,cAAI,CAAC,CAAC,OAAO,CAAC,MAAd,EAAsB;AACpB,iBAAK,MAAL,GAAc,OAAO,CAAC,MAAtB;AACD;AACF,SApCE,C;;;AAuCH,YAAI,CAAC,KAAK,OAAV,EAAmB;AACjB,eAAK,OAAL,GAAe,IAAI,WAAJ,EAAf;AACD,SAzCE,C;;;AA4CH,YAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,eAAK,MAAL,GAAc,IAAI,UAAJ,EAAd;AACA,eAAK,aAAL,GAAqB,GAArB;AACD,SAHD,MAGO;;;;gBAEC,MAAM,GAAG,KAAK,MAAL,CAAY,QAAZ,E;;AACf,cAAI,MAAM,CAAC,MAAP,KAAkB,CAAtB,EAAyB;;AAEvB,iBAAK,aAAL,GAAqB,GAArB;AACD,WAHD,MAGO;;;;kBAEC,IAAI,GAAG,GAAG,CAAC,OAAJ,CAAY,GAAZ,C,CAFR,C;;;;;;;;;;kBAUC,GAAG,GAAW,IAAI,KAAK,CAAC,CAAV,GAAc,GAAd,GAAqB,IAAI,GAAG,GAAG,CAAC,MAAJ,GAAa,CAApB,GAAwB,GAAxB,GAA8B,E;AACvE,iBAAK,aAAL,GAAqB,GAAG,GAAG,GAAN,GAAY,MAAjC;AACD;AACF;AACF;;;;;;;;AAMD,MAAA,aAAa,GAAA;;AAEX,YAAI,KAAK,IAAL,KAAc,IAAlB,EAAwB;AACtB,iBAAO,IAAP;AACD,SAJU,C;;;;AAOX,YAAI,aAAa,CAAC,KAAK,IAAN,CAAb,IAA4B,MAAM,CAAC,KAAK,IAAN,CAAlC,IAAiD,UAAU,CAAC,KAAK,IAAN,CAA3D,IACA,OAAO,KAAK,IAAZ,KAAqB,QADzB,EACmC;AACjC,iBAAO,KAAK,IAAZ;AACD,SAVU,C;;;AAYX,YAAI,KAAK,IAAL,YAAqB,UAAzB,EAAqC;AACnC,iBAAO,KAAK,IAAL,CAAU,QAAV,EAAP;AACD,SAdU,C;;;AAgBX,YAAI,OAAO,KAAK,IAAZ,KAAqB,QAArB,IAAiC,OAAO,KAAK,IAAZ,KAAqB,SAAtD,IACA,KAAK,CAAC,OAAN,CAAc,KAAK,IAAnB,CADJ,EAC8B;AAC5B,iBAAO,IAAI,CAAC,SAAL,CAAe,KAAK,IAApB,CAAP;AACD,SAnBU,C;;;AAqBX,eAAO;AAAA;AAAC,eAAK,IAAN,CAAmB,QAAnB;AAAP;AACD;;;;;;;;;;AAQD,MAAA,uBAAuB,GAAA;;AAErB,YAAI,KAAK,IAAL,KAAc,IAAlB,EAAwB;AACtB,iBAAO,IAAP;AACD,SAJoB,C;;;AAMrB,YAAI,UAAU,CAAC,KAAK,IAAN,CAAd,EAA2B;AACzB,iBAAO,IAAP;AACD,SARoB,C;;;;AAWrB,YAAI,MAAM,CAAC,KAAK,IAAN,CAAV,EAAuB;AACrB,iBAAO,KAAK,IAAL,CAAU,IAAV,IAAkB,IAAzB;AACD,SAboB,C;;;AAerB,YAAI,aAAa,CAAC,KAAK,IAAN,CAAjB,EAA8B;AAC5B,iBAAO,IAAP;AACD,SAjBoB,C;;;;AAoBrB,YAAI,OAAO,KAAK,IAAZ,KAAqB,QAAzB,EAAmC;AACjC,iBAAO,YAAP;AACD,SAtBoB,C;;;AAwBrB,YAAI,KAAK,IAAL,YAAqB,UAAzB,EAAqC;AACnC,iBAAO,iDAAP;AACD,SA1BoB,C;;;AA4BrB,YAAI,OAAO,KAAK,IAAZ,KAAqB,QAArB,IAAiC,OAAO,KAAK,IAAZ,KAAqB,QAAtD,IACA,KAAK,CAAC,OAAN,CAAc,KAAK,IAAnB,CADJ,EAC8B;AAC5B,iBAAO,kBAAP;AACD,SA/BoB,C;;;AAiCrB,eAAO,IAAP;AACD;;;;;;;AA2BD,MAAA,KAAK,CAAC,MAAA,GAWF,EAXC,EAWC;;;;;cAGE,MAAM,GAAG,MAAM,CAAC,MAAP,IAAiB,KAAK,M;;;cAC/B,GAAG,GAAG,MAAM,CAAC,GAAP,IAAc,KAAK,G;;;cACzB,YAAY,GAAG,MAAM,CAAC,YAAP,IAAuB,KAAK,Y,CAL7C,C;;;;;;;cAWE,IAAI,GAAI,MAAM,CAAC,IAAP,KAAgB,SAAjB,GAA8B,MAAM,CAAC,IAArC,GAA4C,KAAK,I,CAX1D,C;;;;;cAeE,eAAe,GAChB,MAAM,CAAC,eAAP,KAA2B,SAA5B,GAAyC,MAAM,CAAC,eAAhD,GAAkE,KAAK,e;;;cACrE,cAAc,GACf,MAAM,CAAC,cAAP,KAA0B,SAA3B,GAAwC,MAAM,CAAC,cAA/C,GAAgE,KAAK,c,CAlBrE,C;;;;;YAsBA,OAAO,GAAG,MAAM,CAAC,OAAP,IAAkB,KAAK,O;;;YACjC,MAAM,GAAG,MAAM,CAAC,MAAP,IAAiB,KAAK,M,CAvB/B,C;;AA0BJ,YAAI,MAAM,CAAC,UAAP,KAAsB,SAA1B,EAAqC;;AAEnC,UAAA,OAAO,GACH,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,UAAnB,EACK,MADL;AACW;;;;;AAAC,WAAC,OAAD,EAAU,IAAV,KAAmB,OAAO,CAAC,GAAR,CAAY,IAAZ;AAAkB;AAAA,UAAA,MAAM,CAAC,UAAP,CAAoB,IAApB,CAAlB,CAD/B,EAC6E,OAD7E,CADJ;AAGD,SA/BG,C;;;AAkCJ,YAAI,MAAM,CAAC,SAAX,EAAsB;;AAEpB,UAAA,MAAM,GAAG,MAAM,CAAC,IAAP,CAAY,MAAM,CAAC,SAAnB,EACK,MADL;AACW;;;;;AAAC,WAAC,MAAD,EAAS,KAAT,KAAmB,MAAM,CAAC,GAAP,CAAW,KAAX;AAAkB;AAAA,UAAA,MAAM,CAAC,SAAP,CAAmB,KAAnB,CAAlB,CAD/B,EAC6E,MAD7E,CAAT;AAED,SAtCG,C;;;AAyCJ,eAAO,IAAI,WAAJ,CACH,MADG,EACK,GADL,EACU,IADV,EACgB;AACI,UAAA,MADJ;AACY,UAAA,OADZ;AACqB,UAAA,cADrB;AACqC,UAAA,YADrC;AACmD,UAAA;AADnD,SADhB,CAAP;AAID;;AApTqB;;;;;;;;;;;;;;;AC1DtB,MAAA,IAAA,EAAA,C;;;;;AAKA,MAAA,cAAA,EAAA,C;;;;;AAKA,MAAA,cAAA,EAAA,C;;;;;AAKA,MAAA,gBAAA,EAAA,C;;;;;AAKA,MAAA,QAAA,EAAA,C;;;;;AAKA,MAAA,IAAA,EAAA;;;;;;;;;;;;;;;AAQF,aAAA,iBAAA,GAAA,CAgBC;;;;;;;;;;;AAOD,aAAA,yBAAA,GAAA,CASC;;;;;;;;;;;AAOD,aAAA,uBAAA,GAAA,CAEC;;;;;;;;;;;;;AASD,aAAA,aAAA,GAAA,CAA4D;;;;;;;;;;;;;;;AAU5D,aAAA,aAAA,GAAA,CAA+D;;;;;;;;;;;;;;AAU/D,aAAA,kBAAA,GAAA,CAGC;;;;;;;;;;;AAiBD,UAAsB,gBAAtB,CAAsC;;;;;;;;;;AAwCpC,MAAA,WAAA,CACI,IADJ,EAOI,aAAA,GAAwB,GAP5B,EAOiC,iBAAA,GAA4B,IAP7D,EAOiE;;;AAG/D,aAAK,OAAL,GAAe,IAAI,CAAC,OAAL,IAAgB,IAAI,WAAJ,EAA/B;AACA,aAAK,MAAL,GAAc,IAAI,CAAC,MAAL,KAAgB,SAAhB,GAA4B,IAAI,CAAC,MAAjC,GAA0C,aAAxD;AACA,aAAK,UAAL,GAAkB,IAAI,CAAC,UAAL,IAAmB,iBAArC;AACA,aAAK,GAAL,GAAW,IAAI,CAAC,GAAL,IAAY,IAAvB,CAN+D,C;;AAS/D,aAAK,EAAL,GAAU,KAAK,MAAL,IAAe,GAAf,IAAsB,KAAK,MAAL,GAAc,GAA9C;AACD;;AAzDmC;;;;;;;;;;;;;;AAqEtC,UAAa,kBAAb,SAAwC,gBAAxC,CAAwD;;;;;AAItD,MAAA,WAAA,CAAY,IAAA,GAKR,EALJ,EAKM;AACJ,cAAM,IAAN;AAGO,aAAA,IAAA,GAAqC,aAAa,CAAC,cAAnD;AAFR;;;;;;;;;AAQD,MAAA,KAAK,CAAC,MAAA,GAAuF,EAAxF,EAA0F;;;AAI7F,eAAO,IAAI,kBAAJ,CAAuB;AAC5B,UAAA,OAAO,EAAE,MAAM,CAAC,OAAP,IAAkB,KAAK,OADJ;AAE5B,UAAA,MAAM,EAAE,MAAM,CAAC,MAAP,KAAkB,SAAlB,GAA8B,MAAM,CAAC,MAArC,GAA8C,KAAK,MAF/B;AAG5B,UAAA,UAAU,EAAE,MAAM,CAAC,UAAP,IAAqB,KAAK,UAHV;AAI5B,UAAA,GAAG,EAAE,MAAM,CAAC,GAAP,IAAc,KAAK,GAAnB,IAA0B;AAJH,SAAvB,CAAP;AAMD;;AA7BqD;;;;;;;;;;;;;;;AAyCxD,UAAa,YAAb,SAAqC,gBAArC,CAAqD;;;;;AASnD,MAAA,WAAA,CAAY,IAAA,GAER,EAFJ,EAEM;AACJ,cAAM,IAAN;AAIO,aAAA,IAAA,GAA+B,aAAa,CAAC,QAA7C;AAHP,aAAK,IAAL,GAAY,IAAI,CAAC,IAAL,KAAc,SAAd,GAA0B,IAAI,CAAC,IAA/B,GAAsC,IAAlD;AACD;;;;;;;AAUD,MAAA,KAAK,CAAC,MAAA,GAEF,EAFC,EAEC;AACJ,eAAO,IAAI,YAAJ,CAAsB;AAC3B,UAAA,IAAI,EAAG,MAAM,CAAC,IAAP,KAAgB,SAAjB,GAA8B,MAAM,CAAC,IAArC,GAA4C,KAAK,IAD5B;AAE3B,UAAA,OAAO,EAAE,MAAM,CAAC,OAAP,IAAkB,KAAK,OAFL;AAG3B,UAAA,MAAM,EAAG,MAAM,CAAC,MAAP,KAAkB,SAAnB,GAAgC,MAAM,CAAC,MAAvC,GAAgD,KAAK,MAHlC;AAI3B,UAAA,UAAU,EAAE,MAAM,CAAC,UAAP,IAAqB,KAAK,UAJX;AAK3B,UAAA,GAAG,EAAE,MAAM,CAAC,GAAP,IAAc,KAAK,GAAnB,IAA0B;AALJ,SAAtB,CAAP;AAOD;;AAlCkD;;;;;;;;;;;;;;;;;;AAkDrD,UAAa,iBAAb,SAAuC,gBAAvC,CAAuD;;;;AAUrD,MAAA,WAAA,CAAY,IAAZ,EAEC;;AAEC,cAAM,IAAN,EAAY,CAAZ,EAAe,eAAf;AAbO,aAAA,IAAA,GAAO,mBAAP;;;;;AAOA,aAAA,EAAA,GAAK,KAAL,CAIR,C;;;;AAOC,YAAI,KAAK,MAAL,IAAe,GAAf,IAAsB,KAAK,MAAL,GAAc,GAAxC,EAA6C;AAC3C,eAAK,OAAL,6CAAkD,IAAI,CAAC,GAAL,IAAY,eAA9D;AACD,SAFD,MAEO;AACL,eAAK,OAAL,uCACiC,IAAI,CAAC,GAAL,IAAY,eAD7C,eACiE,IAAI,CAAC,MADtE,cACgF,IAAI,CAAC,UADrF;AAED;;AACD,aAAK,KAAL,GAAa,IAAI,CAAC,KAAL,IAAc,IAA3B;AACD;;AA1BoD;;;;;;;;;;;;;;;;;;;;;;;;ACjRvD,aAAS,OAAT,CACI,OADJ,EASI,IATJ,EASkB;AAChB,aAAO;AACL,QAAA,IADK;AAEL,QAAA,OAAO,EAAE,OAAO,CAAC,OAFZ;AAGL,QAAA,OAAO,EAAE,OAAO,CAAC,OAHZ;AAIL,QAAA,MAAM,EAAE,OAAO,CAAC,MAJX;AAKL,QAAA,cAAc,EAAE,OAAO,CAAC,cALnB;AAML,QAAA,YAAY,EAAE,OAAO,CAAC,YANjB;AAOL,QAAA,eAAe,EAAE,OAAO,CAAC;AAPpB,OAAP;AASD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmDD,UAAa,UAAb,CAAuB;;;;AACrB,MAAA,WAAA,CAAoB,OAApB,EAAwC;AAApB,aAAA,OAAA,GAAA,OAAA;AAAwB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAyV5C,MAAA,OAAO,CAAC,KAAD,EAAiC,GAAjC,EAA+C,OAAA,GAQlD,EARG,EAQD;;YACA,G,CADA,C;;AAGJ,YAAI,KAAK,YAAY,WAArB,EAAkC;;;AAGhC,UAAA,GAAG;AAAA;AAAG,UAAA,KAAN;AACD,SAJD,MAIO;;;;;;;cAMD,OAAO,GAA0B,S;;AACrC,cAAI,OAAO,CAAC,OAAR,YAA2B,WAA/B,EAA4C;AAC1C,YAAA,OAAO,GAAG,OAAO,CAAC,OAAlB;AACD,WAFD,MAEO;AACL,YAAA,OAAO,GAAG,IAAI,WAAJ,CAAgB,OAAO,CAAC,OAAxB,CAAV;AACD,WAXI,C;;;;;cAcD,MAAM,GAAyB,S;;AACnC,cAAI,CAAC,CAAC,OAAO,CAAC,MAAd,EAAsB;AACpB,gBAAI,OAAO,CAAC,MAAR,YAA0B,UAA9B,EAA0C;AACxC,cAAA,MAAM,GAAG,OAAO,CAAC,MAAjB;AACD,aAFD,MAEO;AACL,cAAA,MAAM,GAAG,IAAI,UAAJ;AAAc;AAAC;AAAE,gBAAA,UAAU,EAAE,OAAO,CAAC;AAAtB,eAAf,CAAT;AACD;AACF,WArBI,C;;;AAwBL,UAAA,GAAG,GAAG,IAAI,WAAJ,CAAgB,KAAhB;AAAqB;AAAE,UAAA,GAAvB,EAA+B,OAAO,CAAC,IAAR,KAAiB,SAAjB,GAA6B,OAAO,CAAC,IAArC,GAA4C,IAA3E,EAAkF;AACtF,YAAA,OADsF;AAEtF,YAAA,MAFsF;AAGtF,YAAA,cAAc,EAAE,OAAO,CAAC,cAH8D;;AAKtF,YAAA,YAAY,EAAE,OAAO,CAAC,YAAR,IAAwB,MALgD;AAMtF,YAAA,eAAe,EAAE,OAAO,CAAC;AAN6D,WAAlF,CAAN;AAQD,SAvCG,C;;;;;;;;cA6CE,OAAO,GACT,MAAA,CAAA,iCAAA,CAAA,IAAA,CAAA,CAAA,CAAI,GAAJ,EAAS,IAAT,CAAc,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAA;AAAS;;;;AAAE,QAAA,GAAD,IAA2B,KAAK,OAAL,CAAa,MAAb,CAAoB,GAApB,CAArC,CAAd,C,CA9CA,C;;;;AAmDJ,YAAI,KAAK,YAAY,WAAjB,IAAgC,OAAO,CAAC,OAAR,KAAoB,QAAxD,EAAkE;AAChE,iBAAO,OAAP;AACD,SArDG,C;;;;;;;cA0DE,IAAI;AAAA;AAAiE,QAAA,OAAO,CAAC,IAAR,CACvE,MAAA,CAAA,2CAAA,CAAA,QAAA,CAAA,CAAA;AAAM;;;;AAAE,QAAA,KAAD,IAA2B,KAAK,YAAY,YAAnD,CADuE,C,CA1DvE,C;;AA8DJ,gBAAQ,OAAO,CAAC,OAAR,IAAmB,MAA3B;AACE,eAAK,MAAL;;;;;;AAME,oBAAQ,GAAG,CAAC,YAAZ;AACE,mBAAK,aAAL;AACE,uBAAO,IAAI,CAAC,IAAL,CAAU,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA;AAAG;;;;AAAE,gBAAA,GAAD,IAAuB;;AAE1C,sBAAI,GAAG,CAAC,IAAJ,KAAa,IAAb,IAAqB,EAAE,GAAG,CAAC,IAAJ,YAAoB,WAAtB,CAAzB,EAA6D;AAC3D,0BAAM,IAAI,KAAJ,CAAU,iCAAV,CAAN;AACD;;AACD,yBAAO,GAAG,CAAC,IAAX;AACD,iBANgB,CAAV,CAAP;;AAOF,mBAAK,MAAL;AACE,uBAAO,IAAI,CAAC,IAAL,CAAU,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA;AAAG;;;;AAAE,gBAAA,GAAD,IAAuB;;AAE1C,sBAAI,GAAG,CAAC,IAAJ,KAAa,IAAb,IAAqB,EAAE,GAAG,CAAC,IAAJ,YAAoB,IAAtB,CAAzB,EAAsD;AACpD,0BAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AACD,yBAAO,GAAG,CAAC,IAAX;AACD,iBANgB,CAAV,CAAP;;AAOF,mBAAK,MAAL;AACE,uBAAO,IAAI,CAAC,IAAL,CAAU,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA;AAAG;;;;AAAE,gBAAA,GAAD,IAAuB;;AAE1C,sBAAI,GAAG,CAAC,IAAJ,KAAa,IAAb,IAAqB,OAAO,GAAG,CAAC,IAAX,KAAoB,QAA7C,EAAuD;AACrD,0BAAM,IAAI,KAAJ,CAAU,2BAAV,CAAN;AACD;;AACD,yBAAO,GAAG,CAAC,IAAX;AACD,iBANgB,CAAV,CAAP;;AAOF,mBAAK,MAAL;AACA;;AAEE,uBAAO,IAAI,CAAC,IAAL,CAAU,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA;AAAG;;;;AAAE,gBAAA,GAAD,IAA4B,GAAG,CAAC,IAApC,CAAV,CAAP;AA5BJ;;AA8BF,eAAK,UAAL;;AAEE,mBAAO,IAAP;;AACF;;AAEE,kBAAM,IAAI,KAAJ,+CAAiD,OAAO,CAAC,OAAzD,OAAN;AA1CJ;AA4CD;;;;;;;;;;;;;AAuRD,MAAA,MAAM,CAAE,GAAF,EAAe,OAAA,GAOjB,EAPE,EAOA;AACJ,eAAO,KAAK,OAAL,CAAkB,QAAlB,EAA4B,GAA5B;AAA+B;AAAE,QAAA,OAAjC,CAAP;AACD;;;;;;;;;;;AAmRD,MAAA,GAAG,CAAC,GAAD,EAAc,OAAA,GAOb,EAPD,EAOG;AACJ,eAAO,KAAK,OAAL,CAAkB,KAAlB,EAAyB,GAAzB;AAA4B;AAAE,QAAA,OAA9B,CAAP;AACD;;;;;;;;;;;;;AA0RD,MAAA,IAAI,CAAC,GAAD,EAAc,OAAA,GAOd,EAPA,EAOE;AACJ,eAAO,KAAK,OAAL,CAAkB,MAAlB,EAA0B,GAA1B;AAA6B;AAAE,QAAA,OAA/B,CAAP;AACD;;;;;;;;;;;;;;;;;;;;;;;AA4CD,MAAA,KAAK,CAAI,GAAJ,EAAiB,aAAjB,EAAsC;AACzC,eAAO,KAAK,OAAL,CAAkB,OAAlB,EAA2B,GAA3B,EAAgC;AACrC,UAAA,MAAM,EAAE,IAAI,UAAJ,GAAiB,MAAjB,CAAwB,aAAxB,EAAuC,gBAAvC,CAD6B;AAErC,UAAA,OAAO,EAAE,MAF4B;AAGrC,UAAA,YAAY,EAAE;AAHuB,SAAhC,CAAP;AAKD;;;;;;;;;;;;;AAwRD,MAAA,OAAO,CAAC,GAAD,EAAc,OAAA,GAOjB,EAPG,EAOD;AACJ,eAAO,KAAK,OAAL,CAAkB,SAAlB,EAA6B,GAA7B;AAAgC;AAAE,QAAA,OAAlC,CAAP;AACD;;;;;;;;;;;;AAuSD,MAAA,KAAK,CAAC,GAAD,EAAc,IAAd,EAA8B,OAAA,GAO/B,EAPC,EAOC;AACJ,eAAO,KAAK,OAAL,CAAkB,OAAlB,EAA2B,GAA3B,EAAgC,OAAO,CAAC,OAAD,EAAU,IAAV,CAAvC,CAAP;AACD;;;;;;;;;;;;;AAiSD,MAAA,IAAI,CAAC,GAAD,EAAc,IAAd,EAA8B,OAAA,GAO9B,EAPA,EAOE;AACJ,eAAO,KAAK,OAAL,CAAkB,MAAlB,EAA0B,GAA1B,EAA+B,OAAO,CAAC,OAAD,EAAU,IAAV,CAAtC,CAAP;AACD;;;;;;;;;;;;;AA2RD,MAAA,GAAG,CAAC,GAAD,EAAc,IAAd,EAA8B,OAAA,GAO7B,EAPD,EAOG;AACJ,eAAO,KAAK,OAAL,CAAkB,KAAlB,EAAyB,GAAzB,EAA8B,OAAO,CAAC,OAAD,EAAU,IAAV,CAArC,CAAP;AACD;;AA5/EoB;;;YADtB,0CAAA,CAAA,YAAA;;;;;YAtFO;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACgCR,aAAA,eAAA,GAAA,CASC;;;;;;;;;;AAOD,UAAa,sBAAb,CAAmC;;;;;AACjC,MAAA,WAAA,CAAoB,IAApB,EAA+C,WAA/C,EAA2E;AAAvD,aAAA,IAAA,GAAA,IAAA;AAA2B,aAAA,WAAA,GAAA,WAAA;AAAgC;;;;;;;AAE/E,MAAA,MAAM,CAAC,GAAD,EAAsB;AAC1B,eAAO,KAAK,WAAL,CAAiB,SAAjB,CAA2B,GAA3B,EAAgC,KAAK,IAArC,CAAP;AACD;;AALgC;;;;;;;;;;;;AAcnC,UAAa,iBAAiB,GAAG,IAAI,0CAAA,CAAA,gBAAA,CAAJ,CAAsC,mBAAtC,CAAjC;;AAGA,UAAa,eAAb,CAA4B;;;;;;AAC1B,MAAA,SAAS,CAAC,GAAD,EAAwB,IAAxB,EAAyC;AAChD,eAAO,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAP;AACD;;AAHyB;;;YAD3B,0CAAA,CAAA,YAAA;;;;;;;;;;;;;QCxDG,aAAa,GAAW,C;;;;;AAI5B,UAAa,qBAAqB,GAAG,gDAArC,C;;;;;AAIA,UAAa,sBAAsB,GAAG,+CAAtC;;;AACA,UAAa,6BAA6B,GAAG,6CAA7C;;;;;;;;;;AASA,UAAsB,oBAAtB,CAA0C;;;;;;;;;;;AAW1C,UAAa,kBAAb,CAA+B;;;;;AAC7B,MAAA,WAAA,CAAoB,WAApB,EAAiF,QAAjF,EAA8F;AAA1E,aAAA,WAAA,GAAA,WAAA;AAA6D,aAAA,QAAA,GAAA,QAAA;AAAiB;;;;;;;;AAK1F,MAAA,YAAY,GAAA;AAAa,2CAA4B,aAAa,EAAzC;AAAgD;;;;;;;;;AAQjF,MAAA,MAAM,CAAC,GAAD,EAAwB;;;AAG5B,YAAI,GAAG,CAAC,MAAJ,KAAe,OAAnB,EAA4B;AAC1B,gBAAM,IAAI,KAAJ,CAAU,sBAAV,CAAN;AACD,SAFD,MAEO,IAAI,GAAG,CAAC,YAAJ,KAAqB,MAAzB,EAAiC;AACtC,gBAAM,IAAI,KAAJ,CAAU,6BAAV,CAAN;AACD,SAP2B,C;;;AAU5B,eAAO,IAAI,iCAAA,CAAA,YAAA,CAAJ;AAAc;;;;AAAkB,QAAA,QAAD,IAAmC;;;;;;gBAIjE,QAAQ,GAAG,KAAK,YAAL,E;;;gBACX,GAAG,GAAG,GAAG,CAAC,aAAJ,CAAkB,OAAlB,CAA0B,sBAA1B,aAAsD,QAAtD,Q,CAL2D,C;;;;gBAQjE,IAAI,GAAG,KAAK,QAAL,CAAc,aAAd,CAA4B,QAA5B,C;AACb,UAAA,IAAI,CAAC,GAAL,GAAW,GAAX,CATuE,C;;;;;;cAenE,IAAI,GAAa,I,CAfkD,C;;;;cAkBnE,QAAQ,GAAY,K,CAlB+C,C;;;;;cAsBnE,SAAS,GAAY,K,CAtB8C,C;;;;AA2BvE,eAAK,WAAL,CAAiB,QAAjB;AAA0B;;;;AAAI,UAAA,IAAD,IAAW;;AAEtC,mBAAO,KAAK,WAAL,CAAiB,QAAjB,CAAP,CAFsC,C;;AAKtC,gBAAI,SAAJ,EAAe;AACb;AACD,aAPqC,C;;;AAUtC,YAAA,IAAI,GAAG,IAAP;AACA,YAAA,QAAQ,GAAG,IAAX;AACD,WAZD,CA3BuE,C;;;;;;;gBA4CjE,OAAO;AAAA;;;AAAG,gBAAA;;AAEd,gBAAI,IAAI,CAAC,UAAT,EAAqB;AACnB,cAAA,IAAI,CAAC,UAAL,CAAgB,WAAhB,CAA4B,IAA5B;AACD,aAJa,C;;;;AAQd,mBAAO,KAAK,WAAL,CAAiB,QAAjB,CAAP;AACD,W,CArDsE,C;;;;;;;;gBA2DjE,MAAM;AAAA;;;;AAAI,UAAA,KAAD,IAAa;;AAE1B,gBAAI,SAAJ,EAAe;AACb;AACD,aAJyB,C;;;AAO1B,YAAA,OAAO,GAPmB,C;;AAU1B,gBAAI,CAAC,QAAL,EAAe;;;AAGb,cAAA,QAAQ,CAAC,KAAT,CAAe,IAAI,iBAAJ,CAAsB;AACnC,gBAAA,GADmC;AAEnC,gBAAA,MAAM,EAAE,CAF2B;AAGnC,gBAAA,UAAU,EAAE,aAHuB;AAInC,gBAAA,KAAK,EAAE,IAAI,KAAJ,CAAU,qBAAV;AAJ4B,eAAtB,CAAf;AAMA;AACD,aApByB,C;;;;AAwB1B,YAAA,QAAQ,CAAC,IAAT,CAAc,IAAI,YAAJ,CAAiB;AAC7B,cAAA,IAD6B;AAE7B,cAAA,MAAM,EAAE,GAFqB;AAG7B,cAAA,UAAU,EAAE,IAHiB;AAGX,cAAA;AAHW,aAAjB,CAAd,EAxB0B,C;;AA+B1B,YAAA,QAAQ,CAAC,QAAT;AACD,W,CA3FsE,C;;;;;;;gBAgGjE,OAAO;AAAA;;;;AAAS,UAAA,KAAD,IAAa;;AAEhC,gBAAI,SAAJ,EAAe;AACb;AACD;;AACD,YAAA,OAAO,GALyB,C;;AAQhC,YAAA,QAAQ,CAAC,KAAT,CAAe,IAAI,iBAAJ,CAAsB;AACnC,cAAA,KADmC;AAEnC,cAAA,MAAM,EAAE,CAF2B;AAGnC,cAAA,UAAU,EAAE,aAHuB;AAGR,cAAA;AAHQ,aAAtB,CAAf;AAKD,W,CA7GsE,C;;;;AAiHvE,UAAA,IAAI,CAAC,gBAAL,CAAsB,MAAtB,EAA8B,MAA9B;AACA,UAAA,IAAI,CAAC,gBAAL,CAAsB,OAAtB,EAA+B,OAA/B;AACA,eAAK,QAAL,CAAc,IAAd,CAAmB,WAAnB,CAA+B,IAA/B,EAnHuE,C;;AAsHvE,UAAA,QAAQ,CAAC,IAAT,CAAc;AAAC,YAAA,IAAI,EAAE,aAAa,CAAC;AAArB,WAAd,EAtHuE,C;;AAyHvE;AAAA;;;AAAO,kBAAA;;AAEL,cAAA,SAAS,GAAG,IAAZ,CAFK,C;;AAKL,cAAA,IAAI,CAAC,mBAAL,CAAyB,MAAzB,EAAiC,MAAjC;AACA,cAAA,IAAI,CAAC,mBAAL,CAAyB,OAAzB,EAAkC,OAAlC,EANK,C;;AASL,cAAA,OAAO;AACR;AAVD;AAWD,SApIM,CAAP;AAqID;;AA7J4B;;;YAD9B,0CAAA,CAAA,YAAA;;;;;YAEkC;;;;cAAuB,0CAAA,CAAA,QAAA,C;AAAM,QAAA,IAAA,EAAA,CAAC,4CAAA,CAAA,UAAA,CAAD;;;;;;;;;;;;;;;AAwKhE,UAAa,gBAAb,CAA6B;;;;AAC3B,MAAA,WAAA,CAAoB,KAApB,EAA6C;AAAzB,aAAA,KAAA,GAAA,KAAA;AAA6B;;;;;;;;;;AASjD,MAAA,SAAS,CAAC,GAAD,EAAwB,IAAxB,EAAyC;AAChD,YAAI,GAAG,CAAC,MAAJ,KAAe,OAAnB,EAA4B;AAC1B,iBAAO,KAAK,KAAL,CAAW,MAAX;AAAiB;AAAC,UAAA,GAAlB,CAAP;AACD,SAH+C,C;;;AAKhD,eAAO,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAP;AACD;;AAhB0B;;;YAD5B,0CAAA,CAAA,YAAA;;;;;YAE4B;;;;;;;;;;;;UC3MvB,WAAW,GAAG,c;;;;;;;;AAMpB,aAAS,cAAT,CAAwB,GAAxB,EAAgC;AAC9B,UAAI,iBAAiB,GAAjB,IAAwB,GAAG,CAAC,WAAhC,EAA6C;AAC3C,eAAO,GAAG,CAAC,WAAX;AACD;;AACD,UAAI,mBAAmB,IAAnB,CAAwB,GAAG,CAAC,qBAAJ,EAAxB,CAAJ,EAA0D;AACxD,eAAO,GAAG,CAAC,iBAAJ,CAAsB,eAAtB,CAAP;AACD;;AACD,aAAO,IAAP;AACD;;;;;;;;;AAOD,UAAsB,UAAtB,CAAgC;;;;;;;;;AAOhC,UAAa,UAAb,CAAuB;AACrB,MAAA,WAAA,GAAA,CAAgB;;;;;;AAChB,MAAA,KAAK,GAAA;AAAU;AAAA;AAAa,cAAI,cAAJ;AAAb;AAAqC;;AAF/B;;;YADtB,0CAAA,CAAA,YAAA;;;;;;;;;;;AASD,aAAA,eAAA,GAAA,CAKC;;;;;;;;;;;;AAUD,UAAa,cAAb,CAA2B;;;;AACzB,MAAA,WAAA,CAAoB,UAApB,EAA0C;AAAtB,aAAA,UAAA,GAAA,UAAA;AAA0B;;;;;;;;AAO9C,MAAA,MAAM,CAAC,GAAD,EAAsB;;;AAG1B,YAAI,GAAG,CAAC,MAAJ,KAAe,OAAnB,EAA4B;AAC1B,gBAAM,IAAI,KAAJ,6EAAN;AACD,SALyB,C;;;AAQ1B,eAAO,IAAI,iCAAA,CAAA,YAAA,CAAJ;AAAc;;;;AAAE,QAAA,QAAD,IAAmC;;;;gBAEjD,GAAG,GAAG,KAAK,UAAL,CAAgB,KAAhB,E;AACZ,UAAA,GAAG,CAAC,IAAJ,CAAS,GAAG,CAAC,MAAb,EAAqB,GAAG,CAAC,aAAzB;;AACA,cAAI,CAAC,CAAC,GAAG,CAAC,eAAV,EAA2B;AACzB,YAAA,GAAG,CAAC,eAAJ,GAAsB,IAAtB;AACD,WANsD,C;;;AASvD,UAAA,GAAG,CAAC,OAAJ,CAAY,OAAZ;AAAmB;;;;;AAAC,WAAC,IAAD,EAAO,MAAP,KAAkB,GAAG,CAAC,gBAAJ,CAAqB,IAArB,EAA2B,MAAM,CAAC,IAAP,CAAY,GAAZ,CAA3B,CAAtC,EATuD,C;;AAYvD,cAAI,CAAC,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAgB,QAAhB,CAAL,EAAgC;AAC9B,YAAA,GAAG,CAAC,gBAAJ,CAAqB,QAArB,EAA+B,mCAA/B;AACD,WAdsD,C;;;AAiBvD,cAAI,CAAC,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAgB,cAAhB,CAAL,EAAsC;;kBAC9B,YAAY,GAAG,GAAG,CAAC,uBAAJ,E,CADe,C;;AAGpC,gBAAI,YAAY,KAAK,IAArB,EAA2B;AACzB,cAAA,GAAG,CAAC,gBAAJ,CAAqB,cAArB,EAAqC,YAArC;AACD;AACF,WAvBsD,C;;;AA0BvD,cAAI,GAAG,CAAC,YAAR,EAAsB;;kBACd,YAAY,GAAG,GAAG,CAAC,YAAJ,CAAiB,WAAjB,E,CADD,C;;;;;;AAQpB,YAAA,GAAG,CAAC,YAAJ;AAAgB;AAAK,YAAA,YAAY,KAAK,MAAlB,GAA4B,YAA5B,GAA2C,MAA/D;AACD,WAnCsD,C;;;;;gBAsCjD,OAAO,GAAG,GAAG,CAAC,aAAJ,E,CAtCuC,C;;;;;;;;;cA8CnD,cAAc,GAA4B,I,CA9CS,C;;;;;gBAkDjD,cAAc;AAAA;;;AAAG,gBAAA;AACrB,gBAAI,cAAc,KAAK,IAAvB,EAA6B;AAC3B,qBAAO,cAAP;AACD,aAHoB,C;;;;;kBAMf,MAAM,GAAW,GAAG,CAAC,MAAJ,KAAe,IAAf,GAAsB,GAAtB,GAA4B,GAAG,CAAC,M;;;kBACjD,UAAU,GAAG,GAAG,CAAC,UAAJ,IAAkB,I,CAPhB,C;;;;kBAUf,OAAO,GAAG,IAAI,WAAJ,CAAgB,GAAG,CAAC,qBAAJ,EAAhB,C,CAVK,C;;;;;kBAcf,GAAG,GAAG,cAAc,CAAC,GAAD,CAAd,IAAuB,GAAG,CAAC,G,CAdlB,C;;AAiBrB,YAAA,cAAc,GAAG,IAAI,kBAAJ,CAAuB;AAAC,cAAA,OAAD;AAAU,cAAA,MAAV;AAAkB,cAAA,UAAlB;AAA8B,cAAA;AAA9B,aAAvB,CAAjB;AACA,mBAAO,cAAP;AACD,W,CArEsD,C;;;;;;;gBA2EjD,MAAM;AAAA;;;AAAG,gBAAA;;gBAET;AAAC,cAAA,OAAD;AAAU,cAAA,MAAV;AAAkB,cAAA,UAAlB;AAA8B,cAAA;AAA9B,gBAAqC,cAAc,E,CAF1C,C;;;;gBAKT,IAAI,GAAa,I;;AAErB,gBAAI,MAAM,KAAK,GAAf,EAAoB;;AAElB,cAAA,IAAI,GAAI,OAAO,GAAG,CAAC,QAAX,KAAwB,WAAzB,GAAwC,GAAG,CAAC,YAA5C,GAA2D,GAAG,CAAC,QAAtE;AACD,aAVY,C;;;AAab,gBAAI,MAAM,KAAK,CAAf,EAAkB;AAChB,cAAA,MAAM,GAAG,CAAC,CAAC,IAAF,GAAS,GAAT,GAAe,CAAxB;AACD,aAfY,C;;;;;;;;gBAqBT,EAAE,GAAG,MAAM,IAAI,GAAV,IAAiB,MAAM,GAAG,G,CArBtB,C;;;AAyBb,gBAAI,GAAG,CAAC,YAAJ,KAAqB,MAArB,IAA+B,OAAO,IAAP,KAAgB,QAAnD,EAA6D;;;;oBAErD,YAAY,GAAG,I;AACrB,cAAA,IAAI,GAAG,IAAI,CAAC,OAAL,CAAa,WAAb,EAA0B,EAA1B,CAAP;;AACA,kBAAI;;AAEF,gBAAA,IAAI,GAAG,IAAI,KAAK,EAAT,GAAc,IAAI,CAAC,KAAL,CAAW,IAAX,CAAd,GAAiC,IAAxC;AACD,eAHD,CAGE,OAAO,KAAP,EAAc;;;;AAId,gBAAA,IAAI,GAAG,YAAP,CAJc,C;;;AAQd,oBAAI,EAAJ,EAAQ;;AAEN,kBAAA,EAAE,GAAG,KAAL,CAFM,C;;AAIN,kBAAA,IAAI;AAAA;AAAG;AAAE,oBAAA,KAAF;AAAS,oBAAA,IAAI,EAAE;AAAf,mBAAP;AACD;AACF;AACF;;AAED,gBAAI,EAAJ,EAAQ;;AAEN,cAAA,QAAQ,CAAC,IAAT,CAAc,IAAI,YAAJ,CAAiB;AAC7B,gBAAA,IAD6B;AAE7B,gBAAA,OAF6B;AAG7B,gBAAA,MAH6B;AAI7B,gBAAA,UAJ6B;AAK7B,gBAAA,GAAG,EAAE,GAAG,IAAI;AALiB,eAAjB,CAAd,EAFM,C;;;AAWN,cAAA,QAAQ,CAAC,QAAT;AACD,aAZD,MAYO;;AAEL,cAAA,QAAQ,CAAC,KAAT,CAAe,IAAI,iBAAJ,CAAsB;;AAEnC,gBAAA,KAAK,EAAE,IAF4B;AAGnC,gBAAA,OAHmC;AAInC,gBAAA,MAJmC;AAKnC,gBAAA,UALmC;AAMnC,gBAAA,GAAG,EAAE,GAAG,IAAI;AANuB,eAAtB,CAAf;AAQD;AACF,W,CAnJsD,C;;;;;;;gBAwJjD,OAAO;AAAA;;;;AAAI,UAAA,KAAD,IAAqB;kBAC7B;AAAC,cAAA;AAAD,gBAAQ,cAAc,E;;;kBACtB,GAAG,GAAG,IAAI,iBAAJ,CAAsB;AAChC,cAAA,KADgC;AAEhC,cAAA,MAAM,EAAE,GAAG,CAAC,MAAJ,IAAc,CAFU;AAGhC,cAAA,UAAU,EAAE,GAAG,CAAC,UAAJ,IAAkB,eAHE;AAIhC,cAAA,GAAG,EAAE,GAAG,IAAI;AAJoB,aAAtB,C;AAMZ,YAAA,QAAQ,CAAC,KAAT,CAAe,GAAf;AACD,W,CAjKsD,C;;;;;;;;cAuKnD,WAAW,GAAG,K,CAvKqC,C;;;;;gBA2KjD,cAAc;AAAA;;;;AAAI,UAAA,KAAD,IAAqB;;AAE1C,gBAAI,CAAC,WAAL,EAAkB;AAChB,cAAA,QAAQ,CAAC,IAAT,CAAc,cAAc,EAA5B;AACA,cAAA,WAAW,GAAG,IAAd;AACD,aALyC,C;;;;;;gBAStC,aAAa,GAA8B;AAC7C,cAAA,IAAI,EAAE,aAAa,CAAC,gBADyB;AAE7C,cAAA,MAAM,EAAE,KAAK,CAAC;AAF+B,a,CATL,C;;AAe1C,gBAAI,KAAK,CAAC,gBAAV,EAA4B;AAC1B,cAAA,aAAa,CAAC,KAAd,GAAsB,KAAK,CAAC,KAA5B;AACD,aAjByC,C;;;;;AAsB1C,gBAAI,GAAG,CAAC,YAAJ,KAAqB,MAArB,IAA+B,CAAC,CAAC,GAAG,CAAC,YAAzC,EAAuD;AACrD,cAAA,aAAa,CAAC,WAAd,GAA4B,GAAG,CAAC,YAAhC;AACD,aAxByC,C;;;AA2B1C,YAAA,QAAQ,CAAC,IAAT,CAAc,aAAd;AACD,W,CAvMsD,C;;;;;;gBA2MjD,YAAY;AAAA;;;;AAAI,UAAA,KAAD,IAAqB;;;;;gBAGpC,QAAQ,GAA4B;AACtC,cAAA,IAAI,EAAE,aAAa,CAAC,cADkB;AAEtC,cAAA,MAAM,EAAE,KAAK,CAAC;AAFwB,a,CAHA,C;;;AAUxC,gBAAI,KAAK,CAAC,gBAAV,EAA4B;AAC1B,cAAA,QAAQ,CAAC,KAAT,GAAiB,KAAK,CAAC,KAAvB;AACD,aAZuC,C;;;AAexC,YAAA,QAAQ,CAAC,IAAT,CAAc,QAAd;AACD,W,CA3NsD,C;;;AA8NvD,UAAA,GAAG,CAAC,gBAAJ,CAAqB,MAArB,EAA6B,MAA7B;AACA,UAAA,GAAG,CAAC,gBAAJ,CAAqB,OAArB,EAA8B,OAA9B,EA/NuD,C;;AAkOvD,cAAI,GAAG,CAAC,cAAR,EAAwB;;AAEtB,YAAA,GAAG,CAAC,gBAAJ,CAAqB,UAArB,EAAiC,cAAjC,EAFsB,C;;AAKtB,gBAAI,OAAO,KAAK,IAAZ,IAAoB,GAAG,CAAC,MAA5B,EAAoC;AAClC,cAAA,GAAG,CAAC,MAAJ,CAAW,gBAAX,CAA4B,UAA5B,EAAwC,YAAxC;AACD;AACF,WA1OsD,C;;;AA6OvD,UAAA,GAAG,CAAC,IAAJ;AAAQ;AAAC,UAAA,OAAT;AACA,UAAA,QAAQ,CAAC,IAAT,CAAc;AAAC,YAAA,IAAI,EAAE,aAAa,CAAC;AAArB,WAAd,EA9OuD,C;;;AAkPvD;AAAA;;;AAAO,kBAAA;;AAEL,cAAA,GAAG,CAAC,mBAAJ,CAAwB,OAAxB,EAAiC,OAAjC;AACA,cAAA,GAAG,CAAC,mBAAJ,CAAwB,MAAxB,EAAgC,MAAhC;;AACA,kBAAI,GAAG,CAAC,cAAR,EAAwB;AACtB,gBAAA,GAAG,CAAC,mBAAJ,CAAwB,UAAxB,EAAoC,cAApC;;AACA,oBAAI,OAAO,KAAK,IAAZ,IAAoB,GAAG,CAAC,MAA5B,EAAoC;AAClC,kBAAA,GAAG,CAAC,MAAJ,CAAW,mBAAX,CAA+B,UAA/B,EAA2C,YAA3C;AACD;AACF,eATI,C;;;AAYL,cAAA,GAAG,CAAC,KAAJ;AACD;AAbD;AAcD,SAhQM,CAAP;AAiQD;;AAjRwB;;;YAD1B,0CAAA,CAAA,YAAA;;;;;YAEiC;;;;;;;;;;;;ACnDlC,UAAa,gBAAgB,GAAG,IAAI,0CAAA,CAAA,gBAAA,CAAJ,CAA2B,kBAA3B,CAAhC;;;AACA,UAAa,gBAAgB,GAAG,IAAI,0CAAA,CAAA,gBAAA,CAAJ,CAA2B,kBAA3B,CAAhC;;;;;;;;AAOA,UAAsB,sBAAtB,CAA4C;;;;;;;;AAa5C,UAAa,uBAAb,CAAoC;;;;;;AASlC,MAAA,WAAA,CAC8B,GAD9B,EACqE,QADrE,EAEsC,UAFtC,EAEwD;AAD1B,aAAA,GAAA,GAAA,GAAA;AAAuC,aAAA,QAAA,GAAA,QAAA;AAC/B,aAAA,UAAA,GAAA,UAAA;AAV9B,aAAA,gBAAA,GAA2B,EAA3B;AACA,aAAA,SAAA,GAAyB,IAAzB;;;;;AAKR,aAAA,UAAA,GAAqB,CAArB;AAI4D;;;;;;AAE5D,MAAA,QAAQ,GAAA;AACN,YAAI,KAAK,QAAL,KAAkB,QAAtB,EAAgC;AAC9B,iBAAO,IAAP;AACD;;;;cACK,YAAY,GAAG,KAAK,GAAL,CAAS,MAAT,IAAmB,E;;AACxC,YAAI,YAAY,KAAK,KAAK,gBAA1B,EAA4C;AAC1C,eAAK,UAAL;AACA,eAAK,SAAL,GAAiBA,MAAAA,CAAAA,4CAAAA,CAAAA,mBAAAA,CAAAA,CAAAA,CAAiB,YAAjBA,EAA+B,KAAK,UAApCA,CAAjB;AACA,eAAK,gBAAL,GAAwB,YAAxB;AACD;;AACD,eAAO,KAAK,SAAZ;AACD;;AAxBiC;;;YADnC,0CAAA,CAAA,YAAA;;;;;;;cAWM,0CAAA,CAAA,QAAA,C;AAAM,QAAA,IAAA,EAAA,CAAC,4CAAA,CAAA,UAAA,CAAD;;;;;cAA8B,0CAAA,CAAA,QAAA,C;AAAM,QAAA,IAAA,EAAA,CAAC,0CAAA,CAAA,aAAA,CAAD;;;;;cAC1C,0CAAA,CAAA,QAAA,C;AAAM,QAAA,IAAA,EAAA,CAAC,gBAAD;;;;;;;;;;AAoBb,UAAa,mBAAb,CAAgC;;;;;AAC9B,MAAA,WAAA,CACY,YADZ,EAEsC,UAFtC,EAEwD;AAD5C,aAAA,YAAA,GAAA,YAAA;AAC0B,aAAA,UAAA,GAAA,UAAA;AAAsB;;;;;;;;AAE5D,MAAA,SAAS,CAAC,GAAD,EAAwB,IAAxB,EAAyC;;cAC1C,KAAK,GAAG,GAAG,CAAC,GAAJ,CAAQ,WAAR,E,CADkC,C;;;;;AAMhD,YAAI,GAAG,CAAC,MAAJ,KAAe,KAAf,IAAwB,GAAG,CAAC,MAAJ,KAAe,MAAvC,IAAiD,KAAK,CAAC,UAAN,CAAiB,SAAjB,CAAjD,IACA,KAAK,CAAC,UAAN,CAAiB,UAAjB,CADJ,EACkC;AAChC,iBAAO,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAP;AACD;;;;cACK,KAAK,GAAG,KAAK,YAAL,CAAkB,QAAlB,E,CAVkC,C;;AAahD,YAAI,KAAK,KAAK,IAAV,IAAkB,CAAC,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAgB,KAAK,UAArB,CAAvB,EAAyD;AACvD,UAAA,GAAG,GAAG,GAAG,CAAC,KAAJ,CAAU;AAAC,YAAA,OAAO,EAAE,GAAG,CAAC,OAAJ,CAAY,GAAZ,CAAgB,KAAK,UAArB,EAAiC,KAAjC;AAAV,WAAV,CAAN;AACD;;AACD,eAAO,IAAI,CAAC,MAAL,CAAY,GAAZ,CAAP;AACD;;AAtB6B;;;YAD/B,0CAAA,CAAA,YAAA;;;;;YAG2B;;;;cACrB,0CAAA,CAAA,QAAA,C;AAAM,QAAA,IAAA,EAAA,CAAC,gBAAD;;;;;;;;;;;;;;;;;;;;;AC1Cb,UAAa,uBAAb,CAAoC;;;;;AAGlC,MAAA,WAAA,CAAoB,OAApB,EAAkD,QAAlD,EAAoE;AAAhD,aAAA,OAAA,GAAA,OAAA;AAA8B,aAAA,QAAA,GAAA,QAAA;AAF1C,aAAA,KAAA,GAA0B,IAA1B;AAEgE;;;;;;;AAExE,MAAA,MAAM,CAAC,GAAD,EAAsB;AAC1B,YAAI,KAAK,KAAL,KAAe,IAAnB,EAAyB;;gBACjB,YAAY,GAAG,KAAK,QAAL,CAAc,GAAd,CAAkB,iBAAlB,EAAqC,EAArC,C;AACrB,eAAK,KAAL,GAAa,YAAY,CAAC,WAAb;AAAwB;;;;;AACjC,WAAC,IAAD,EAAO,WAAP,KAAuB,IAAI,sBAAJ,CAA2B,IAA3B,EAAiC,WAAjC,CADd,EAC6D,KAAK,OADlE,CAAb;AAED;;AACD,eAAO,KAAK,KAAL,CAAW,MAAX,CAAkB,GAAlB,CAAP;AACD;;AAZiC;;;YADnC,0CAAA,CAAA,YAAA;;;;;YAlBO;;YAHY,0CAAA,CAAA,UAAA;;;;;;;;;;;;;;;;;AA6CpB,aAAgB,mBAAhB,CACI,OADJ,EAC0B,YAAA,GAAyC,EADnE,EACqE;AACnE,UAAI,CAAC,YAAL,EAAmB;AACjB,eAAO,OAAP;AACD;;AACD,aAAO,YAAY,CAAC,WAAb;AAAwB;;;;;AAC3B,OAAC,IAAD,EAAO,WAAP,KAAuB,IAAI,sBAAJ,CAA2B,IAA3B,EAAiC,WAAjC,CADpB,EACmE,OADnE,CAAP;AAED;;;;;;;;;;;;AAUD,aAAgB,oBAAhB,GAAoC;AAClC,UAAI,OAAO,MAAP,KAAkB,QAAtB,EAAgC;AAC9B,eAAO,MAAP;AACD;;AACD,aAAO,EAAP;AACD;;;;;;;;;;;;;;;AAuBD,UAAa,oBAAb,CAAiC;;;;;AAI/B,aAAO,OAAP,GAAc;AACZ,eAAO;AACL,UAAA,QAAQ,EAAE,oBADL;AAEL,UAAA,SAAS,EAAE,CACT;AAAC,YAAA,OAAO,EAAE,mBAAV;AAA+B,YAAA,QAAQ,EAAE;AAAzC,WADS;AAFN,SAAP;AAMD;;;;;;;;;;;;AAUD,aAAO,WAAP,CAAmB,OAAA,GAGf,EAHJ,EAGM;AACJ,eAAO;AACL,UAAA,QAAQ,EAAE,oBADL;AAEL,UAAA,SAAS,EAAE,CACT,OAAO,CAAC,UAAR,GAAqB;AAAC,YAAA,OAAO,EAAE,gBAAV;AAA4B,YAAA,QAAQ,EAAE,OAAO,CAAC;AAA9C,WAArB,GAAiF,EADxE,EAET,OAAO,CAAC,UAAR,GAAqB;AAAC,YAAA,OAAO,EAAE,gBAAV;AAA4B,YAAA,QAAQ,EAAE,OAAO,CAAC;AAA9C,WAArB,GAAiF,EAFxE;AAFN,SAAP;AAOD;;AAhC8B;;;YAThC,0CAAA,CAAA,UAAA,C;AAAQ,MAAA,IAAA,EAAA,CAAC;AACR,QAAA,SAAS,EAAE,CACT,mBADS,EAET;AAAC,UAAA,OAAO,EAAE,iBAAV;AAA6B,UAAA,WAAW,EAAE,mBAA1C;AAA+D,UAAA,KAAK,EAAE;AAAtE,SAFS,EAGT;AAAC,UAAA,OAAO,EAAE,sBAAV;AAAkC,UAAA,QAAQ,EAAE;AAA5C,SAHS,EAIT;AAAC,UAAA,OAAO,EAAE,gBAAV;AAA4B,UAAA,QAAQ,EAAE;AAAtC,SAJS,EAKT;AAAC,UAAA,OAAO,EAAE,gBAAV;AAA4B,UAAA,QAAQ,EAAE;AAAtC,SALS;AADH,OAAD;;;;;;;;;;;;AA4ET,UAAa,gBAAb,CAA6B;;;YAvB5B,0CAAA,CAAA,UAAA,C;AAAQ,MAAA,IAAA,EAAA,CAAC;;;;AAIR,QAAA,OAAO,EAAE,CACP,oBAAoB,CAAC,WAArB,CAAiC;AAC/B,UAAA,UAAU,EAAE,YADmB;AAE/B,UAAA,UAAU,EAAE;AAFmB,SAAjC,CADO,CAJD;;;;;;AAcR,QAAA,SAAS,EAAE,CACT,UADS,EAET;AAAC,UAAA,OAAO,EAAE,WAAV;AAAuB,UAAA,QAAQ,EAAE;AAAjC,SAFS,EAGT,cAHS,EAIT;AAAC,UAAA,OAAO,EAAE,WAAV;AAAuB,UAAA,WAAW,EAAE;AAApC,SAJS,EAKT,UALS,EAMT;AAAC,UAAA,OAAO,EAAE,UAAV;AAAsB,UAAA,WAAW,EAAE;AAAnC,SANS;AAdH,OAAD;;;;;;;;;;;;;;AA4CT,UAAa,qBAAb,CAAkC;;;YAPjC,0CAAA,CAAA,UAAA,C;AAAQ,MAAA,IAAA,EAAA,CAAC;AACR,QAAA,SAAS,EAAE,CACT,kBADS,EAET;AAAC,UAAA,OAAO,EAAE,oBAAV;AAAgC,UAAA,UAAU,EAAE;AAA5C,SAFS,EAGT;AAAC,UAAA,OAAO,EAAE,iBAAV;AAA6B,UAAA,QAAQ,EAAE,gBAAvC;AAAyD,UAAA,KAAK,EAAE;AAAhE,SAHS;AADH,OAAD;;;;;;;;;;;;ACnLT;;;;;;;;;;;;;;;;;ACAA,IAAA,OAAA,CAAA,MAAA,GAAA,gBAAA;AAEA,QAAA,eAAA,GAAA,CACA;AACA,MAAA,IAAA,EAAA,GADA;AAEA,MAAA,KAAA,EAAA;AAFA,KADA,EAIG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAJH,EAOG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAPH,EAUG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAVH,EAaG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAbH,EAgBG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAhBH,EAmBG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAnBH,EAsBG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAtBH,EAyBG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAzBH,EA4BG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA5BH,EA+BG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA/BH,EAkCG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAlCH,EAqCG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KArCH,EAwCG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAxCH,EA2CG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA3CH,EA8CG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA9CH,EAiDG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAjDH,EAoDG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KApDH,EAuDG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAvDH,EA0DG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA1DH,EA6DG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA7DH,EAgEG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAhEH,EAmEG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAnEH,EAsEG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAtEH,EAyEG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAzEH,EA4EG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA5EH,EA+EG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA/EH,EAkFG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAlFH,EAqFG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KArFH,EAwFG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAxFH,EA2FG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA3FH,EA8FG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA9FH,EAiGG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAjGH,EAoGG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KApGH,EAuGG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAvGH,EA0GG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA1GH,EA6GG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA7GH,EAgHG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAhHH,EAmHG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAnHH,EAsHG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAtHH,EAyHG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAzHH,EA4HG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA5HH,EA+HG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA/HH,EAkIG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAlIH,EAqIG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KArIH,EAwIG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAxIH,EA2IG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA3IH,EA8IG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA9IH,EAiJG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAjJH,EAoJG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KApJH,EAuJG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAvJH,EA0JG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA1JH,EA6JG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA7JH,EAgKG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAhKH,EAmKG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAnKH,EAsKG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAtKH,EAyKG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAzKH,EA4KG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA5KH,EA+KG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA/KH,EAkLG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAlLH,EAqLG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KArLH,EAwLG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAxLH,EA2LG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA3LH,EA8LG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA9LH,EAiMG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAjMH,EAoMG;AACH,MAAA,IAAA,EAAA,KADG;AAEH,MAAA,KAAA,EAAA;AAFG,KApMH,EAuMG;AACH,MAAA,IAAA,EAAA,KADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAvMH,EA0MG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA1MH,EA6MG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA7MH,EAgNG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAhNH,EAmNG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAnNH,EAsNG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAtNH,EAyNG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAzNH,EA4NG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA5NH,EA+NG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA/NH,EAkOG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAlOH,EAqOG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KArOH,EAwOG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAxOH,EA2OG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA3OH,EA8OG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA9OH,EAiPG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAjPH,EAoPG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KApPH,EAuPG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAvPH,EA0PG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA1PH,EA6PG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA7PH,EAgQG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAhQH,EAmQG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAnQH,EAsQG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAtQH,EAyQG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAzQH,EA4QG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA5QH,EA+QG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA/QH,EAkRG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAlRH,EAqRG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KArRH,EAwRG;AACH,MAAA,IAAA,EAAA,IADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAxRH,EA2RG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA3RH,EA8RG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KA9RH,EAiSG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KAjSH,EAoSG;AACH,MAAA,IAAA,EAAA,GADG;AAEH,MAAA,KAAA,EAAA;AAFG,KApSH,CAAA;AA0SA,QAAA,aAAA,GAAA,EAAA;;AACA,SAAA,IAAA,CAAA,GAAA,CAAA,EAAe,CAAA,GAAA,eAAA,CAAA,MAAf,EAA2C,CAAA,IAAA,CAA3C,EAA2C;AAC3C,UAAA,KAAA,GAAA,eAAA,CAAA,CAAA,CAAA,CAAA,KAAA;;AACA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAiB,CAAA,GAAA,KAAA,CAAA,MAAjB,EAAmC,CAAA,IAAA,CAAnC,EAAmC;AACnC,QAAA,aAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA,GAAA,eAAA,CAAA,CAAA,CAAA,CAAA,IAAA;AACA;AACA;;AAEA,aAAA,gBAAA,CAAA,GAAA,EAAA;AACA,aAAA,GAAA,CAAA,OAAA,CAAA,mBAAA,EAAA,UAAA,CAAA,EAAA;AACA,eAAA,aAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACG,OAFH,CAAA;AAGA;;AAEA,IAAA,OAAA,CAAA,eAAA,GAAA,eAAA;AACA,IAAA,OAAA,CAAA,aAAA,GAAA,aAAA;;;;;;;;;;;;;;AC3TA,QAAA,QAAA,GAAe,mBAAO;AAAC;AAAA,mDAAD,CAAtB;;AAEA,aAAA,cAAA,CAAA,MAAA,EAAA;AACA;AACA,UAAA,OAAA,MAAA,KAAA,QAAA,EAAA;AACA,QAAA,MAAA,GAAA,QAAA,CAAA,MAAA,CAAA;AACA;;AACA,UAAA,CAAA,MAAA,IAAA,OAAA,MAAA,CAAA,oBAAA,KAAA,UAAA,EAAA;AACA,cAAA,IAAA,KAAA,CAAA,+DAAA,CAAA;AACA;;AAEA,UAAA,KAAA,GAAA,KAAA,CAAA,SAAA,CAAA,KAAA,CAAA,IAAA,CAAA,MAAA,CAAA,oBAAA,CAAA,MAAA,CAAA,CAAA;AACA,aAAA,KAAA,CAAA,MAAA,CAAA,UAAA,IAAA,EAAA,IAAA,EAAA;AACA,YAAA,CAAA,GAAA,IAAA,CAAA,YAAA,CAAA,GAAA,KAAA,EAAA;AACA,eAAA,IAAA,GAAA,GAAA,GAAA,CAAA,CAAA,OAAA,CAAA,MAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AACG,OAHH,EAGG,EAHH,EAGG,IAHH,EAAA;AAIA;;AAEA,IAAA,MAAA,CAAA,OAAA,GAAA,YAAA;AACA,YAAA,IAAA,KAAA,CAAA,wEAAA,CAAA;AACA,KAFA;;AAIA,IAAA,MAAA,CAAA,OAAA,CAAA,KAAA,GAAA,cAAA,C,CAEA;;AACA,IAAA,MAAA,CAAA,OAAA,CAAA,UAAA,GAAA,cAAA;;;;;;;;;;;;;;;;;;;;;;ACTA,UAAA,CAAA;;ACoCmB,eAAA,CAAA,CAAQ,CAAR,EAAQ,CAAR,EAAgC;AAEjD,iBAAS,CAAT,GAAoB,CACpB;;AAAA,QAAA,CAAA,CAAA,SAAA,GAAqB,CAAA,CAAA,SAArB;AACA,QAAA,CAAA,CAAA,CAAA,GAAwB,CAAA,CAAA,SAAxB;AACA,QAAA,CAAA,CAAA,SAAA,GAAsB,IAAI,CAAJ,EAAtB;AAEE,QAAA,CAAA,CAAA,SAAA,CAAA,WAAA,GAAkC,CAAlC;;AAEF,aAAK,IAAL,CAAA,IAAA,CAAA,EACE,IAAA,eAAA,CAAA,EAIA,IAAI,MAAA,CAAJ,gBAAA,EAA6B;AAC3B,cAAI,CAAA,GAAa,MAAA,CAAA,wBAAA,CAAA,CAAA,EAAA,CAAA,CAAjB;AACI,UAAA,CAAJ,IACE,MAAA,CAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAHyB,CAGzB,CADE;AAFN,SAAA,MAOE,CAAA,CAAA,CAAA,CAAA,GAAe,CAAA,CArB8B,CAqB9B,CAAf;AArB6C;;ADlC7CC,eAAAA,CAAAA,CAOO,CAPPA,EAOO,CAPPA,EAOO,CAPPA,EAOO,CAPPA,EAOsE;AACvE,YAAA,CAAA,GAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,IAAA,KAAA,IAAA;AAMA,QAAA,CAAA,CAAA,CAAA,GAAoB,IAApB;AAMA,QAAA,CAAA,CAAA,CAAA,GAAe,IAAf;AAMA,QAAA,CAAA,CAAA,CAAA,GAAe,IAAf;AAMA,QAAA,CAAA,CAAA,CAAA,GAAiB,CAAA,CAAjB;AAEA,YAAIE,CAAAA,GAAkB;AACpB,UAAA,SAAA,EAAa,CADO,CAAA;AAEpB,UAAA,MAAA,EAFoB,SAAA;AAGpB,UAAA,SAAA,EAAa,CAHO,CAAA;AAIpB,UAAA,IAAA,EAAQ,CAJY,CAAA;AAKpB,UAAA,IAAA,EAAQ;AACJ,YAAA,IAAA,EAAQC,MAAAA,CAAAA,IAAAA,CAAAA,UAAAA,CADJ,MAAA;AAEJ,YAAA,SAAA,EAFI,SAAA;AAGJ,YAAA,WAAA,EAHI,EAAA;AAIJ,YAAA,KAAA,EAJI,EAAA;AAKJ,YAAA,YAAA,EAVgB;AAKZ,WALY;AAYpB,UAAA,QAAA,EAAY,IAAIA,MAAAA,CAAAA,IAAAA,CAAJ,MAAA,CAAA,CAAA,EAZQ,CAYR,CAZQ;AAapB,UAAA,KAAA,EAboB,kBAAA;AAcpB,UAAA,MAAA,EAdF;AAAsB,SAAtB;AAAA,YAiBIC,CAAAA,GAAa;AACf,UAAA,SAAA,EAAa,CADE,CAAA;AAEf,UAAA,MAAA,EAFe,SAAA;AAGf,UAAA,SAAA,EAAa,CAHE,CAAA;AAIf,UAAA,IAAA,EAAQ,CAJO,CAAA;AAKf,UAAA,IAAA,EAAQ;AACJ,YAAA,IAAA,EAAQD,MAAAA,CAAAA,IAAAA,CAAAA,UAAAA,CADJ,MAAA;AAEJ,YAAA,SAAA,EAFI,SAAA;AAGJ,YAAA,WAAA,EAHI,CAAA;AAIJ,YAAA,KAAA,EAJI,CAAA;AAKJ,YAAA,WAAA,EALI,OAAA;AAMJ,YAAA,YAAA,EAXW;AAKP,WALO;AAcf,UAAA,SAAA,EAAa,CAdE,CAAA;AAef,UAAA,QAAA,EAAY,IAAIA,MAAAA,CAAAA,IAAAA,CAAJ,MAAA,CAAA,CAAA,EAfG,CAeH,CAfG;AAgBf,UAAA,KAAA,EAhBe,kBAAA;AAiBf,UAAA,MAAA,EAjBe;AAAA,SAjBjB;AAqCGE,QAAAA,CAAH,KACEH,CADF,GACoBI,CAAAA,CAAAA,CAAAA,EADpB,CACoBA,CADpB,CAAGD;AAIAE,QAAAA,CAAH,KACEH,CADF,GACeE,CAAAA,CAAAA,CAAAA,EADf,CACeA,CADf,CAAGC;AAICC,QAAAA,CAAAA,GAAa;AACf,UAAA,SAAA,EAAa,CADE,CAAA;AAEf,UAAA,MAAA,EAFe,CAAA;AAGf,UAAA,WAAA,EAHe,QAAA;AAIf,UAAA,aAAA,EAJe,EAAA;AAKf,UAAA,SAAA,EALe,QAAA;AAMf,UAAA,WAAA,EANe,EAAA;AAOf,UAAA,YAAA,EAPe,CAAA;AAQf,UAAA,MAAA,EARe;AAAA,SAAbA;AAWDC,QAAAA,CAAH,KACED,CADF,GACeF,CAAAA,CAAAA,CAAAA,EADf,CACeA,CADf,CAAGG;AAIH,QAAA,CAAA,CAAA,CAAA,GAAoB,IAAIN,MAAAA,CAAAA,IAAAA,CAAJ,MAAA,CAAA,CAAA,CAApB;AACA,QAAA,CAAA,CAAA,CAAA,GAAe,IAAIA,MAAAA,CAAAA,IAAAA,CAAJ,MAAA,CAAA,CAAA,CAAf;AACA,QAAA,CAAA,CAAA,CAAA,GAAe,IAAIA,MAAAA,CAAAA,IAAAA,CAAJ,MAAA,CAAA,CAAA,CAAf;AAEAA,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,UAAAA,EAAAA,IAAAA;AACAA,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,CAAAA,EAAAA,UAAAA,EAAAA,IAAAA;AACA,QAAA,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,GAAA,CAAA,IAAA,CAAA,CAAA,EAAA,KAAA,EAAA,IAAA;AAEA,QAAA,CAAA,CAAA,GAAA,CAAA,kBAAA,EAAA,IAAA;AAEA,QAAA,CAAA,CAAA,GAAA,CAAA,kBAAA,EACK;AAACO,UAAAA,kBAAAA,EAAoB,CAArB,CAAA;AAA2BC,UAAAA,UAAAA,EADhC;AACK,SADL;AAGA,QAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,KAAA,EAA2B,CAAA,CAA3B,CAAA;AACA,QAAA,CAAA,CAAA,CAAA,CAAA,MAAA,CAAA,KAAA,EAA2B,CAAA,CAA3B,CAAA;AAEGC,QAAAA,CAAH,IACE,CAAA,CAAA,MAAA,CAxGqE,CAwGrE,CADCA;AAvGoE,eAAA,CAAA;AAP5CX;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,EAAAA,MAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA;AAwH9B,MAAA,CAAA,GA1HF,CAAA,CAAA,SA0HE;;AAAA,MAAA,CAAA,CAAA,GAAA,GAAA,UAAG,CAAH,EAAG,CAAH,EAAgB;AACb,YAAIY,CAAAA,CAAAA,IAAAA,CAAJ,CAAIA,CAAJ,EACE,MAAA,MAAA,CAAA,GAAA,4BAAA;AACK,kBAAA,CAAA,GACL,KAAA,MAAA,CADK,CACL,CADK,GAGLV,MAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,CAAAA,EANW,CAMXA,CAHK;AAQVW,OAXA;;AAWAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,YAAS;AACN,eAA4C,KAAA,GAAA,CADtC,KACsC,CAA5C;AAIHA,OALAA;;AAKAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,YAAqB;AAClB,eAAiD,KAAA,GAAA,CAD/B,kBAC+B,CAAjD;AAIHC,OALAD;;OAKAC,CAAAA,C,GAAAA,UAAkB,CAAlBA,EAAiC;AAC9B,aAAA,GAAA,CAAA,kBAAA,EAD8B,CAC9B;AAIHD,O;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,YAAc;AACX,eAA+C,KAAA,GAAA,CADpC,UACoC,CAA/C;AAIHA,OALAA;;AAKAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,YAAY;AACT,eAAI,KAAA,GAAA,CAAJ,UAAI,IACK,KAAA,CAAA,CADT,SACS,EADL,GADK,IACT;AAQHA,OATAA;;AASAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,YAAc;AACX,eAAmC,KAAA,GAAA,CADxB,UACwB,CAAnC;AAIHA,OALAA;;AAKAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,YAAqB;AAClB,eAAmC,KAAA,GAAA,CADjB,kBACiB,CAAnC;AAIHA,OALAA;;AAKAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,UAAkB,CAAlBA,EAA6B;AAC1B,aAAA,GAAA,CAAA,kBAAA,EAD0B,CAC1B;AAIHE,OALAF;;OAKAE,CAAAA,M,GAAAA,UAAM,CAANA,EAAY;AACTb,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,KAAAA,EAAAA,CAAAA;AACIc,QAAAA,CAAJ,GAqEIE,SAAAA,CArEJ,WAqEIA,KApEFD,KADF,CACEA,GAqEgBC,SAAAA,CAAAA,WAAAA,CAAAA,aAAAA,CArEhBD,KAsEIG,CAtEJH,CAsEIG,IAtEJH,CAAAA,IAAAA,CAqEgBC,EArEhBD,KAuEIO,CAvEJP,CAuEIO,IAvEJP,CAAAA,IAAAA,CAqEgBC,EArEhBD,KADF,CACEA,EAqEgBC,CADdA,CArEJ,IAGE,KAAA,CAAA,CAAA,MAAA,CAAA,UAAA,GACA,KAAA,CAAA,CAAA,MAAA,CAAA,UAAA,CADA,EAEA,KAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAFA,EAGA,KAAA,CAAA,CAAA,MAAA,CAAA,QAAA,CAHA,EAIAhB,MAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,IAAAA,CAJA,EAKAA,MAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EAAAA,IAAAA,CALA,EAMAgB,SAAAA,CAAAA,WAAAA,CAAAA,UAAAA,CAAiC,KAAjCA,CAAAA,CANA,EAOA,KAAA,CAAA,GAAiB,CAAA,CAPjB,EAQA,KAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CARA,EASA,KAAA,CAAA,CAAA,MAAA,CAdO,CAcP,CAZF,CAAIF;AAsBPG,O;;OAAAA,CAAAA,C,GAAAA,UAAgB,CAAhBA,EAA6B;AAC1B,aAAA,CAAA,CAAA,UAAA,CAAwBd,CAAAA,CAAAA,EAAAA,EADE,CACFA,CAAxB;AAIHQ,O;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,UAAgB,CAAhBA,EAA6B;AAC1B,aAAA,CAAA,CAAA,UAAA,CAAwBR,CAAAA,CAAAA,EAAAA,EADE,CACFA,CAAxB;AAOHe,OARAP;;OAQAO,CAAAA,C,GAAAA,UAAe,CAAfA,EAA0B;AAAA,YACnBC,CAAAA,GAAc,IAAInB,MAAAA,CAAAA,IAAAA,CAAJ,MAAA,CAAuBoB,CAAAA,CAAAA,MAAAA,CAAvB,QAAA,EACdA,CAAAA,CAAAA,MAAAA,CAFmB,SACL,CADK;AAAA,YAESC,CAAAA,GAAY,CAAA,KAAA,CAAA,CAAA,MAAA,EAFrB;;AAIvB,YAAA,CAAA,EAAe;AACb,cAAA,QAAI,KAAJ,CAAI,EAAJ,IACID,CAAAA,CAAAA,MAAAA,CADJ,QACIA,GAA2B,KAD/B,CAC+B,EAD/B,EAEE;AAEF,eAAA,CAAA,CAAA,MAAA,CAAyB,KAAzB,CAAyB,EAAzB;AACA,eAAA,CAAA,CAAA,MAAA,CAAoB,KAApB,CAAoB,EAApB;AACA,eAAA,CAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA;AACA,eAAA,CAAA,CAAA,MAAA,CAAA,UAAA,EAAA,IAAA;AACA,eAAA,CAAA,CAAA,MAAA,CAAA,QAAA,EAAA,IAAA,EAAA,UAAA;AACA,eAAA,CAAA,CAAA,MAAA,CAAA,QAAA,EAAA,IAAA,EAVa,UAUb;AAGE;;AAAA,aAAJ,CAAI,MAAsBA,CAAAA,CAAAA,MAAAA,CAA1B,QAAI,IAEFpB,MAAAA,CAAAA,IAAAA,CAAAA,SAAAA,CAAAA,SAAAA,CAAAA,GAAAA,CAAAA,IAAAA,CAAAA,IAAAA,EAAAA,UAAAA,EACIoB,CAAAA,CAAAA,MAAAA,CADJpB,QAAAA,CAFE;AAMAqB,SAAJ,CAAIA,IAAa,KAAjB,CAAiB,EAAbA,IACC,KAAA,CAAA,GAAA,MAAA,CADL,CACK,CADDA,IAGF,MAAA,CAAA,IAAA,CAAA,SAAA,CAAA,SAAA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,EAAA,UAAA,EA1BqB,CA0BrB,CAHEA;AAuBPV,O;;AAAAA,MAAAA,CAAAA,CAAAA,CAAAA,GAAAA,UAAiB,CAAjBA,EAAwB;AACrBX,QAAAA,MAAAA,CAAAA,IAAAA,CAAAA,KAAAA,CAAAA,OAAAA,CAAAA,IAAAA,EAAAA,mBAAAA,EADqB,CACrBA;AASHG,OAVAQ;;AAUAR,eAAAA,CAAAA,CAAY,CAAZA,EAAY,CAAZA,EAA6B;AAC1B,aAAKoB,IAAL,CAAA,IAAA,CAAA,EACoD,CAAlD,CAAkD,KAA9CC,CAAAA,CAAJ,CAAIA,CAA8C,KAChDC,CAAAA,CADF,CACEA,CAAAA,GAAcC,CAAAA,CADhB,CACgBA,CADkC;;AAIpD,eAN0B,CAM1B;AAQL;;AAAA,UAAA,CAAA,GAAuC;AACnC,QAAA,GAAA,EAAO,CAD4B,CAAA;AAEnC,QAAA,QAAA,EAAY,CAFuB,CAAA;AAGnC,QAAA,MAAA,EAAU,CAHd;AAAuC,OAAvC;AAAA,UAUAC,CAAAA,GAA2C,0BAV3C;AEzQGG,UAAAA,CAAAA,GAAAA,MAAAA;;AAAQ,eAAA,CAAA,GAAW;AFqRPjC,QAAAA,CEpRbkC,CAAAA,SFoRalC,CEpRbkC,WFoRalC,GAAAA,CEpRgCkC,CAAAA,SFoRhClC,CAAAA,CAAAA;AAAAA,QAAAA,CEnRbkC,CAAAA,SFmRalC,CEnRbkC,SFmRalC,GAAAA,CEnR8BkC,CAAAA,SFmR9BlC,CAAAA,CAAAA;AAAAA,QAAAA,CElRbkC,CAAAA,SFkRalC,CElRbkC,MFkRalC,GAAAA,CElR2BkC,CAAAA,SFkR3BlC,CAAAA,CAAAA;AAAAA,QAAAA,CEjRbkC,CAAAA,SFiRalC,CEjRbkC,kBFiRalC,GAAAA,CEjRuCkC,CAAAA,SFiRvClC,CAAAA,CAAAA;AAAAA,QAAAA,CEhRbkC,CAAAA,SFgRalC,CEhRbkC,WFgRalC,GAAAA,CEhRgCkC,CAAAA,SFgRhClC,CAAAA,CAAAA;AAAAA,QAAAA,CE/QbkC,CAAAA,SF+QalC,CE/QbkC,kBF+QalC,GAAAA,CE/QuCkC,CAAAA,SF+QvClC,CAAAA,CAAAA;AAAAA,QAAAA,CE9QbkC,CAAAA,SF8QalC,CE9QbkC,gBF8QalC,GAAAA,CE9QqCkC,CAAAA,SF8QrClC,CAAAA,CAAAA;AAAAA,QAAAA,CE7QbkC,CAAAA,SF6QalC,CE7QbkC,MF6QalC,GAAAA,CE7Q2BkC,CAAAA,SF6Q3BlC,CAAAA,MAAAA;AAAAA,QAAAA,CE5QbkC,CAAAA,SF4QalC,CE5QbkC,gBF4QalC,GAAAA,CE5QqCkC,CAAAA,SF4QrClC,CAAAA,CAAAA;AAAAA,QAAAA,CE3QbkC,CAAAA,SF2QalC,CE3QbkC,kBF2QalC,GAAAA,CE3QuCkC,CAAAA,SF2QvClC,CAAAA,CAAAA;AAAAA,QAAAA,CE1QbkC,CAAAA,SF0QalC,CE1QbkC,kBF0QalC,GAAAA,CE1QuCkC,CAAAA,SF0QvClC,CE1QuCkC,CF0QvClC;AAAAA,eAAAA,CAAAA;AErRO;;AAPnB,qBAAI,OAAO+B,CAAAA,CAAX,MAAA,IAA4CA,CAAAA,CAAAA,MAAAA,CAA5C,GAAA,GACEA,CAAAA,CAAAA,MAAAA,CAAAA,EAAAA,EADF,CACEA,CADF,GAEO,aAAI,OAAOA,CAAAA,CAAX,OAAA,GACLA,CAAAA,CAAAA,MAAAA,CADK,OACLA,GAA4BC,CADvB,EAAA,GAGLD,CAAAA,CAHK,iBAGLA,GAA4BC,CAAAA,EAL9B;;;;;;;;;;;;;;;AC5BH,QAAA,GAAA;;AAEA,QAAA,OAAA,MAAA,KAAA,WAAA,EAAA;AACA,MAAA,GAAA,GAAA,MAAA;AACC,KAFD,MAEC,IAAA,OAAA,MAAA,KAAA,WAAA,EAAA;AACD,MAAA,GAAA,GAAA,MAAA;AACC,KAFA,MAEA,IAAA,OAAA,IAAA,KAAA,WAAA,EAAA;AACD,MAAA,GAAA,GAAA,IAAA;AACC,KAFA,MAEA;AACD,MAAA,GAAA,GAAA,EAAA;AACA;;AAEA,IAAA,MAAA,CAAA,OAAA,GAAA,GAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACVA,QAAA,KAAA,GAAY,mBAAO;AAAC;AAAA,kDAAD,CAAnB;;AACA,QAAA,gBAAA,GAAuB,mBAAO;AAAC;AAAA,wCAAD,CAAP,CAAoB,MAA3C;;AACA,QAAA,iBAAA,GAAA,EAAA;AAEA;;;;AAGA,QAAA,MAAA,GAAA,EAAA;AAAA,QACA,MAAA,GAAA,EADA;AAAA,QAEA,OAAA,GAAA,EAFA;AAAA,QAGA,eAAA,GAAA,EAHA;AAKA,IAAA,KAAA,CAAA,OAAA,CAAA,UAAA,eAAA,EAAA;AACA,UAAA,CAAA,GAAA,eAAA;AACA,MAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,MAAA,MAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,MAAA,OAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACA,MAAA,eAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AACC,KAND;;AAQA,aAAA,iBAAA,CAAA,IAAA,EAAA;AACA,aAAA,MAAA,CAAA,SAAA,IAAA,GAAA,IAAA,GAAA,EAAA,CAAA,CAAA,CAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA;;AAEA,aAAA,cAAA,CAAA,UAAA,EAAA;AACA,UAAA,CAAA,UAAA,CAAA,MAAA,EAAA;AACA,cAAA,IAAA,SAAA,CAAA,2BAAA,CAAA;AACA;;AAEA,UAAA,CAAA,UAAA,CAAA,SAAA,EAAA;AACA,cAAA,IAAA,SAAA,CAAA,8BAAA,CAAA;AACA;;AAEA,MAAA,iBAAA,CAAA,UAAA,CAAA,MAAA,CAAA,GAAA,UAAA,CAAA,SAAA;AACA;;AAEA,IAAA,OAAA,CAAA,cAAA,GAAA,cAAA;AAEA;;;;;AAIA,aAAA,cAAA,CAAA,IAAA,EAAA;AACA,aAAA,MAAA,CAAA,IAAA,CAAA;AACA;;AACA,IAAA,OAAA,CAAA,cAAA,GAAA,cAAA;AAEA;;;;;AAIA,aAAA,cAAA,CAAA,IAAA,EAAA;AACA,aAAA,MAAA,CAAA,IAAA,CAAA;AACA;;AACA,IAAA,OAAA,CAAA,cAAA,GAAA,cAAA;AAEA;;;;;AAIA,aAAA,eAAA,CAAA,IAAA,EAAA;AACA,aAAA,eAAA,CAAA,cAAA,CAAA,IAAA,CAAA,CAAA;AACA;;AACA,IAAA,OAAA,CAAA,eAAA,GAAA,eAAA;AAEA;;;;;AAIA,aAAA,eAAA,CAAA,IAAA,EAAA;AACA,aAAA,eAAA,CAAA,IAAA,CAAA;AACA;;AACA,IAAA,OAAA,CAAA,eAAA,GAAA,eAAA;AAEA;;;;;AAIA,aAAA,eAAA,CAAA,IAAA,EAAA;AACA,UAAA,MAAA,GAAA,iBAAA,CAAA,IAAA,CAAA;AACA,aAAA,cAAA,CAAA,OAAA,CAAA,MAAA,CAAA,CAAA;AACA;;AACA,IAAA,OAAA,CAAA,eAAA,GAAA,eAAA;AAEA;;;;;AAIA,aAAA,eAAA,CAAA,IAAA,EAAA;AACA,UAAA,MAAA,GAAA,iBAAA,CAAA,IAAA,CAAA;AACA,aAAA,OAAA,CAAA,MAAA,CAAA;AACA;;AACA,IAAA,OAAA,CAAA,eAAA,GAAA,eAAA;AAEA;;;;;AAIA,aAAA,QAAA,CAAA,IAAA,EAAA;AACA,UAAA,OAAA,IAAA,KAAA,QAAA,EAAA;AACA,YAAA,WAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,iBAAA,eAAA,CAAA,IAAA,CAAA;AACA;;AACA,YAAA,IAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,iBAAA,cAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA;AACA;;AACA,YAAA,IAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,iBAAA,IAAA,CAAA,WAAA,EAAA;AACA;AACA;;AACA,UAAA,OAAA,IAAA,KAAA,QAAA,EAAA;AACA,eAAA,eAAA,CAAA,IAAA,CAAA;AACA;;AACA,aAAA,SAAA;AACA;;AACA,IAAA,OAAA,CAAA,QAAA,GAAA,QAAA;AAEA;;;;;AAIA,aAAA,QAAA,CAAA,IAAA,EAAA;AACA,UAAA,OAAA,IAAA,KAAA,QAAA,EAAA;AACA,YAAA,WAAA,IAAA,CAAA,IAAA,CAAA,EAAA;AACA,iBAAA,eAAA,CAAA,IAAA,CAAA;AACA;;AACA,YAAA,IAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,iBAAA,IAAA,CAAA,WAAA,EAAA;AACA;;AACA,YAAA,IAAA,CAAA,MAAA,KAAA,CAAA,EAAA;AACA,iBAAA,cAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA;AACA;AACA;;AACA,UAAA,OAAA,IAAA,KAAA,QAAA,EAAA;AACA,eAAA,eAAA,CAAA,IAAA,CAAA;AACA;;AACA,aAAA,SAAA;AACA;;AACA,IAAA,OAAA,CAAA,QAAA,GAAA,QAAA;AAEA;;;;;;AAKA,IAAA,OAAA,CAAA,OAAA,GAAA,UAAA,IAAA,EAAA,IAAA,EAAA;AACA,UAAA;AACA,YAAA,CAAA,GAAA,iBAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA;AACA,eAAA,CAAA,CAAA,QAAA,CAAA,IAAA,CAAA,CAAA;AACG,OAHH,CAGG,OAAA,GAAA,EAAA;AACH,eAAA,SAAA;AACA;AACA,KAPA;AASA;;;;;;AAIA,IAAA,OAAA,CAAA,QAAA,GAAA,UAAA,IAAA,EAAA;AACA,UAAA,CAAA,GAAA,iBAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA;;AACA,UAAA,CAAA,KAAA,SAAA,EAAA;AACA,eAAA,EAAA;AACA;;AACA,aAAA,CAAA;AACA,KANA;AAQA;;;;;;;AAKA,IAAA,OAAA,CAAA,aAAA,GAAA,UAAA,IAAA,EAAA,IAAA,EAAA;AACA,UAAA;AACA,YAAA,CAAA;AAAA,YAAA,SAAA,GAAA,iBAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA;;AACA,aAAA,CAAA,IAAA,SAAA,EAAA;AACA,cAAA,SAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAA;AACA,gBAAA,SAAA,CAAA,CAAA,CAAA,CAAA,WAAA,OAAA,IAAA,CAAA,WAAA,EAAA,EAAA;AACA,qBAAA,CAAA;AACA;AACA;AACA;;AACA,eAAA,SAAA;AACG,OAVH,CAUG,OAAA,GAAA,EAAA;AACH,eAAA,SAAA;AACA;AACA,KAdA;AAgBA;;;;;;;AAKA,IAAA,OAAA,CAAA,mBAAA,GAAA,UAAA,IAAA,EAAA,IAAA,EAAA;AACA,UAAA;AACA,YAAA,CAAA;AAAA,YAAA,SAAA,GAAA,iBAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA;;AACA,aAAA,CAAA,IAAA,SAAA,EAAA;AACA,cAAA,SAAA,CAAA,cAAA,CAAA,CAAA,CAAA,EAAA;AACA,gBAAA,gBAAA,CAAA,SAAA,CAAA,CAAA,CAAA,CAAA,WAAA,EAAA,CAAA,KAAA,gBAAA,CAAA,IAAA,CAAA,WAAA,EAAA,CAAA,EAAA;AACA,qBAAA,CAAA;AACA;AACA;AACA;;AACA,eAAA,SAAA;AACG,OAVH,CAUG,OAAA,GAAA,EAAA;AACH,eAAA,SAAA;AACA;AACA,KAdA;AAgBA;;;;;AAGA,IAAA,OAAA,CAAA,cAAA,GAAA,YAAA;AACA,aAAA,MAAA;AACA,KAFA;AAIA;;;;;;;AAKA,IAAA,OAAA,CAAA,aAAA,GAAA,UAAA,IAAA,EAAA,IAAA,EAAA;AACA,UAAA,MAAA,GAAA,KAAA,aAAA,CAAA,IAAA,EAAA,IAAA,CAAA;;AACA,UAAA,MAAA,EAAA;AACA,eAAA,KAAA,QAAA,CAAA,MAAA,CAAA;AACG,OAFH,MAEG;AACH,eAAA,SAAA;AACA;AACA,KAPA;AASA;;;;;;;AAKA,IAAA,OAAA,CAAA,mBAAA,GAAA,UAAA,IAAA,EAAA,IAAA,EAAA;AACA,UAAA,MAAA,GAAA,KAAA,mBAAA,CAAA,IAAA,EAAA,IAAA,CAAA;;AACA,UAAA,MAAA,EAAA;AACA,eAAA,KAAA,QAAA,CAAA,MAAA,CAAA;AACG,OAFH,MAEG;AACH,eAAA,SAAA;AACA;AACA,KAPA;AASA;;;;;AAGA,IAAA,OAAA,CAAA,cAAA,GAAA,YAAA;AACA,aAAA,MAAA;AACA,KAFA;AAIA;;;;;AAGA,IAAA,OAAA,CAAA,eAAA,GAAA,YAAA;AACA,aAAA,OAAA;AACA,KAFA;AAIA;;;;;AAGA,IAAA,OAAA,CAAA,KAAA,GAAA,YAAA;AACA,aAAA,MAAA,CAAA,IAAA,CAAA,iBAAA,CAAA;AACA,KAFA;AAIA;;;;;;AAIA,IAAA,OAAA,CAAA,OAAA,GAAA,UAAA,IAAA,EAAA;AACA,UAAA,CAAA,IAAA,EAAA;AACA,eAAA,KAAA;AACA;;AAEA,UAAA,OAAA,GAAA,IAAA,CAAA,QAAA,GAAA,WAAA,EAAA;AACA,aAAA,MAAA,CAAA,cAAA,CAAA,OAAA,KAAA,MAAA,CAAA,cAAA,CAAA,OAAA,CAAA,IACA,OAAA,CAAA,cAAA,CAAA,OAAA,CADA;AAEA,KARA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9QA,QAAA,GAAA,GAAU,mBAAO;AAAC;AAAA,iCAAD,CAAjB;;AAEA,IAAA,MAAA,CAAA,OAAA,GAAA,UAAA,IAAA,EAAA,EAAA,EAAA;AACA,UAAA,OAAA,IAAA,KAAA,QAAA,EAAA,IAAA,GAAA;AAA0C,QAAA,GAAA,EAAA;AAA1C,OAAA;AAEA,MAAA,GAAA,CAAA,IAAA,EAAA,UAAA,GAAA,EAAA,GAAA,EAAA,IAAA,EAAA;AACA,YAAA,GAAA,EAAA,OAAA,EAAA,CAAA,GAAA,CAAA;;AACA,YAAA,CAAA,KAAA,IAAA,CAAA,GAAA,CAAA,UAAA,CAAA,EAAA;AACA,iBAAA,EAAA,CAAA,IAAA,KAAA,CAAA,uBAAA,GAAA,CAAA,UAAA,CAAA,CAAA;AACA;;AACA,YAAA,GAAA,GAAA,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA;AACA,QAAA,GAAA,CAAA,SAAA,GAAA,IAAA;AACA,YAAA,GAAA,GAAA,GAAA,CAAA,aAAA,CAAA,KAAA,CAAA;AACA,YAAA,CAAA,GAAA,EAAA,OAAA,EAAA,CAAA,IAAA,KAAA,CAAA,6BAAA,CAAA,CAAA;AACA,QAAA,EAAA,CAAA,IAAA,EAAA,GAAA,CAAA;AACK,OAVL,CAAA;AAWA,KAdA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACKA,UAAa,iBAAb,CAA8B;AA4B5B,MAAA,WAAA,GAAA;AA1BU,aAAA,YAAA,GAAyD;AAAE,UAAA,OAAO,EAAE;AAAX,SAAzD;AAEA,aAAA,OAAA,GAAgC,EAAhC;AACA,aAAA,SAAA,GAAoC,EAApC;AACA,aAAA,QAAA,GAAkC,EAAlC;AACF,aAAA,QAAA,GAAW,KAAX;;;;;AAMR,aAAA,sBAAA,GAAyB,IAAzB;;;;;AAGA,aAAA,OAAA,GAA8B,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAA9B;;;;;AAGA,aAAA,KAAA,GAA0C,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAA1C;;;;;AAGA,aAAA,aAAA,GAAwD,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAAxD;AAOE,aAAK,MAAL,GAAc,IAAI,OAAJ;AAAW;;;;;AAAC,SAAC,OAAD,EAAU,MAAV,KAAgB;AACxC,eAAK,QAAL,GAAgB;AAAE,YAAA,OAAO,EAAE,OAAX;AAAoB,YAAA,MAAM,EAAE;AAA5B,WAAhB;AACD,SAFa,CAAd;AAGD;;;;;;;AAPD,UAAI,UAAJ,GAAc;AAA6B,eAAO,KAAK,aAAL,CAAmB,SAAnB,CAAP;AAAuC;;;;;;;AAClF,UAAI,UAAJ,CAAe,GAAf,EAA0C;AAAI,aAAK,YAAL,CAAkB,SAAlB,IAA+B,GAA/B;AAAqC;;;;;;;AAWnF,MAAA,OAAO,GAAA;AAAc,eAAO,KAAK,QAAZ;AAAuB;;;;;;;AAK5C,MAAA,KAAK,GAAA;AAAoB,eAAO,KAAK,MAAZ;AAAqB;;;;;;AAE9C,UAAI,GAAJ,GAAO;AACL,eAAO,KAAK,IAAZ;AACD;;;;;;;AAED,MAAA,gBAAgB,CAAC,GAAD,EAAa;AAC3B,eAAO,KAAK,aAAL,CAAmB,GAAnB,EAAwB,QAAxB,CAAP;AACD;;;;;;;;;AAKK,MAAA,OAAO,CAAC,OAAD,EAAuB,OAAvB,EAAuD;;AAClE,cAAI;AAEF,iBAAK,IAAL,GAAY,IAAI,MAAM,CAAC,IAAP,CAAY,GAAhB,CAAoB,OAApB,EAA2B,MAAA,CAAA,MAAA,CAAA;AACrC,cAAA,MAAM,EAAE,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,QAAvB,EAAiC,CAAC,QAAlC,CAD6B;AAErC,cAAA,IAAI,EAAE,EAF+B;AAGrC,cAAA,cAAc,EAAE,KAHqB;AAIrC,cAAA,gBAAgB,EAAE,KAJmB;AAKrC,cAAA,WAAW,EAAE,IALwB;AAMrC,cAAA,iBAAiB,EAAE,KANkB;AAOrC,cAAA,YAAY,EAAE,IAPuB;AAQrC,cAAA,aAAa,EAAE,IARsB;AASrC,cAAA,iBAAiB,EAAE,IATkB;AAUrC,cAAA,qBAAqB,EAAE;AACrB,gBAAA,UAAU,EAAE,CAAC,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAsB,OAAvB,EAAgC,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAsB,SAAtD;AADS;AAVc,aAAA,EAalC,OAbkC,CAA3B,CAAZ,CAFE,C;;AAmBF,iBAAK,GAAL,CAAS,WAAT,CAAqB,OAArB;AAA4B;;;;AAAG,YAAA,CAAD,IAAE;AAC9B,kBAAI,KAAK,sBAAT,EAAiC,KAAK,eAAL;AACjC,mBAAK,KAAL,CAAW,IAAX,CAAgB,CAAC,CAAC,MAAlB;AACD,aAHD;AAIA,iBAAK,GAAL,CAAS,WAAT,CAAqB,gBAArB;AAAqC;;;AAAE,kBAAA;;oBAC/B,MAAM,GAAG,KAAK,GAAL,CAAS,SAAT,E;AACf,mBAAK,aAAL,CAAmB,IAAnB,CAAwB,MAAxB;AACD,aAHD;AAKA,YAAA,OAAO,CAAC,KAAR,CAAc,cAAd,EA5BE,C;;AA+BF,YAAA,UAAU;AAAA;;;AAAC,kBAAA;AACT,mBAAK,QAAL,GAAgB,IAAhB;AACA,mBAAK,QAAL,CAAc,OAAd;AACA,mBAAK,OAAL,CAAa,IAAb;AACD,aAJS,EAIP,IAJO,CAAV;AAMA,kBAAM,KAAK,QAAX;AACA,mBAAO,KAAK,GAAZ;AACD,WAvCD,CAuCE,OAAO,CAAP,EAAU;AACV,iBAAK,QAAL,CAAc,MAAd,CAAqB,CAArB;AACD;AACF,S;AAAA;;;;;;;;;;AAOD,MAAA,cAAc,CAAC,QAAD,EAAiB;AAC7B,YAAI,CAAC,QAAD,IAAa,CAAC,KAAK,GAAvB,EAA4B,OAAO,CAAP;;;cACtB,IAAI,GAAG,KAAK,GAAL,CAAS,OAAT,E;AACb,eAAO,eAAe,IAAI,CAAC,GAAL,CAAS,QAAQ,GAAG,IAAI,CAAC,EAAhB,GAAqB,GAA9B,CAAf,GAAoD,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,IAAZ,CAA3D;AACD;;;;;;;;;;AAMD,MAAA,SAAS,CAAC,SAAD,EAAoB,QAApB,EAAkD;AACzD,aAAK,GAAL,CAAS,WAAT,CAAqB,SAArB,EAAgC,QAAhC;AACD;;;;;;;;AAKD,MAAA,WAAW,CAAC,SAAD,EAAkB;AAC3B,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAkB,cAAlB,CAAiC,KAAK,GAAtC,EAA2C,SAA3C;AACD;;;;;;;AAKD,MAAA,aAAa,GAAA;AACX,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAkB,sBAAlB,CAAyC,KAAK,GAA9C;AACD;;;;;;;;AAKD,MAAA,SAAS,CAAC,MAAD,EAAuD;;YAC1D,M;;AAEJ,YAAI,EAAE,MAAM,YAAY,MAAM,CAAC,IAAP,CAAY,MAAhC,CAAJ,EAA6C;AAC3C,UAAA,MAAM,CAAC,GAAP,GAAa,KAAK,GAAlB;AACA,UAAA,MAAM,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,MAAvB,CAAT;AACD,SAHD,MAGO;AACL,UAAA,MAAM,GAAG,MAAT;AACA,UAAA,MAAM,CAAC,MAAP,CAAc,KAAK,GAAnB;AACD;;AACD,aAAK,OAAL,CAAa,IAAb,CAAkB,MAAlB;AACA,eAAO,MAAP;AACD;;;;;;;AAED,MAAA,WAAW,CAAC,MAAD,EAA2D;;YAChE,I;;AAEJ,YAAI,EAAE,MAAM,YAAY,MAAM,CAAC,IAAP,CAAY,QAAhC,CAAJ,EAA+C;AAC7C,UAAA,MAAM,CAAC,GAAP,GAAa,KAAK,GAAlB;AACA,UAAA,IAAI,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,QAAhB,CAAyB,MAAzB,CAAP;AACD,SAHD,MAGO;AACL,UAAA,IAAI,GAAG,MAAP;AACA,UAAA,IAAI,CAAC,MAAL,CAAY,KAAK,GAAjB;AACD;;AAED,aAAK,SAAL,CAAe,IAAf,CAAoB,IAApB;AACA,eAAO,IAAP;AACD;;;;;;;AAED,MAAA,WAAW,CAAC,MAAD,EAAyD;;YAC9D,O;;AAEJ,YAAI,EAAE,MAAM,YAAY,MAAM,CAAC,IAAP,CAAY,OAAhC,CAAJ,EAA8C;AAC5C,UAAA,MAAM,CAAC,GAAP,GAAa,KAAK,GAAlB;AACA,UAAA,OAAO,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,OAAhB,CAAwB,MAAxB,CAAV;AACD,SAHD,MAGO;AACL,UAAA,OAAO,GAAG,MAAV;AACA,UAAA,OAAO,CAAC,MAAR,CAAe,KAAK,GAApB;AACD;;AAED,aAAK,QAAL,CAAc,IAAd,CAAmB,OAAnB;AACA,eAAO,OAAP;AACD;;;;;;AAED,MAAA,YAAY,GAAA;AACV,aAAK,OAAL,CAAa,OAAb;AAAoB;;;;AAAC,QAAA,CAAC,IAAA;AACpB,UAAA,CAAC,CAAC,MAAF,CAAS,IAAT;AACD,SAFD;AAGA,aAAK,OAAL,GAAe,EAAf;AACD;;;;;;AAED,MAAA,cAAc,GAAA;AACZ,aAAK,SAAL,CAAe,OAAf;AAAsB;;;;AAAC,QAAA,CAAC,IAAA;AACtB,UAAA,CAAC,CAAC,MAAF,CAAS,IAAT;AACD,SAFD;AAGA,aAAK,SAAL,GAAiB,EAAjB;AACD;;;;;;AAED,MAAA,cAAc,GAAA;AACZ,aAAK,QAAL,CAAc,OAAd;AAAqB;;;;AAAC,QAAA,CAAC,IAAA;AACrB,UAAA,CAAC,CAAC,MAAF,CAAS,IAAT;AACD,SAFD;AAGA,aAAK,QAAL,GAAgB,EAAhB;AACD;;;;;;;;AAKD,MAAA,UAAU,CAAC,KAAD,EAA4B;AACpC,aAAK,YAAL;AACA,QAAA,KAAK,CAAC,OAAN;AAAa;;;;AAAC,QAAA,CAAC,IAAA;AACb,UAAA,CAAC,CAAC,MAAF,CAAS,KAAK,GAAd;AACD,SAFD;AAGA,aAAK,OAAL,GAAe,CAAC,GAAG,KAAJ,CAAf;AACD;;;;;;;;;;;AAOD,MAAA,cAAc,CAAC,MAAD,EAAsD,OAAtD,EAA+E,EAA/E,EAA0F;;cAChG,UAAU,GAAG,EAAE,GAAG,KAAK,aAAL,CAAmB,EAAnB,CAAH,GAA4B,KAAK,U;AACtD,YAAI,OAAJ,EAAa,UAAU,CAAC,UAAX,CAAsB,OAAtB;;AAEb,YAAI,MAAM,YAAY,MAAM,CAAC,IAAP,CAAY,MAAlC,EAA0C;AACxC,UAAA,UAAU,CAAC,WAAX,CAAuB,MAAvB;AACA,UAAA,UAAU,CAAC,IAAX,CAAgB,KAAK,GAArB;AACD,SAHD,MAGO;AACL,UAAA,UAAU,CAAC,IAAX,CAAgB,KAAK,GAArB,EAA0B,MAA1B;AACD;;AACD,QAAA,UAAU,CAAC,QAAD,CAAV,GAAuB,IAAvB;AACA,eAAO,UAAP;AACD;;;;;;;AAKD,MAAA,eAAe,CAAC,EAAD,EAAY;;cACnB,UAAU,GAAG,EAAE,GAAG,KAAK,aAAL,CAAmB,EAAnB,CAAH,GAA4B,KAAK,U;;AACtD,YAAI,UAAJ,EAAgB;AACd,UAAA,UAAU,CAAC,KAAX;AACA,UAAA,UAAU,CAAC,QAAD,CAAV,GAAuB,KAAvB;AACD;AACF;;;;;;;;;AAOD,MAAA,aAAa,CAAC,EAAE,GAAG,SAAN,EAAe;;YACtB,UAAU,GAAG,KAAK,YAAL,CAAkB,EAAlB,C;;AAEjB,YAAI,CAAC,UAAL,EAAiB;AACf,UAAA,UAAU,GAAG,IAAI,MAAM,CAAC,IAAP,CAAY,UAAhB,CAA2B;AACtC,YAAA,OAAO,EAAE,QAD6B;AAEtC,YAAA,QAAQ,EAAE,KAAK,GAAL,CAAS,SAAT;AAF4B,WAA3B,CAAb;AAIA,UAAA,UAAU,CAAC,YAAD,CAAV,GAA2B,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAA3B;AACA,UAAA,UAAU,CAAC,WAAX,CAAuB,YAAvB;AAAmC;;;AAAE,gBAAM,UAAU,CAAC,YAAD,CAAV,CAAyB,IAAzB,EAA3C;AACA,eAAK,YAAL,CAAkB,EAAlB,IAAwB,UAAxB;AACD;;AACD,eAAO,UAAP;AACD;;;;;;;;;AAOD,MAAA,iBAAiB,CAAC,EAAD,EAAW;AAC1B,YAAI,CAAC,EAAL,EAAS;;;cACH,UAAU,GAAG,KAAK,YAAL,CAAkB,EAAlB,C;;AACnB,YAAI,UAAJ,EAAgB;AACd,UAAA,UAAU,CAAC,KAAX;AACA,UAAA,UAAU,CAAC,GAAX,CAAe,KAAf,EAAsB,IAAtB;AACA,UAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAkB,sBAAlB,CAAyC,UAAzC;AACA,iBAAO,KAAK,YAAL,CAAkB,EAAlB,CAAP;AACD;AACF;;AApR2B;;;YAD7B,0CAAA,CAAA,YAAA;;;;;;;;;;;;;QCCG,OAAO,GAAG,E;;;UACR,aAAa,GAAG,Y;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BtB,UAAa,YAAb,CAAyB;;;;;;;AAgCvB,MAAA,WAAA,CACU,iBADV,EAEU,aAFV,EAGU,GAHV,EAIU,IAJV,EAI0B;AAHhB,aAAA,iBAAA,GAAA,iBAAA;AACA,aAAA,aAAA,GAAA,aAAA;AACA,aAAA,GAAA,GAAA,GAAA;AACA,aAAA,IAAA,GAAA,IAAA;;;;;AA5BV,aAAA,cAAA,GAAiB,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAAjB;;;;;AAIA,aAAA,eAAA,GAAkB,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAAlB;;;;;AAKQ,aAAA,eAAA,GAAkB,IAAI,iCAAA,CAAA,SAAA,CAAJ,EAAlB;;;;;AAMA,aAAA,qBAAA,GAAwB,IAAI,iCAAA,CAAA,cAAA,CAAJ,EAAxB;;;;;AAEA,aAAA,SAAA,GAAY,IAAI,MAAM,CAAC,IAAP,CAAY,QAAhB,EAAZ;AAWuB;;;;;;;;AAM/B,UAAI,GAAJ,GAAO;AAAc,eAAO,CAAC,CAAC,KAAK,YAAd;AAA6B;;;;;;;AAClD,UAAI,GAAJ,CAAQ,GAAR,EAAoB;AAClB,YAAI,CAAC,KAAK,iBAAL,CAAuB,OAAvB,EAAL,EAAuC;AACrC,UAAA,OAAO,CAAC,IAAR,CAAa,kBAAb;AACA;AACD;;AAED,aAAK,OAAL;;AACA,YAAI,GAAJ,EAAS;AACP,eAAK,cAAL;AACD,SAFD,MAEO;AACL,eAAK,MAAL,CAAY,KAAK,mBAAjB,EAAsC,OAAtC;AACD;AACF;;;;;;;;AAGD,UAAY,qBAAZ,GAAiC;AAAK,+EAAgE,OAAhE;AAAoF;;;;;;;;;;;;;;;;;;;;;;AAoB1H,MAAA,MAAM,CAAC,kBAAD,EAAuC,MAAvC,EAAqD;AACzD,aAAK,iBAAL;AAEA,QAAA,OAAO,GAAG,MAAV;AACA,aAAK,mBAAL,GAA2B,kBAA3B;AACA,YAAI,KAAK,aAAT,EAAwB;;;cAElB,MAAM;AAAA;AAAG,aAAK,iBAAL,CAAuB,GAAvB,CAA2B,MAA3B,E;AACf,aAAK,aAAL,GAAqB,QAAQ,CAAC,aAAT,CAAuB,KAAvB,CAArB;;AACA,aAAK,aAAL,CAAmB,SAAnB,CAA6B,GAA7B,CAAiC,cAAjC;;AACA,aAAK,aAAL,CAAmB,KAAnB,CAAyB,OAAzB;AAWA,QAAA,MAAM,CAAC,aAAP,CAAqB,WAArB,CAAiC,KAAK,aAAtC;;AACA,aAAK,aAAL,CAAmB,OAAnB;AAA0B;;;AAAG,cAAM,KAAK,wBAAL,EAAnC;;AAEA,aAAK,qBAAL,GAA6B,IAAI,iCAAA,CAAA,cAAA,CAAJ,EAA7B;;AACA,aAAK,qBAAL,CAA2B,GAA3B,CACE,KAAK,eAAL,CACG,IADH,CAEI,MAAA,CAAA,2CAAA,CAAA,KAAA,CAAA,CAAA;AAAG;;;AAAC,cAAA;AACF,eAAK,OAAL,GAAe,IAAf;AACA,eAAK,wBAAL;AACD,SAHD,CAFJ,EAMI,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAA;AAAS;;;;AAAC,QAAA,MAAM,IAAI,MAAA,CAAA,iCAAA,CAAA,IAAA,CAAA,CAAA,CAAG,MAAH,CAApB,CANJ,EAOI,MAAA,CAAA,2CAAA,CAAA,UAAA,CAAA,CAAA;AAAQ;;;AAAC,cAAM,MAAA,CAAA,iCAAA,CAAA,OAAA,CAAA,CAAA,CAAM,IAAN,CAAf,CAPJ,EAQI,MAAA,CAAA,2CAAA,CAAA,WAAA,CAAA,CAAA;AAAS;;;;AAAC,QAAA,MAAM;AAAA;AAAI,aAAK,IAAL,CAAU,GAAV,WAAiB,KAAK,qBAAtB,SAA8C,MAAM,CAAC,UAAP,EAA9C,EAApB,CARJ,E;AAAA,SAWG,SAXH;AAWY;;;;AAAC,QAAA,QAAQ,IAAA;;;;gBAEX,OAAO,GAAG,QAAQ,CAAC,CAAD,CAAR;AAAe;AAAC,UAAA,QAAD,CAAkB,O;;;gBAC3C,WAAW,GAA+B,OAAO,CAAC,CAAD,CAAP,IAAc,O;AAC9D,eAAK,OAAL,GAAe,WAAW,IAAI,WAAW,CAAC,iBAA3B,IAAgD,aAA/D;AACA,eAAK,cAAL,CAAoB,IAApB,CAAyB,KAAK,OAA9B;AACA,eAAK,wBAAL;AACA,eAAK,GAAL,CAAS,aAAT,GAPiB,C;AASlB,SApBH,CADF;;AAwBA,aAAK,aAAL;AACA,aAAK,aAAL,GAAqB,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,WAA3B,CAAuC,MAAvC;AAA6C;;;AAAE,cAAM,KAAK,SAAL,EAArD,CAArB;AACA,aAAK,cAAL,GAAsB,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,WAA3B,CAAuC,OAAvC;AAA8C;;;AAAE,cAAM,KAAK,iBAAL,CAAuB,eAAvB,CAAuC,aAAvC,CAAtD,CAAtB;AACD;;;;;;;AAKD,MAAA,OAAO,GAAA;AACL,YAAI,KAAK,aAAT,EAAwB,KAAK,aAAL,CAAmB,MAAnB;AACxB,aAAK,aAAL,GAAqB,IAArB;;AACA,aAAK,qBAAL,CAA2B,WAA3B;;AACA,aAAK,iBAAL,CAAuB,eAAvB;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAkB,cAAlB,CAAiC,KAAK,aAAtC;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAkB,cAAlB,CAAiC,KAAK,cAAtC;AACA,aAAK,iBAAL;AACA,aAAK,iBAAL,CAAuB,eAAvB,CAAuC,aAAvC;AACD;;;;;;;AAGD,MAAA,wBAAwB,GAAA;AACtB,aAAK,aAAL,CAAmB,KAAnB;;;cACM,IAAI,GAAG,KAAK,aAAL,CAAmB,kBAAnB,CAAsC,KAAK,mBAA3C,EAAgE;AAAE,UAAA,SAAS,EAAE,KAAK;AAAlB,SAAhE,C;;;cACP,OAAO;AAAA;AAAG,QAAA,IAAI,CAAC,SAAL,CAAe,CAAf,C;;;cAEV,cAAc,GAAG,KAAK,GAAL,GAAW,KAAK,YAAL,CAAkB,WAAlB,EAAX,GAA6C,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,SAA3B,E;;;cAC9D,MAAM,GAAG,KAAK,iBAAL,CAAuB,cAAvB,CAAsC,cAAc,CAAC,GAAf,EAAtC,IAA8D,E;;;cACvE,GAAG,GAAG,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAqB,SAArB,CAA+B,aAA/B,CAA6C,cAA7C,EAA6D,MAA7D,EAAqE,CAArE,C;AAEZ,aAAK,iBAAL,CACG,cADH,CACkB,GADlB,EACuB,OADvB,EACgC,aADhC,EAEG,UAFH,CAEc;AAAE,UAAA,cAAc,EAAE;AAAlB,SAFd;AAGD;;;;;;;AAKD,MAAA,aAAa,GAAA;;cACL,cAAc,GAAG,KAAK,GAAL,GAAW,KAAK,YAAL,CAAkB,WAAlB,EAAX,GAA6C,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,SAA3B,E;;AACpE,aAAK,eAAL,CAAqB,IAArB,CAA0B,cAA1B;AACD;;;;;;;;AAGO,MAAA,cAAc,GAAA;AACpB,YAAI,KAAK,YAAT,EAAuB,KAAK,iBAAL;AACvB,aAAK,YAAL,GAAoB,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB;AACzC,UAAA,IAAI,EAAE,sDADmC;AAEzC,UAAA,GAAG,EAAE,KAAK,iBAAL,CAAuB,GAFa;AAGzC,UAAA,QAAQ,EAAE,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,SAA3B;AAH+B,SAAvB,CAApB;;AAMA,aAAK,YAAL,CAAkB,WAAlB,CAA8B,OAA9B;AAAqC;;;AAAE,cAAM,KAAK,wBAAL,EAA7C;AACD;;;;;;;;AAGO,MAAA,iBAAiB,GAAA;AACvB,YAAI,CAAC,KAAK,YAAV,EAAwB;;AACxB,aAAK,YAAL,CAAkB,MAAlB,CAAyB,IAAzB;;AACA,QAAA,MAAM,CAAC,IAAP,CAAY,KAAZ,CAAkB,sBAAlB,CAAyC,KAAK,YAA9C;AACA,aAAK,YAAL,GAAoB,IAApB;AACD;;;;;;;AAEO,MAAA,SAAS,GAAA;;cACT,MAAM,GAAG,KAAK,iBAAL,CAAuB,GAAvB,CAA2B,SAA3B,E;AACf,aAAK,eAAL,CAAqB,IAArB,CAA0B,MAAM,CAAC,MAAP,EAA1B;AACA,aAAK,aAAL;AACD;;AAjMsB;;;;;;AClCzB;;;;;;;;;;;;;;AAwBA,UAAa,kCAAb,CAA+C;;;;;;;AA8C7C,MAAA,WAAA,CACY,iBADZ,EAEY,EAFZ,EAGU,IAHV,EAIY,GAJZ,EAIkC;AAHtB,aAAA,iBAAA,GAAA,iBAAA;AACA,aAAA,EAAA,GAAA,EAAA;AACF,aAAA,IAAA,GAAA,IAAA;AACE,aAAA,GAAA,GAAA,GAAA;;;;;;;AA3CZ,aAAA,SAAA,GAA0B,IAAI,YAAJ,CAAiB,KAAK,iBAAtB,EAAyC,KAAK,EAA9C,EAAkD,KAAK,GAAvD,EAA4D,KAAK,IAAjE,CAA1B;AACU,aAAA,KAAA,GAAyB,EAAzB;;;;;;AAYD,aAAA,kBAAA,GAAqB,IAArB;;;;;;AAYA,aAAA,iBAAA,GAAuC,OAAvC;AAkB8B;;;;;;;;AAbvC,UACI,IADJ,CACS,GADT,EAC6B;AAAI,aAAK,KAAL,GAAa,GAAG,IAAI,EAApB;AAAyB;;;;;;AAC1D,UAAI,IAAJ,GAAQ;AAAsB,eAAO,KAAK,KAAZ;AAAoB;;;;;;;AAKlD,UAAI,GAAJ,GAAO;AAAsB,eAAO,KAAK,iBAAL,CAAuB,GAA9B;AAAoC;;;;;;AAQjE,MAAA,QAAQ,GAAA;AACN,aAAK,iBAAL,CAAuB,OAAvB,CAA+B,KAAK,MAAL,CAAY,aAA3C,EAA0D,KAAK,UAA/D;AACD;;;;;;;AAKD,MAAA,KAAK,GAAA;AACH,eAAO,KAAK,iBAAL,CAAuB,KAAvB,EAAP;AACD;;;;;;;;;AAGD,MAAA,SAAS,CAAC,MAAD,EAAiB,IAAjB,EAAoC;AAC3C,eAAO,IAAI,CAAC,EAAZ;AACD;;AAlE4C;;;YAN9C,0CAAA,CAAA,WAAA,C;AAAS,MAAA,IAAA,EAAA,CAAC;AACT,QAAA,QAAQ,EAAE,UADD;AAET,QAAA,QAAA,EAAA,2TAFS;;AAAA,OAAD;;;;;YAhBD;;YAF8D,0CAAA,CAAA,kBAAA;;YAI9D,iDAAA,CAAA,YAAA;;YAJgF,0CAAA,CAAA,mBAAA;;;;;cAyBtF,0CAAA,CAAA,WAAA,C;AAAS,QAAA,IAAA,EAAA,CAAC,KAAD;;;cAaT,0CAAA,CAAA,OAAA;;;cAMA,0CAAA,CAAA,OAAA;;;cAMA,0CAAA,CAAA,OAAA;;;cAMA,0CAAA,CAAA,OAAA;;;cAKA,0CAAA,CAAA,OAAA;;;;;;;;AC7DH,UAgCa,mBAhCb,CAgCgC;;;;;AA4B9B,MAAA,WAAA,CAAsB,UAAtB,EAA+D,EAA/D,EAA6E;AAAvD,aAAA,UAAA,GAAA,UAAA;AAAyC,aAAA,EAAA,GAAA,EAAA;;;;;AAtBrD,aAAA,MAAA,GAAS,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAAT;;;;;AAEA,aAAA,UAAA,GAAa,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAAb;AAED,aAAA,SAAA,GAAY,KAAZ;AACA,aAAA,OAAA,GAAU,KAAV;AAGA,aAAA,QAAA,GAAW,EAAX;AAOA,aAAA,eAAA,GAAkB,IAAlB;AAKT,aAAA,YAAA,GAAe,IAAI,iCAAA,CAAA,cAAA,CAAJ,EAAf;AAEkF;;;;;;AAElF,UAAI,gBAAJ,GAAoB;AAClB,eAAO,KAAK,UAAL,CAAgB,aAAhB,CAA8B,KAAK,EAAnC,CAAP;AACD;;;;;;AAED,UAAI,UAAJ,GAAc;AACZ,eAAQ,KAAK,QAAL,IAAiB,KAAK,SAAL,KAAmB,KAArC,IAA+C,KAAK,OAAL,KAAiB,KAAvE;AACD;;;;;;AAED,UAAI,QAAJ,GAAY;AACV,eAAO,MAAM,CAAC,UAAP,GAAoB,GAA3B;AACD;;;;;;AAED,UAAI,MAAJ,GAAU;AACR,eAAO,KAAK,UAAL,CAAgB,gBAAhB,CAAiC,KAAK,EAAtC,CAAP;AACD;;;;;;AAED,MAAA,kBAAkB,GAAA;;cACV,QAAQ,GAAG,KAAK,kBAAL,IAA2B,KAAK,kB;AACjD,aAAK,IAAL,GAAY,QAAQ,IAAI,QAAQ,CAAC,kBAAT,CAA4B,KAAK,GAAjC,CAAxB;AACA,aAAK,UAAL,CAAgB,KAAhB,CAAsB,SAAtB;AAA+B;;;AAAC,cAAM,KAAK,UAAL,EAAtC;AACA,aAAK,YAAL,GAAoB,KAAK,gBAAL,CAAsB,YAAtB,EAAoC,SAApC;AAA6C;;;AAAC,cAAM,KAAK,UAAL,CAAgB,IAAhB,EAApD,CAApB;AACD;;;;;;AAED,MAAA,WAAW,GAAA;AACT,YAAI,KAAK,EAAT,EAAa,KAAK,UAAL,CAAgB,iBAAhB,CAAkC,KAAK,EAAvC;AACb,aAAK,YAAL,CAAkB,WAAlB;AACD;;;;;;AAED,MAAA,mBAAmB,GAAA;AACjB,eAAO,KAAK,UAAL,CAAgB,aAAhB,CAA8B,KAAK,EAAnC,CAAP;AACD;;;;;;;AAED,MAAA,IAAI,CAAC,MAAD,EAAmD;AACrD,YAAI,KAAK,EAAL,IAAW,KAAK,IAAhB,IAAwB,CAAC,KAAK,IAAL,CAAU,SAAvC,EAAkD,KAAK,EAAL,CAAQ,MAAR,CAAe,KAAK,IAApB;AAClD,aAAK,OAAL,GAAe,KAAK,IAAL,IAAa,KAAK,IAAL,CAAU,SAAV,CAAoB,CAApB,CAA5B;AACA,aAAK,UAAL,CAAgB,cAAhB,CAA+B,MAA/B,EAAuC,KAAK,OAA5C,EAAqD,KAAK,EAA1D;AACD;;;;;;AAED,MAAA,KAAK,GAAA;AACH,YAAI,KAAK,UAAL,CAAgB,gBAAhB,CAAiC,KAAK,EAAtC,CAAJ,EAA+C;AAC7C,eAAK,UAAL,CAAgB,eAAhB,CAAgC,KAAK,EAArC;AACA,eAAK,QAAL;AACD;AACF;;;;;;;;AAGO,MAAA,UAAU,GAAA;AAChB,YAAI,KAAK,eAAT,EACE,KAAK,KAAL;AACH;;;;;;;;AAGO,MAAA,QAAQ,GAAA;AACd,YAAI;AACF,eAAK,EAAL,CAAQ,MAAR,CAAe,CAAf;AACA,eAAK,IAAL,CAAU,OAAV;AACA,eAAK,EAAL,CAAQ,KAAR;AACD,SAJD,CAIE,OAAO,EAAP,EAAW;AACX,UAAA,OAAO,CAAC,IAAR,CAAa,EAAb;AACD;;AACD,aAAK,MAAL,CAAY,IAAZ;AACD;;AA3F6B;;;YAhB/B,0CAAA,CAAA,WAAA,C;AAAS,MAAA,IAAA,EAAA,CAAC;AACT,QAAA,QAAQ,EAAE,iBADD;AAET,QAAA,QAAQ;AAFC,OAAD;;;;;YAFD;;YAVP,0CAAA,CAAA,YAAA;;;;;cA6BC,0CAAA,CAAA,WAAA,C;AAAS,QAAA,IAAA,EAAA,CAAC,MAAD;;;cAET,0CAAA,CAAA,WAAA,C;AAAS,QAAA,IAAA,EAAA,CAAC,iBAAD;;;cACT,0CAAA,CAAA,WAAA,C;AAAS,QAAA,IAAA,EAAA,CAAC,IAAD,EAAO;AAAE,UAAA,IAAI,EAAE,0CAAA,CAAA,kBAAA;AAAR,SAAP;;;cAET,0CAAA,CAAA,QAAA;;;cAEA,0CAAA,CAAA,QAAA;;;cAEA,0CAAA,CAAA,OAAA;;;cACA,0CAAA,CAAA,OAAA;;;cAEA,0CAAA,CAAA,OAAA;;;cACA,0CAAA,CAAA,OAAA;;;cAGA,0CAAA,CAAA,OAAA,C;AAAK,QAAA,IAAA,EAAA,CAAC,UAAD;;;cAGL,0CAAA,CAAA,OAAA,C;AAAK,QAAA,IAAA,EAAA,CAAC,SAAD;;;cACL,0CAAA,CAAA,OAAA;;;;;;;;;;;;;UC7CG,mBAAmB,GAAG,E;;;;;;;;UAMtB,GAAG,GAAG;AACV,MAAA,KAAK,EAAE,EADG;AAEV,MAAA,aAAa,EAAE,EAFL;AAGV,MAAA,UAAU,EAAE;AAHF;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0BZ,UAAa,sBAAb,CAAmC;;;;AA6BjC,MAAA,WAAA,CAAoB,UAApB,EAAiD;AAA7B,aAAA,UAAA,GAAA,UAAA;AA3BpB,aAAA,SAAA,GAAY,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB;AAAE,UAAA,QAAQ,EAAE;AAAE,YAAA,GAAG,EAAE,GAAP;AAAY,YAAA,GAAG,EAAE;AAAjB;AAAZ,SAAvB,CAAZ;AACA,aAAA,iBAAA,GAAqD,EAArD;AACA,aAAA,qBAAA,GAAyD,EAAzD;AAEA,aAAA,YAAA,GAAe,IAAI,iCAAA,CAAA,cAAA,CAAJ,EAAf;AACA,aAAA,YAAA,GAAe,KAAf;AACA,aAAA,OAAA,GAAU,IAAI,MAAM,CAAC,IAAP,CAAY,OAAhB,CAAwB;AAChC,UAAA,WAAW,EAAE,KAAK,KADc;AAEhC,UAAA,aAAa,EAAE,GAFiB;AAGhC,UAAA,YAAY,EAAE,CAHkB;AAIhC,UAAA,SAAS,EAAE,KAAK,KAJgB;AAKhC,UAAA,WAAW,EAAE,CAAC,KAAK,OAAN,GAAgB,GAAhB,GAAsB,CALH;AAMhC,UAAA,SAAS,EAAE;AANqB,SAAxB,CAAV;AAYA,aAAA,eAAA,GAAkB,KAAlB;;;;;;AAMS,aAAA,iBAAA,GAAuC,OAAvC;AAG6C;;;;;;AAEhD,MAAA,kBAAkB,GAAA;;AACtB,gBAAM,KAAK,UAAL,CAAgB,KAAhB,EAAN,C;;AAGA,eAAK,iBAAL;AACA,eAAK,YAAL,CAAkB,GAAlB,CACE,KAAK,UAAL,CAAgB,aAAhB,CACG,SADH;AACY;;;AAAC,gBAAM,KAAK,iBAAL,EADnB,CADF;AAKA,eAAK,UAAL;AACD,S;AAAA;;;;;;AAED,MAAA,WAAW,GAAA;AACT,YAAI,CAAC,KAAK,aAAV,EAAyB;AACzB,aAAK,UAAL;AACD;;;;;;AAED,MAAA,WAAW,GAAA;AACT,aAAK,OAAL,CAAa,MAAb,CAAoB,IAApB;AACA,aAAK,UAAL,CAAgB,MAAhB,CAAuB,IAAvB;AACA,aAAK,SAAL,CAAe,MAAf,CAAsB,IAAtB;AACA,aAAK,YAAL,CAAkB,WAAlB;AACA,YAAI,KAAK,YAAT,EAAuB,KAAK,YAAL,CAAkB,MAAlB;AACxB;;;;;;;AAKD,UAAI,KAAJ,GAAS;AAAa,eAAO,KAAK,aAAL,IAAsB,KAAK,aAAL,CAAmB,KAAzC,IAAkD,KAAK,YAA9D;AAA6E;;;;;;;AAEnG,UAAc,QAAd,GAAsB;AAAc,eAAO,CAAC,CAAC,KAAK,aAAP,IAAwB,KAAK,aAAL,CAAmB,KAAnB,GAA2B,CAA1D;AAA8D;;;;;;;AAClG,UAAc,OAAd,GAAqB;AAAc,eAAO,KAAK,aAAL,IAAsB,KAAK,aAAL,CAAmB,SAAhD;AAA4D;;;;;;;AAC/F,UAAc,gBAAd,GAA8B;AAAc,eAAO,IAAP;AAAc;;;;;;;;AAM1D,UAAc,KAAd,GAAmB;;cACX,IAAI,GAAG,KAAK,UAAL,IAAmB,KAAK,UAAL,CAAgB,GAAnC,IAA0C,KAAK,UAAL,CAAgB,GAAhB,CAAoB,OAApB,EAA1C,IAA2E,C;;;cAClF,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,GAAG,CAAC,aAAJ,GAAoB,IAA9B,C;AACV,eAAO,IAAI,CAAC,GAAL,CAAS,CAAT,EAAY,CAAZ,KAAkB,KAAK,aAAL,CAAmB,KAAnB,IAA4B,KAAK,aAAL,CAAmB,KAA/C,IAAwD,CAA1E,CAAP;AACD;;;;;;;AAKD,UAAI,SAAJ,GAAa;AACX,YAAI,KAAK,gBAAT,EACE,OAAO,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,OAAb,GAAuB,KAAvB,CAA6B,CAA7B,CAAvB,CADF,KAGE,OAAO,KAAK,aAAL,CAAmB,QAA1B;AACH;;;;;;;AAKD,UAAI,UAAJ,GAAc;AACZ,YAAI,KAAK,gBAAT,EACE,OAAO,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,OAAb,GAAuB,KAAvB,CAA6B,CAA7B,CAAvB,CADF,KAGE,OAAO,KAAK,aAAL,CAAmB,QAA1B;AACH;;;;;;;AAED,UAAc,cAAd,GAA4B;AAC1B,eAAO,KAAK,gBAAZ;AACD;;;;;;;;AAKD,UAAc,IAAd,GAAkB;AAChB,eAAO,KAAK,UAAL,CAAgB,GAAhB,IAAuB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,OAApB,EAA9B;AACD;;;;;;;AAKD,MAAA,cAAc,GAAA;AACZ,YAAI,CAAC,KAAK,aAAL,CAAmB,QAApB,IAAgC,CAAC,KAAK,UAAL,CAAgB,GAArD,EAA0D,OAAO,CAAP;AAC1D,eAAO,KAAK,UAAL,CAAgB,cAAhB,CAA+B,KAAK,aAAL,CAAmB,QAAnB,CAA4B,GAA5B,EAA/B,CAAP;AACD;;;;;;;;AAKS,MAAA,iBAAiB,GAAA;;cACnB,IAAI,GAAG,KAAK,OAAL,IAAgB,KAAK,OAAL,CAAa,OAAb,E,CADJ,C;;AAIzB,YAAI,IAAI,IAAI,CAAC,CAAC,IAAI,CAAC,SAAL,EAAd,EAAgC;;cAC1B,iBAAiB,GAAG,K;;AACxB,cAAI,IAAI,CAAC,QAAL,GAAgB,MAApB,EAA4B;;kBACpB,MAAM,GAAG,KAAK,UAAL,CAAgB,GAAhB,CAAoB,SAApB,E;AACf,YAAA,IAAI,CAAC,OAAL;AAAY;;;;AAAC,YAAA,CAAC,IAAI,iBAAiB,GAAG,iBAAiB,IAAI,MAAM,IAAI,MAAM,CAAC,QAAP,CAAgB,CAAhB,CAArE;AACD;;AAED,cAAI,iBAAJ,EAAuB;AACrB,iBAAK,SAAL,CAAe,UAAf,CAA0B,IAA1B;AACA,iBAAK,OAAL,CAAa,UAAb,CAAwB,IAAxB;AACA,iBAAK,UAAL,CAAgB,UAAhB,CAA2B,IAA3B;AACD,WAJD,MAIO;AACL,iBAAK,SAAL,CAAe,UAAf,CAA0B,KAA1B;AACA,iBAAK,OAAL,CAAa,UAAb,CAAwB,KAAxB;AACA,iBAAK,UAAL,CAAgB,UAAhB,CAA2B,KAA3B;AACD;AACF,SAhBD,C;AAAA,aAkBK,IAAI,KAAK,SAAT,EAAoB;;kBACjB,MAAM,GAAG,KAAK,UAAL,CAAgB,GAAhB,CAAoB,SAApB,E;;;kBACT,OAAO,GAAG,CAAC,CAAC,MAAF,IAAY,MAAM,CAAC,QAAP,CAAgB,KAAK,SAAL,CAAe,WAAf,EAAhB,C;AAC5B,iBAAK,SAAL,CAAe,UAAf,CAA0B,OAA1B;AACA,iBAAK,OAAL,CAAa,UAAb,CAAwB,OAAxB;AACA,iBAAK,UAAL,CAAgB,UAAhB,CAA2B,OAA3B;AACD;AACF;;;;;;;AAES,MAAA,mBAAmB,GAAA;AAC3B,aAAK,qBAAL,CAA2B,OAA3B;AAAkC;;;;AAAC,QAAA,CAAC,IAAI,CAAC,CAAC,MAAF,EAAxC;AACA,aAAK,qBAAL,GAA6B,EAA7B;AACA,aAAK,iBAAL,CAAuB,OAAvB;AAA8B;;;;AAAC,QAAA,CAAC,IAAI,CAAC,CAAC,MAAF,EAApC;AACA,aAAK,iBAAL,GAAyB,EAAzB;AACD;;;;;;;AAES,MAAA,mBAAmB,GAAA;;cACrB,WAAW,GAAI,KAAK,cAAL,IAAuB,KAAK,IAAL,IAAa,GAAG,CAAC,aAAzC,IAA4D,KAAK,QAAL,IAAiB,KAAK,IAAL,GAAY,GAAG,CAAC,a;;AAEjH,YAAI,WAAW,IAAI,CAAC,KAAK,aAAL,CAAmB,IAAvC,EAA6C;;AAG3C,cAAI,KAAK,qBAAL,CAA2B,MAA3B,GAAoC,CAAxC,EAA2C;AACzC,iBAAK,mBAAL;;AACA,gBAAI,KAAK,iBAAL,KAA2B,OAA/B,EAAwC;AACtC,mBAAK,qBAAL,CAA2B,IAA3B,CACE,KAAK,OAAL,CAAa,WAAb,CAAyB,OAAzB;AAAgC;;;AAAE,oBAAM,KAAK,WAAL,EAAxC,CADF;AAGD,aAJD,MAIO;AACL,kBAAI,KAAK,iBAAL,KAA2B,OAA/B,EAAwC;AACtC,qBAAK,qBAAL,CAA2B,IAA3B,CACE,KAAK,OAAL,CAAa,WAAb,CAAyB,WAAzB;AAAoC;;;AAAE,sBAAM,KAAK,WAAL,EAA5C,CADF,EAEE,KAAK,OAAL,CAAa,WAAb,CAAyB,UAAzB;AAAmC;;;AAAE,sBAAM,KAAK,UAAL,EAA3C,CAFF;AAID;AACF;AACF;AACF,SAlBD,MAkBO;;AAGL,cAAI,KAAK,iBAAL,CAAuB,MAAvB,GAAgC,CAApC,EAAuC;AACrC,iBAAK,mBAAL;;AACA,gBAAI,KAAK,iBAAL,KAA2B,OAA/B,EAAwC;AACtC,mBAAK,iBAAL,CAAuB,IAAvB,CACE,KAAK,SAAL,CAAe,WAAf,CAA2B,OAA3B;AAAkC;;;AAAE,oBAAM,KAAK,WAAL,EAA1C,CADF;AAGD,aAJD,MAIO;AACL,mBAAK,iBAAL,CAAuB,IAAvB,CACE,KAAK,SAAL,CAAe,WAAf,CAA2B,WAA3B;AAAsC;;;AAAE,oBAAM,KAAK,WAAL,EAA9C,CADF,EAEE,KAAK,SAAL,CAAe,WAAf,CAA2B,UAA3B;AAAqC;;;AAAE,oBAAM,KAAK,UAAL,EAA7C,CAFF;AAID;AACF;AACF,SArC0B,C;;;AAwC3B,YAAI,CAAC,KAAK,YAAV,EACE,KAAK,YAAL,GAAoB,KAAK,UAAL,CAAgB,GAAhB,CAAoB,WAApB,CAAgC,cAAhC;AAA8C;;;AAAE,cAAM,KAAK,aAAL,EAAtD,CAApB;AACH;;;;;;;;AAKS,MAAA,iBAAiB,GAAA;;cACnB,CAAC,GAAG,IAAI,CAAC,IAAL,CAAU,KAAK,IAAL,GAAY,GAAG,CAAC,aAA1B,C;;;cAGJ,KAAK,GAA+B,E;;;cACpC,CAAC,GAAG,mBAAmB,GAAG,KAAK,K;;;cAC/B,UAAU,GAAG,IAAI,CAAC,KAAL,CAAW,CAAC,GAAG,KAAK,cAAL,EAAJ,GAA4B,EAAvC,C;;;cACb,eAAe,GAAG,K,CAPC,C;;;;cAWnB,SAAS,GAAG;AAChB,UAAA,IAAI,sBAAe,UAAf,CADY;AAEhB,UAAA,KAAK,EAAE,CAFS;AAGhB,UAAA,YAAY,EAAE,CAHE;AAIhB,UAAA,WAAW,EAAE;AAJG,S;;;cAOZ,KAAK,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,aAAL,CAAmB,KAA9B,C;;AACd,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,KAArB,EAA4B,CAAC,EAA7B,EAAiC;;gBACzB,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,MAAM,KAAN,GAAc,CAAzB,C;AAChB,UAAA,KAAK,CAAC,IAAN,CAAW;AACT,YAAA,IAAI,EAAG,CAAC,GAAG,CAAJ,IAAS,CAAT,IAAc,eAAf,GAAkC,IAAlC,GAAyC,SADtC;AAET,YAAA,MAAM,YAAK,OAAL;AAFG,WAAX;AAID,SAzBwB,C;;;;;cA6BnB,UAAU,GAAG;AACjB,UAAA,IAAI,cAAO,UAAP,cAAqB,UAAU,GAAG,CAAlC,iBAA0C,UAA1C,cAAwD,UAAU,GAAG,CAArE,CADa;AAEjB,UAAA,KAAK,EAAE,CAFU;AAGjB,UAAA,YAAY,EAAE;AAHG,S;;;cAMb,MAAM,GAAG,IAAI,CAAC,KAAL,CAAW,KAAK,GAAG,CAAnB,C;;AACf,aAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,IAAI,MAArB,EAA6B,CAAC,EAA9B,EAAkC;;gBAC1B,OAAO,GAAG,IAAI,CAAC,KAAL,CAAW,MAAM,KAAN,GAAc,CAAd,GAAkB,CAA7B,C;AAChB,UAAA,KAAK,CAAC,IAAN,CAAW;AACT,YAAA,IAAI,EAAE,UADG;AAET,YAAA,MAAM,YAAK,OAAL;AAFG,WAAX;AAID;;AAED,eAAO,KAAP;AACD;;;;;;;;AAKS,MAAA,iBAAiB,GAAA;AACzB,YAAI,KAAK,UAAT,EAAqB,KAAK,UAAL,CAAgB,MAAhB,CAAuB,IAAvB;AAErB,aAAK,UAAL,GAAkB,IAAI,MAAM,CAAC,IAAP,CAAY,QAAhB,CAAyB;AACzC,UAAA,WAAW,EAAE,OAD4B;AAEzC,UAAA,YAAY,EAAE,CAF2B;AAGzC,UAAA,SAAS,EAAE,KAH8B;AAIzC,UAAA,QAAQ,EAAE,KAJ+B;AAKzC,UAAA,IAAI,EAAE,EALmC;AAMzC,UAAA,KAAK,EAAE,KAAK,iBAAL,EANkC;AAOzC,UAAA,GAAG,EAAE,KAAK,UAAL,CAAgB;AAPoB,SAAzB,CAAlB;AAUA,aAAK,UAAL,CAAgB,UAAhB,CAA2B,KAA3B;AACD;;;;;;;AAES,MAAA,cAAc,GAAA;AACtB,YAAI,KAAK,SAAT,EAAoB,KAAK,SAAL,CAAe,MAAf,CAAsB,IAAtB;AACpB,aAAK,UAAL,CAAgB,SAAhB,CAA0B,KAAK,SAA/B;AACD;;;;;;;AAES,MAAA,eAAe,GAAA;AACvB,YAAI,CAAC,KAAK,OAAV,EAAmB,OAAO,EAAP;;;cAEb,WAAW,GAAG,KAAK,aAAL,CAAmB,Q;;;cACjC,MAAM,GAAG,W;;;cACT,CAAC,GAAG,KAAK,aAAL,CAAmB,OAAnB,IAA8B,C;;;cAClC,CAAC,GAAG,E;;;cACJ,CAAC,GAAG,G;;;cAEJ,IAAI,GAAG,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAqB,SAArB,CAA+B,aAA/B,CAA6C,MAA7C,EAAqD,CAAC,GAAG,CAAJ,GAAQ,KAAK,KAAlE,EAAyE,CAAC,GAAG,GAA7E,C;;;cACP,QAAQ,GAAG,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAqB,SAArB,CAA+B,aAA/B,CAA6C,IAA7C,EAAmD,CAAC,GAAG,CAAJ,GAAQ,KAAK,KAAhE,EAAuE,CAAC,GAAG,EAA3E,C;;;cACX,SAAS,GAAG,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAqB,SAArB,CAA+B,aAA/B,CAA6C,IAA7C,EAAmD,CAAC,GAAG,CAAJ,GAAQ,KAAK,KAAhE,EAAuE,CAAC,GAAG,EAA3E,C;;;cACZ,GAAG,GAAG,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAqB,SAArB,CAA+B,aAA/B,CAA6C,IAA7C,EAAmD,CAAC,GAAG,KAAK,KAA5D,EAAmE,CAAnE,C;AAEZ,eAAO,CAAC,IAAD,EAAO,QAAP,EAAiB,GAAjB,EAAsB,SAAtB,CAAP;AACD;;;;;;;;AAES,MAAA,iBAAiB,CAAC,KAAD,EAA0B;;cAC7C,CAAC,GAAG,mBAAmB,GAAG,KAAK,aAAL,CAAmB,K;;;cAC7C,GAAG,GAAG,MAAM,CAAC,IAAP,CAAY,QAAZ,CAAqB,SAArB,CAA+B,aAA/B,CAA6C,KAA7C,EAAoD,CAApD,EAAuD,KAAK,aAAL,CAAmB,KAA1E,C;AACZ,eAAO,CAAC,KAAD,EAAQ,GAAR,CAAP;AACD;;;;;;;AAED,MAAA,iBAAiB,CAAC,IAAD,EAAc;AAC7B,YAAI,CAAC,KAAK,UAAV,EAAsB;;AAEtB,YAAI,IAAJ,EAAU;;gBACF,CAAC,GAAG,KAAK,aAAL,CAAmB,Q;AAC7B,eAAK,UAAL,CAAgB,IAAhB,CAAqB,CAArB;AACD,SAHD,MAGO;AACL,eAAK,UAAL,CAAgB,KAAhB;AACD;AACF;;;;;;AAED,MAAA,UAAU,GAAA;AACR,YAAI,CAAC,KAAK,SAAV,EAAqB,KAAK,cAAL;AACrB,aAAK,iBAAL;AAEA,YAAI,CAAC,KAAK,aAAL,CAAmB,QAAxB,EAAkC;AAElC,aAAK,mBAAL;;;cACM,OAAO,GAAG,CAAC,KAAK,Q;;;cAChB,YAAY,GAAG,KAAK,QAAL,IAAiB,CAAC,KAAK,aAAL,CAAmB,I;;;cACpD,aAAa,GAAG,KAAK,eAAL,IAAwB,KAAK,QAA7B,IAAyC,KAAK,IAAL,IAAa,GAAG,CAAC,K,CATxE,C;;AAYR,YAAI,YAAJ,EAAkB;;gBACV,WAAW,GAAG,KAAK,eAAL,E;;AACpB,cAAI,WAAW,CAAC,MAAhB,EAAwB;AACtB,iBAAK,OAAL,CAAa,UAAb,CAAwB;AACtB,cAAA,WAAW,EAAE,CAAC,KAAK,OAAN,GAAgB,GAAhB,GAAsB,CADb;AAEtB,cAAA,SAAS,EAAE,KAAK,KAFM;AAGtB,cAAA,WAAW,EAAE,KAAK;AAHI,aAAxB;AAKA,iBAAK,OAAL,CAAa,OAAb,CAAqB,WAArB;AACA,iBAAK,OAAL,CAAa,UAAb,CAAwB,IAAxB;AACA,iBAAK,OAAL,CAAa,MAAb,CAAoB,KAAK,UAAL,CAAgB,GAApC;AACD;AACF,SAZD,MAaK;AACH,eAAK,OAAL,CAAa,UAAb,CAAwB,KAAxB;AACA,eAAK,OAAL,CAAa,MAAb,CAAoB,IAApB;AACD,SA5BO,C;;;AA+BR,YAAI,aAAJ,EAAmB;;gBACX,CAAC,GAAG,KAAK,aAAL,CAAmB,Q;;;gBACvB,QAAQ,GAAG,KAAK,iBAAL,CAAuB,CAAvB,C;AACjB,eAAK,UAAL,CAAgB,OAAhB,CAAwB,QAAxB;AACA,eAAK,UAAL,CAAgB,UAAhB,CAA2B,IAA3B;AACA,eAAK,UAAL,CAAgB,MAAhB,CAAuB,KAAK,UAAL,CAAgB,GAAvC;AACD,SAND,MAMO;AACL,eAAK,UAAL,CAAgB,UAAhB,CAA2B,KAA3B;AACA,eAAK,UAAL,CAAgB,MAAhB,CAAuB,IAAvB;AACD,SAxCO,C;;;AA2CR,aAAK,SAAL,CAAe,OAAf,CACE,KAAK,aAAL,CAAmB,IAAnB,IACA;AACE,UAAA,IAAI,EAAE,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAuB,MAD/B;AAEE,UAAA,SAAS,EAAE,KAAK,KAFlB;AAGE,UAAA,WAAW,EAAE,CAAC,KAAK,OAAN,IAAiB,OAAjB,GAA2B,GAA3B,GAAiC,CAHhD;AAIE,UAAA,WAAW,EAAE,KAAK,KAJpB;AAKE,UAAA,aAAa,EAAE,OAAO,GAAG,GAAH,GAAS,CALjC;AAME,UAAA,YAAY,EAAE,CANhB;AAOE,UAAA,KAAK,EAAE,MAAM,KAAK,aAAL,CAAmB,KAAnB,IAA4B,CAAlC,CAPT;AAQE,UAAA,WAAW,EAAE,IAAI,MAAM,CAAC,IAAP,CAAY,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CARf;AASE,UAAA,MAAM,EAAE,IAAI,MAAM,CAAC,IAAP,CAAY,KAAhB,CAAsB,EAAtB,EAA0B,EAA1B;AATV,SAFF;AAcA,aAAK,SAAL,CAAe,QAAf,CAAwB,KAAK,IAAL,IAAa,GAAG,CAAC,UAAjB,GAA8B,KAAK,aAAL,CAAmB,KAAjD,GAAyD,EAAjF;AACA,aAAK,SAAL,CAAe,WAAf,CAA2B,KAAK,aAAL,CAAmB,QAA9C;AACA,aAAK,SAAL,CAAe,MAAf,CAAsB,KAAK,UAAL,CAAgB,GAAtC;AACA,aAAK,SAAL,CAAe,UAAf,CAA0B,IAA1B;AACD;;;;;;;AAES,MAAA,WAAW,GAAA;AACnB,aAAK,iBAAL,CAAuB,IAAvB;AACD;;;;;;;AAES,MAAA,UAAU,GAAA;AAClB,aAAK,iBAAL,CAAuB,KAAvB;AACD;;;;;;;AAES,MAAA,aAAa,GAAA;AACrB,aAAK,UAAL;AACD;;AA7XgC;;;YAJlC,0CAAA,CAAA,WAAA,C;AAAS,MAAA,IAAA,EAAA,CAAC;AACT,QAAA,QAAQ,EAAE,qBADD;AAET,QAAA,QAAA,EAAA;AAFS,OAAD;;;;;YA/BD;;;;;cAoDN,0CAAA,CAAA,OAAA;;;cAEA,0CAAA,CAAA,OAAA;;;cAOA,0CAAA,CAAA,OAAA;;;cAEA,0CAAA,CAAA,WAAA,C;AAAS,QAAA,IAAA,EAAA,CAAC,mBAAD;;;;;;;;;;;;;;;;;;;;;ACnCZ,UAAa,0BAAb,CAAuC;;;;AAkBrC,MAAA,WAAA,CAAsB,iBAAtB,EAA0D;AAApC,aAAA,iBAAA,GAAA,iBAAA;;;;;;;;;;;;AAPb,aAAA,gBAAA,GAAmB,KAAnB;;;;;AAIC,aAAA,MAAA,GAAS,IAAI,0CAAA,CAAA,cAAA,CAAJ,EAAT;AAGqD;;;;;;;AAK/D,MAAA,YAAY,GAAA;AACV,YAAI,KAAK,gBAAT,EAA2B;AACzB;AACD;;AAED,YAAI,SAAS,CAAC,WAAd,EAA2B;AACzB,UAAA,SAAS,CAAC,WAAV,CAAsB,kBAAtB;AAAwC;;;;AAAE,UAAA,QAAD,IAAc,KAAK,UAAL,CAAgB,QAAhB,CAAvD,EAAkF,OAAO,CAAC,KAA1F,EAAiG;AAAE,YAAA,kBAAkB,EAAE;AAAtB,WAAjG;AACD,SAFD,MAEO;AACL,UAAA,OAAO,CAAC,KAAR,CAAc,4BAAd;AACD;AACF;;;;;;;;;AAKD,MAAA,eAAe,CAAC,GAAD,EAAc,GAAd,EAAyB;AACtC,aAAK,iBAAL,CAAuB,GAAvB,CAA2B,SAA3B,CAAqC;AAAE,UAAA,GAAF;AAAO,UAAA;AAAP,SAArC;AACA,YAAI,KAAK,kBAAT,EAA6B,KAAK,kBAAL,CAAwB,MAAxB,CAA+B,IAA/B;AAC7B,aAAK,kBAAL,GAA0B,IAAI,iBAAJ,CAAsB,KAAK,iBAAL,CAAuB,GAA7C,CAA1B;AACA,aAAK,MAAL,CAAY,IAAZ,CAAiB,KAAK,kBAAL,CAAwB,QAAzC;AACD;;;;;;;;AAEO,MAAA,UAAU,CAAC,QAAD,EAAmB;;cAC7B,GAAG,GAAG,QAAQ,CAAC,MAAT,CAAgB,S;;;cACtB,GAAG,GAAG,QAAQ,CAAC,MAAT,CAAgB,Q,CAFO,C;;;;;AAQnC,aAAK,eAAL,CAAqB,GAArB,EAA0B,GAA1B;AACD;;AAtDoC;;;YALtC,0CAAA,CAAA,WAAA,C;AAAS,MAAA,IAAA,EAAA,CAAC;AACT,QAAA,QAAQ,EAAE,yBADD;AAET,QAAA,QAAA,EAAA,yRAFS;;AAAA,OAAD;;;;;YAzBD;;;;;cAyCN,0CAAA,CAAA,OAAA;;;cAIA,0CAAA,CAAA,QAAA;;;;;;;;AChDH,UA2Ba,+BA3Bb,CA2B4C;;;YAlB3C,0CAAA,CAAA,UAAA,C;AAAQ,MAAA,IAAA,EAAA,CAAC;AACR,QAAA,YAAY,EAAE,CACZ,kCADY,EAEZ,sBAFY,EAGZ,mBAHY,EAIZ,0BAJY,CADN;AAOR,QAAA,OAAO,EAAE,CACP,4CAAA,CAAA,cAAA,CADO,EAEP,iDAAA,CAAA,kBAAA,CAFO,CAPD;AAWR,QAAA,SAAS,EAAE,CAAC,iBAAD,CAXH;AAYR,QAAA,OAAO,EAAE,CACP,kCADO,EAEP,mBAFO,EAGP,0BAHO;AAZD,OAAD;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACTT,QAAA,IAAA,GAAA,SAAA,IAAA,CAAA,MAAA,EAAA;AACA,aAAA,MAAA,CAAA,OAAA,CAAA,YAAA,EAAA,EAAA,CAAA;AACA,KAFA;AAAA,QAGA,OAAA,GAAA,SAAA,OAAA,CAAA,GAAA,EAAA;AACA,aAAA,MAAA,CAAA,SAAA,CAAA,QAAA,CAAA,IAAA,CAAA,GAAA,MAAA,gBAAA;AACA,KALA;;AAOA,IAAA,MAAA,CAAA,OAAA,GAAA,UAAA,OAAA,EAAA;AACA,UAAA,CAAA,OAAA,EACA,OAAA,EAAA;AAEA,UAAA,MAAA,GAAA,EAAA;AAEA,UAAA,UAAA,GAAA,IAAA,CAAA,OAAA,CAAA,CAAA,KAAA,CAAA,IAAA,CAAA;;AAEA,WAAA,IAAA,CAAA,GAAA,CAAA,EAAiB,CAAA,GAAA,UAAA,CAAA,MAAjB,EAAwC,CAAA,EAAxC,EAAwC;AACxC,YAAA,GAAA,GAAA,UAAA,CAAA,CAAA,CAAA;AACA,YAAA,KAAA,GAAA,GAAA,CAAA,OAAA,CAAA,GAAA,CAAA;AAAA,YACA,GAAA,GAAA,IAAA,CAAA,GAAA,CAAA,KAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,WAAA,EADA;AAAA,YAEA,KAAA,GAAA,IAAA,CAAA,GAAA,CAAA,KAAA,CAAA,KAAA,GAAA,CAAA,CAAA,CAFA;;AAIA,YAAA,OAAA,MAAA,CAAA,GAAA,CAAA,KAAA,WAAA,EAAA;AACA,UAAA,MAAA,CAAA,GAAA,CAAA,GAAA,KAAA;AACK,SAFL,MAEK,IAAA,OAAA,CAAA,MAAA,CAAA,GAAA,CAAA,CAAA,EAAA;AACL,UAAA,MAAA,CAAA,GAAA,CAAA,CAAA,IAAA,CAAA,KAAA;AACK,SAFA,MAEA;AACL,UAAA,MAAA,CAAA,GAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,CAAA,EAAA,KAAA,CAAA;AACA;AACA;;AAEA,aAAA,MAAA;AACA,KAxBA;;;;;;;;;;;;;;;ACNA,IAAA,MAAA,CAAA,OAAA,GAAA,KAAA;AAEA;;;;;AAKA,QAAA,MAAA,GAAA;AAAc,MAAA,CAAA,EAAA,CAAd;AAAc,MAAA,CAAA,EAAA,CAAd;AAAc,MAAA,CAAA,EAAA,CAAd;AAAc,MAAA,CAAA,EAAA,CAAd;AAAc,MAAA,CAAA,EAAA,CAAd;AAAc,MAAA,CAAA,EAAA,CAAd;AAAc,MAAA,CAAA,EAAA,CAAd;AAAc,MAAA,CAAA,EAAA,CAAd;AAAc,MAAA,CAAA,EAAA,CAAd;AAAc,MAAA,CAAA,EAAA;AAAd,KAAA;AAEA;;;;;AAKA,QAAA,OAAA,GAAA,kCAAA;AAEA;;;;;;;;;AASA,aAAA,KAAA,CAAA,IAAA,EAAA;AACA,UAAA,IAAA,GAAA,EAAA;AACA,MAAA,IAAA,CAAA,OAAA,CAAA,OAAA,EAAA,UAAA,CAAA,EAAA,OAAA,EAAA,IAAA,EAAA;AACA,YAAA,IAAA,GAAA,OAAA,CAAA,WAAA,EAAA;AACA,QAAA,IAAA,GAAA,WAAA,CAAA,IAAA,CAAA,CAFA,CAIA;;AACA,YAAA,IAAA,IAAA,GAAA,IAAA,IAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,CAAA,OAAA,EAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,CAAA;AACA,UAAA,IAAA,GAAA,GAAA;AACA,UAAA,OAAA,GAAA,OAAA,IAAA,GAAA,GAAA,GAAA,GAAA,GAAA;AACA;;AAEA,eAAA,IAAA,EAAA;AACA,cAAA,IAAA,CAAA,MAAA,IAAA,MAAA,CAAA,IAAA,CAAA,EAAA;AACA,YAAA,IAAA,CAAA,OAAA,CAAA,OAAA;AACA,mBAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACA;;AACA,cAAA,IAAA,CAAA,MAAA,GAAA,MAAA,CAAA,IAAA,CAAA,EAAA,MAAA,IAAA,KAAA,CAAA,qBAAA,CAAA;AACA,UAAA,IAAA,CAAA,IAAA,CAAA,CAAA,OAAA,EAAA,MAAA,CAAA,IAAA,CAAA,MAAA,CAAA,CAAA,EAAA,MAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA;AACE,OAnBF;AAoBA,aAAA,IAAA;AACA;;AAEA,QAAA,MAAA,GAAA,mCAAA;;AAEA,aAAA,WAAA,CAAA,IAAA,EAAA;AACA,UAAA,OAAA,GAAA,IAAA,CAAA,KAAA,CAAA,MAAA,CAAA;AACA,aAAA,OAAA,GAAA,OAAA,CAAA,GAAA,CAAA,MAAA,CAAA,GAAA,EAAA;AACA;;;;;;;;;;;;;;;ACxDA;AAAA,eAAA,MAAA,EAAA;AAAA;AACA;AAEA;;AAAC,iBAAA,IAAA,EAAA,OAAA,EAAA;AAED;AACA,YAAM,IAAN,EAAiC;AACjC,cAAA,WAAA,GAAA,OAAA,EAAA,CADiC,CAGjC;;AACA,cAAQ,QAA0B,MAA1B,IAA0B,MAAA,CAAA,OAAlC,EAAkC;AAClC,YAAA,OAAA,GAAA,MAAA,CAAA,OAAA,GAAA,WAAA;AACA,WANiC,CAQjC;;;AACA,UAAA,OAAA,CAAA,WAAA,GAAA,WAAA,CATiC,CAWjC;AACG,SAZH,MAYS,CAMN;AAEF,OAvBA,EAuBA,IAvBA,EAuBA,YAAA;AAED;AACA,YAAA,IAAA,GAAA,IAAA,CAHC,CAKD;;AACA,YAAA,eAAA,GAAA,EAAA,CANC,CAQD;;AACA,QAAA,eAAA,GATC,CAWD;;AACA,YAAA,WAAA,GAAA,EAAA;;AAEA,YAAA,WAAA,GAAA,SAAA,WAAA,CAAA,OAAA,EAAA;AAEA,UAAA,OAAA,GAAA,OAAA,IAAA,EAAA,CAFA,CAIA;AACA;;AACA,cAAA,OAAA,CAAA,IAAA,KAAA,SAAA,IAAA,OAAA,CAAA,IAAA,KAAA,IAAA,IAAA,OAAA,CAAA,IAAA,KAAA,QAAA,CAAA,OAAA,CAAA,IAAA,EAAA,EAAA,CAAA,EAAA;AACA,YAAA,IAAA,GAAA,OAAA,CAAA,IAAA,CADA,CAGA;AACK,WAJL,MAIK,IAAA,OAAA,OAAA,CAAA,IAAA,KAAA,QAAA,EAAA;AACL,YAAA,IAAA,GAAA,eAAA,CAAA,OAAA,CAAA,IAAA,CAAA,CADK,CAGL;AACK,WAJA,MAIA,IAAA,OAAA,CAAA,IAAA,KAAA,SAAA,IAAA,OAAA,CAAA,IAAA,KAAA,IAAA,EAAA;AACL,kBAAA,IAAA,SAAA,CAAA,6CAAA,CAAA,CADK,CAGL;AACK,WAJA,MAIA;AACL,YAAA,IAAA,GAAA,IAAA;AACA;;AAEA,cAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAtBA,CAwBA;;AACA,cAAA,OAAA,CAAA,KAAA,KAAA,IAAA,IAAA,OAAA,CAAA,KAAA,KAAA,SAAA,EAAA;AAEA,gBAAA,WAAA,GAAA,OAAA,CAAA,KAAA;AAAA,gBACA,MAAA,GAAA,EADA,CAFA,CAIA;;AACA,iBAAA,IAAA,CAAA,GAAA,CAAA,EAAqB,CAAA,GAAA,OAAA,CAAA,KAArB,EAAwC,CAAA,EAAxC,EAAwC;AACxC,cAAA,WAAA,CAAA,IAAA,CAAA,KAAA;AACA;;AACA,YAAA,OAAA,CAAA,KAAA,GAAA,IAAA;;AAEA,mBAAA,WAAA,GAAA,MAAA,CAAA,MAAA,EAAA;AAEA;AACA;AACA;AACA,kBAAA,IAAA,IAAA,OAAA,CAAA,IAAA,EAAA,OAAA,CAAA,IAAA,IAAA,CAAA;AAEA,cAAA,MAAA,CAAA,IAAA,CAAA,WAAA,CAAA,OAAA,CAAA;AACA;;AAEA,YAAA,OAAA,CAAA,KAAA,GAAA,WAAA;AAEA,mBAAA,MAAA;AACA,WAhDA,CAkDA;;;AACA,UAAA,CAAA,GAAA,OAAA,CAAA,OAAA,CAAA,CAnDA,CAqDA;;AACA,UAAA,CAAA,GAAA,cAAA,CAAA,CAAA,EAAA,OAAA,CAAA,CAtDA,CAwDA;;AACA,UAAA,CAAA,GAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAAA,OAAA,CAAA,CAzDA,CA2DA;;AACA,iBAAA,SAAA,CAAA,CAAA,CAAA,EAAA,CAAA,EAAA,CAAA,CAAA,EAAA,OAAA,CAAA;AACA,SA7DA;;AA+DA,iBAAA,OAAA,CAAA,OAAA,EAAA;AACA,cAAA,WAAA,CAAA,MAAA,GAAA,CAAA,EAAA;AACA,gBAAA,QAAA,GAAA,eAAA,CAAA,OAAA,CAAA,GAAA,CAAA;AAEA,gBAAA,GAAA,GAAA,YAAA,CAAA,QAAA,CAAA,CAHA,CAKA;;AACA,gBAAA,IAAA,GAAA,CAAA,QAAA,CAAA,CAAA,CAAA,GAAA,QAAA,CAAA,CAAA,CAAA,IAAA,WAAA,CAAA,MAAA;AAEA,gBAAA,CAAA,GAAA,QAAA,CAAA,CAAA,GAAA,GAAA,QAAA,CAAA,CAAA,CAAA,IAAA,IAAA,CAAA,CARA,CAUA;;AACA,gBAAA,WAAA,CAAA,CAAA,CAAA,KAAA,IAAA,EAAA;AACA,cAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,IAAA,WAAA,CAAA,MAAA;AACA,aAFA,MAGA;AACA,cAAA,WAAA,CAAA,CAAA,CAAA,GAAA,IAAA;AACA;;AAEA,gBAAA,GAAA,GAAA,CAAA,QAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,IAAA,IAAA,GAAA;AAAA,gBACA,GAAA,GAAA,CAAA,QAAA,CAAA,CAAA,CAAA,GAAA,CAAA,CAAA,GAAA,CAAA,IAAA,IAAA,IAAA,GADA;AAGA,YAAA,QAAA,GAAA,CAAA,GAAA,EAAA,GAAA,CAAA;AAEA,YAAA,GAAA,GAAA,YAAA,CAAA,QAAA,CAAA;;AAEA,gBAAA,GAAA,GAAA,CAAA,EAAA;AAAoB,cAAA,GAAA,GAAA,MAAA,GAAA;AAAA;;AACpB,mBAAA,GAAA;AACA,WA3BA,MA4BA;AACA,gBAAA,QAAA,GAAA,WAAA,CAAA,OAAA,CAAA,GAAA,CAAA;AAEA,YAAA,GAAA,GAAA,YAAA,CAAA,QAAA,CAAA,CAHA,CAIA;AACA;;AACA,gBAAA,GAAA,GAAA,CAAA,EAAA;AACA,cAAA,GAAA,GAAA,MAAA,GAAA;AACA;;AAEA,mBAAA,GAAA;AACA;AACA;;AAEA,iBAAA,cAAA,CAAA,GAAA,EAAA,OAAA,EAAA;AAEA,cAAA,OAAA,CAAA,GAAA,KAAA,YAAA,EAAA;AACA,mBAAA,CAAA;AACA;;AAEA,cAAA,OAAA,CAAA,UAAA,KAAA,QAAA,EAAA;AACA,mBAAA,YAAA,CAAA,CAAA,CAAA,EAAA,GAAA,CAAA,CAAA;AACA;;AAEA,cAAA,eAAA,GAAA,kBAAA,CAAA,GAAA,CAAA;AAEA,cAAA,IAAA,GAAA,eAAA,CAAA,CAAA,CAAA;AAAA,cACA,IAAA,GAAA,eAAA,CAAA,CAAA,CADA;;AAGA,kBAAA,OAAA,CAAA,UAAA;AAEA,iBAAA,QAAA;AACA,cAAA,IAAA,GAAA,EAAA;AACA;;AAEA,iBAAA,MAAA;AACA,cAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA;;AAEA,iBAAA,OAAA;AACA,cAAA,IAAA,GAAA,EAAA;AACA;AAZA;;AAeA,iBAAA,YAAA,CAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;AAEA;;AAEA,iBAAA,cAAA,CAAA,CAAA,EAAA,CAAA,EAAA,OAAA,EAAA;AAEA,cAAA,IAAA,GAAA,oBAAA,CAAA,CAAA,EAAA,CAAA,CAAA;AAAA,cACA,IAAA,GAAA,GADA;;AAGA,kBAAA,OAAA,CAAA,UAAA;AAEA,iBAAA,MAAA;AACA,cAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA;;AAEA,iBAAA,OAAA;AACA,cAAA,IAAA,GAAA,CAAA,IAAA,GAAA,IAAA,IAAA,CAAA;AACA;;AAEA,iBAAA,QAAA;AACA,cAAA,IAAA,GAAA,CAAA;AACA,cAAA,IAAA,GAAA,GAAA;AACA;AAbA;;AAgBA,iBAAA,YAAA,CAAA,CAAA,IAAA,EAAA,IAAA,CAAA,CAAA;AACA;;AAEA,iBAAA,SAAA,CAAA,GAAA,EAAA,OAAA,EAAA;AAEA,kBAAA,OAAA,CAAA,MAAA;AAEA,iBAAA,UAAA;AACA,qBAAA,GAAA;;AAEA,iBAAA,UAAA;AACA,qBAAA,QAAA,CAAA,GAAA,CAAA;;AAEA,iBAAA,KAAA;AACA,kBAAA,GAAA,GAAA,QAAA,CAAA,GAAA,CAAA;AACA,qBAAA,SAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA,GAAA,GAAA,CAAA,CAAA,CAAA,GAAA,KAAA,GAAA,GAAA,CAAA,CAAA,CAAA,GAAA,IAAA;;AAEA,iBAAA,MAAA;AACA,kBAAA,QAAA,GAAA,QAAA,CAAA,GAAA,CAAA;AACA,kBAAA,KAAA,GAAA,OAAA,CAAA,KAAA,IAAA,IAAA,CAAA,MAAA,EAAA;AACA,qBAAA,UAAA,QAAA,CAAA,CAAA,CAAA,GAAA,IAAA,GAAA,QAAA,CAAA,CAAA,CAAA,GAAA,KAAA,GAAA,QAAA,CAAA,CAAA,CAAA,GAAA,KAAA,GAAA,KAAA,GAAA,GAAA;;AAEA,iBAAA,UAAA;AACA,qBAAA,QAAA,CAAA,GAAA,CAAA;;AAEA,iBAAA,KAAA;AACA,kBAAA,GAAA,GAAA,QAAA,CAAA,GAAA,CAAA;AACA,qBAAA,SAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,GAAA;;AAEA,iBAAA,MAAA;AACA,kBAAA,QAAA,GAAA,QAAA,CAAA,GAAA,CAAA;AACA,kBAAA,KAAA,GAAA,OAAA,CAAA,KAAA,IAAA,IAAA,CAAA,MAAA,EAAA;AACA,qBAAA,UAAA,QAAA,CAAA,IAAA,CAAA,IAAA,CAAA,GAAA,IAAA,GAAA,KAAA,GAAA,GAAA;;AAEA;AACA,qBAAA,QAAA,CAAA,GAAA,CAAA;AA9BA;AAiCA;;AAEA,iBAAA,oBAAA,CAAA,CAAA,EAAA,CAAA,EAAA;AAEA,cAAA,WAAA,GAAA,YAAA,CAAA,CAAA,CAAA,CAAA,WAAA;;AAEA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAmB,CAAA,GAAA,WAAA,CAAA,MAAA,GAAA,CAAnB,EAA+C,CAAA,EAA/C,EAA+C;AAE/C,gBAAA,EAAA,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,gBACA,EAAA,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CADA;AAGA,gBAAA,EAAA,GAAA,WAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,gBACA,EAAA,GAAA,WAAA,CAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CADA;;AAGA,gBAAA,CAAA,IAAA,EAAA,IAAA,CAAA,IAAA,EAAA,EAAA;AAEA,kBAAA,CAAA,GAAA,CAAA,EAAA,GAAA,EAAA,KAAA,EAAA,GAAA,EAAA,CAAA;AAAA,kBACA,CAAA,GAAA,EAAA,GAAA,CAAA,GAAA,EADA;AAGA,qBAAA,CAAA,GAAA,CAAA,GAAA,CAAA;AACA;AAEA;;AAEA,iBAAA,CAAA;AACA;;AAEA,iBAAA,WAAA,CAAA,UAAA,EAAA;AAEA,cAAA,OAAA,QAAA,CAAA,UAAA,CAAA,KAAA,QAAA,EAAA;AAEA,gBAAA,MAAA,GAAA,QAAA,CAAA,UAAA,CAAA;;AAEA,gBAAA,MAAA,GAAA,GAAA,IAAA,MAAA,GAAA,CAAA,EAAA;AACA,qBAAA,CAAA,MAAA,EAAA,MAAA,CAAA;AACA;AAEA;;AAEA,cAAA,OAAA,UAAA,KAAA,QAAA,EAAA;AAEA,gBAAA,eAAA,CAAA,UAAA,CAAA,EAAA;AACA,kBAAA,KAAA,GAAA,eAAA,CAAA,UAAA,CAAA;;AACA,kBAAA,KAAA,CAAA,QAAA,EAAA;AAA6B,uBAAA,KAAA,CAAA,QAAA;AAAA;AACtB,aAHP,MAGO,IAAA,UAAA,CAAA,KAAA,CAAA,gCAAA,CAAA,EAAuD;AAC9D,kBAAA,GAAA,GAAA,QAAA,CAAA,UAAA,CAAA,CAAA,CAAA,CAAA;AACA,qBAAA,CAAA,GAAA,EAAA,GAAA,CAAA;AACA;AACA;;AAEA,iBAAA,CAAA,CAAA,EAAA,GAAA,CAAA;AAEA;;AAEA,iBAAA,kBAAA,CAAA,GAAA,EAAA;AACA,iBAAA,YAAA,CAAA,GAAA,CAAA,CAAA,eAAA;AACA;;AAEA,iBAAA,YAAA,CAAA,GAAA,EAAA;AAEA;AACA,cAAA,GAAA,IAAA,GAAA,IAAA,GAAA,IAAA,GAAA,EAAA;AACA,YAAA,GAAA,IAAA,GAAA;AACA;;AAEA,eAAA,IAAA,SAAA,IAAA,eAAA,EAAA;AACA,gBAAA,KAAA,GAAA,eAAA,CAAA,SAAA,CAAA;;AACA,gBAAA,KAAA,CAAA,QAAA,IACA,GAAA,IAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CADA,IAEA,GAAA,IAAA,KAAA,CAAA,QAAA,CAAA,CAAA,CAFA,EAEA;AACA,qBAAA,eAAA,CAAA,SAAA,CAAA;AACA;AACK;;AAAA,iBAAA,iBAAA;AACL;;AAEA,iBAAA,YAAA,CAAA,KAAA,EAAA;AACA,cAAA,IAAA,KAAA,IAAA,EAAA;AACA;AACA,gBAAA,YAAA,GAAA,iBAAA;AACA,gBAAA,CAAA,GAAA,IAAA,CAAA,MAAA,EAAA;AACA,YAAA,CAAA,IAAA,YAAA;AACA,YAAA,CAAA,IAAA,CAAA;AACA,mBAAA,IAAA,CAAA,KAAA,CAAA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,IAAA,KAAA,CAAA,CAAA,CAAA,GAAA,CAAA,GAAA,KAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AACK,WAPL,MAOK;AACL;AACA,gBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA,gBAAA,GAAA,GAAA,KAAA,CAAA,CAAA,CAAA,IAAA,CAAA;AACA,YAAA,IAAA,GAAA,CAAA,IAAA,GAAA,IAAA,GAAA,KAAA,IAAA,MAAA;AACA,gBAAA,GAAA,GAAA,IAAA,GAAA,QAAA;AACA,mBAAA,IAAA,CAAA,KAAA,CAAA,GAAA,GAAA,GAAA,IAAA,GAAA,GAAA,GAAA,CAAA,CAAA;AACA;AACA;;AAEA,iBAAA,QAAA,CAAA,GAAA,EAAA;AAEA,cAAA,GAAA,GAAA,QAAA,CAAA,GAAA,CAAA;;AAEA,mBAAA,cAAA,CAAA,CAAA,EAAA;AACA,gBAAA,GAAA,GAAA,CAAA,CAAA,QAAA,CAAA,EAAA,CAAA;AACA,mBAAA,GAAA,CAAA,MAAA,IAAA,CAAA,GAAA,MAAA,GAAA,GAAA,GAAA;AACA;;AAEA,cAAA,GAAA,GAAA,MAAA,cAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,cAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA,GAAA,cAAA,CAAA,GAAA,CAAA,CAAA,CAAA,CAAA;AAEA,iBAAA,GAAA;AAEA;;AAEA,iBAAA,WAAA,CAAA,IAAA,EAAA,QAAA,EAAA,WAAA,EAAA;AAEA,cAAA,IAAA,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAAA;AAAA,cACA,IAAA,GAAA,WAAA,CAAA,WAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CADA;AAAA,cAGA,IAAA,GAAA,WAAA,CAAA,WAAA,CAAA,MAAA,GAAA,CAAA,CAAA,CAAA,CAAA,CAHA;AAAA,cAIA,IAAA,GAAA,WAAA,CAAA,CAAA,CAAA,CAAA,CAAA,CAJA;AAMA,UAAA,eAAA,CAAA,IAAA,CAAA,GAAA;AACA,YAAA,QAAA,EAAA,QADA;AAEA,YAAA,WAAA,EAAA,WAFA;AAGA,YAAA,eAAA,EAAA,CAAA,IAAA,EAAA,IAAA,CAHA;AAIA,YAAA,eAAA,EAAA,CAAA,IAAA,EAAA,IAAA;AAJA,WAAA;AAOA;;AAEA,iBAAA,eAAA,GAAA;AAEA,UAAA,WAAA,CACA,YADA,EAEA,IAFA,EAGA,CAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,CAAA,GAAA,EAAA,CAAA,CAAA,CAHA,CAAA;AAMA,UAAA,WAAA,CACA,KADA,EAEA,CAAA,CAAA,EAAA,EAAA,EAAA,CAFA,EAGA,CAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAHA,CAAA;AAMA,UAAA,WAAA,CACA,QADA,EAEA,CAAA,EAAA,EAAA,EAAA,CAFA,EAGA,CAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAHA,CAAA;AAMA,UAAA,WAAA,CACA,QADA,EAEA,CAAA,EAAA,EAAA,EAAA,CAFA,EAGA,CAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAHA,CAAA;AAMA,UAAA,WAAA,CACA,OADA,EAEA,CAAA,EAAA,EAAA,GAAA,CAFA,EAGA,CAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAHA,CAAA;AAMA,UAAA,WAAA,CACA,MADA,EAEA,CAAA,GAAA,EAAA,GAAA,CAFA,EAGA,CAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAHA,CAAA;AAMA,UAAA,WAAA,CACA,QADA,EAEA,CAAA,GAAA,EAAA,GAAA,CAFA,EAGA,CAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAHA,CAAA;AAMA,UAAA,WAAA,CACA,MADA,EAEA,CAAA,GAAA,EAAA,GAAA,CAFA,EAGA,CAAA,CAAA,EAAA,EAAA,GAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,EAAA,EAAA,EAAA,CAAA,EAAA,CAAA,GAAA,EAAA,EAAA,CAAA,CAHA,CAAA;AAMA;;AAEA,iBAAA,QAAA,CAAA,GAAA,EAAA;AAEA;AACA;AACA,cAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA;;AACA,cAAA,CAAA,KAAA,CAAA,EAAA;AAAkB,YAAA,CAAA,GAAA,CAAA;AAAA;;AAClB,cAAA,CAAA,KAAA,GAAA,EAAA;AAAoB,YAAA,CAAA,GAAA,GAAA;AAAA,WANpB,CAQA;;;AACA,UAAA,CAAA,GAAA,CAAA,GAAA,GAAA;AACA,cAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA,GAAA,GAAA;AAAA,cACA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA,GAAA,GADA;AAGA,cAAA,GAAA,GAAA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,CAAA;AAAA,cACA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,GADA;AAAA,cAEA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,CAFA;AAAA,cAGA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,GAAA,CAAA,CAHA;AAAA,cAIA,CAAA,GAAA,CAAA,IAAA,IAAA,CAAA,IAAA,CAAA,IAAA,CAAA,CAJA;AAAA,cAKA,CAAA,GAAA,GALA;AAAA,cAMA,CAAA,GAAA,GANA;AAAA,cAOA,CAAA,GAAA,GAPA;;AASA,kBAAA,GAAA;AACA,iBAAA,CAAA;AAAA,cAAA,CAAA,GAAA,CAAA;AAAoB,cAAA,CAAA,GAAA,CAAA;AAAO,cAAA,CAAA,GAAA,CAAA;AAAO;;AAClC,iBAAA,CAAA;AAAA,cAAA,CAAA,GAAA,CAAA;AAAoB,cAAA,CAAA,GAAA,CAAA;AAAO,cAAA,CAAA,GAAA,CAAA;AAAO;;AAClC,iBAAA,CAAA;AAAA,cAAA,CAAA,GAAA,CAAA;AAAoB,cAAA,CAAA,GAAA,CAAA;AAAO,cAAA,CAAA,GAAA,CAAA;AAAO;;AAClC,iBAAA,CAAA;AAAA,cAAA,CAAA,GAAA,CAAA;AAAoB,cAAA,CAAA,GAAA,CAAA;AAAO,cAAA,CAAA,GAAA,CAAA;AAAO;;AAClC,iBAAA,CAAA;AAAA,cAAA,CAAA,GAAA,CAAA;AAAoB,cAAA,CAAA,GAAA,CAAA;AAAO,cAAA,CAAA,GAAA,CAAA;AAAO;;AAClC,iBAAA,CAAA;AAAA,cAAA,CAAA,GAAA,CAAA;AAAoB,cAAA,CAAA,GAAA,CAAA;AAAO,cAAA,CAAA,GAAA,CAAA;AAAO;AANlC;;AASA,cAAA,MAAA,GAAA,CAAA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAA,GAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAA,GAAA,CAAA,EAAA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAA,GAAA,CAAA,CAAA;AACA,iBAAA,MAAA;AACA;;AAEA,iBAAA,QAAA,CAAA,GAAA,EAAA;AACA,UAAA,GAAA,GAAA,GAAA,CAAA,OAAA,CAAA,IAAA,EAAA,EAAA,CAAA;AACA,UAAA,GAAA,GAAA,GAAA,CAAA,MAAA,KAAA,CAAA,GAAA,GAAA,CAAA,OAAA,CAAA,MAAA,EAAA,MAAA,CAAA,GAAA,GAAA;AAEA,cAAA,GAAA,GAAA,QAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,GAAA,GAAA;AAAA,cACA,KAAA,GAAA,QAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,GAAA,GADA;AAAA,cAEA,IAAA,GAAA,QAAA,CAAA,GAAA,CAAA,MAAA,CAAA,CAAA,EAAA,CAAA,CAAA,EAAA,EAAA,CAAA,GAAA,GAFA;AAIA,cAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA,EAAA,IAAA,CAAA;AAAA,cACA,KAAA,GAAA,IAAA,GAAA,IAAA,CAAA,GAAA,CAAA,GAAA,EAAA,KAAA,EAAA,IAAA,CADA;AAAA,cAEA,UAAA,GAAA,IAAA,GAAA,KAAA,GAAA,IAAA,GAAA,CAFA;;AAIA,kBAAA,IAAA;AACA,iBAAA,GAAA;AAAA,qBAAA,CAAA,MAAA,CAAA,KAAA,GAAA,IAAA,IAAA,KAAA,GAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAAA,IAAA,CAAA;;AACA,iBAAA,KAAA;AAAA,qBAAA,CAAA,MAAA,CAAA,IAAA,GAAA,GAAA,IAAA,KAAA,GAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAAA,IAAA,CAAA;;AACA,iBAAA,IAAA;AAAA,qBAAA,CAAA,MAAA,CAAA,GAAA,GAAA,KAAA,IAAA,KAAA,GAAA,CAAA,KAAA,CAAA,EAAA,UAAA,EAAA,IAAA,CAAA;AAHA;AAKA;;AAEA,iBAAA,QAAA,CAAA,GAAA,EAAA;AACA,cAAA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA;AAAA,cACA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA,GAAA,GADA;AAAA,cAEA,CAAA,GAAA,GAAA,CAAA,CAAA,CAAA,GAAA,GAFA;AAAA,cAGA,CAAA,GAAA,CAAA,IAAA,CAAA,IAAA,CAHA;AAKA,iBAAA,CACA,CADA,EAEA,IAAA,CAAA,KAAA,CAAA,CAAA,GAAA,CAAA,IAAA,CAAA,GAAA,CAAA,GAAA,CAAA,GAAA,IAAA,CAAA,IAAA,KAAA,IAAA,GAFA,EAGA,CAAA,GAAA,CAAA,GAAA,GAHA,CAAA;AAKA;;AAEA,iBAAA,eAAA,CAAA,MAAA,EAAA;AACA,cAAA,KAAA,GAAA,CAAA;;AACA,eAAA,IAAA,CAAA,GAAA,CAAA,EAAmB,CAAA,KAAA,MAAA,CAAA,MAAnB,EAAwC,CAAA,EAAxC,EAAwC;AACxC,gBAAA,KAAA,IAAA,MAAA,CAAA,gBAAA,EAAA;AACA,YAAA,KAAA,IAAA,MAAA,CAAA,UAAA,CAAA,CAAA,CAAA;AACA;;AACA,iBAAA,KAAA;AACA,SAhdC,CAkdD;;;AACA,iBAAA,eAAA,CAAA,QAAA,EACA;AAAG,cAAA,CAAA,KAAA,CAAA,QAAA,CAAA,EAAA;AACH,gBAAA,MAAA,GAAA,QAAA,CAAA,QAAA,CAAA;;AAEA,gBAAA,MAAA,GAAA,GAAA,IAAA,MAAA,GAAA,CAAA,EAAA;AACA,qBAAA,YAAA,CAAA,QAAA,CAAA,CAAA,QAAA;AACA;AACA,WANG,MAOH,IAAA,OAAA,QAAA,KAAA,QAAA,EAAA;AAEA,gBAAA,eAAA,CAAA,QAAA,CAAA,EAAA;AACA,kBAAA,KAAA,GAAA,eAAA,CAAA,QAAA,CAAA;;AAEA,kBAAA,KAAA,CAAA,QAAA,EAAA;AACA,uBAAA,KAAA,CAAA,QAAA;AACA;AACK,aANL,MAMK,IAAA,QAAA,CAAA,KAAA,CAAA,gCAAA,CAAA,EAAqD;AAC1D,kBAAA,GAAA,GAAA,QAAA,CAAA,QAAA,CAAA,CAAA,CAAA,CAAA;AACA,qBAAA,YAAA,CAAA,GAAA,CAAA,CAAA,QAAA;AACA;AACA;;AAEA,iBAAA,CAAA,CAAA,EAAA,GAAA,CAAA;AACA;;AACA,eAAA,WAAA;AACC,OAngBA,CAAA;;;KAHD,E,IAAA,C,IAAA,E;;uDAAA,CAAA;;;;;;;;;;;;;;;;ACAA,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,w0EAAA;;;;;;;;;;;;;;ACAf,IAAA,MAAA,CAAA,OAAA,GAAA,UAAA,MAAA,EAAA;AACA,UAAA,CAAA,MAAA,CAAA,eAAA,EAAA;AACA,QAAA,MAAA,CAAA,SAAA,GAAA,YAAA,CAAA,CAAA;;AACA,QAAA,MAAA,CAAA,KAAA,GAAA,EAAA,CAFA,CAGA;;AACA,YAAA,CAAA,MAAA,CAAA,QAAA,EAAA,MAAA,CAAA,QAAA,GAAA,EAAA;AACA,QAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,QAAA,EAAA;AACA,UAAA,UAAA,EAAA,IADA;AAEA,UAAA,GAAA,EAAA,eAAA;AACA,mBAAA,MAAA,CAAA,CAAA;AACA;AAJA,SAAA;AAMA,QAAA,MAAA,CAAA,cAAA,CAAA,MAAA,EAAA,IAAA,EAAA;AACA,UAAA,UAAA,EAAA,IADA;AAEA,UAAA,GAAA,EAAA,eAAA;AACA,mBAAA,MAAA,CAAA,CAAA;AACA;AAJA,SAAA;AAMA,QAAA,MAAA,CAAA,eAAA,GAAA,CAAA;AACA;;AACA,aAAA,MAAA;AACA,KArBA;;;;;;;;;;;;;;;ACAA,QAAA,MAAA,GAAa,mBAAO;AAAC;AAAA,qCAAD,CAApB;;AACA,QAAA,IAAA,GAAW,mBAAO;AAAC;AAAA,kDAAD,CAAlB;;AACA,QAAA,YAAA,GAAmB,mBAAO;AAAC;AAAA,mDAAD,CAA1B;;AAEA,QAAA,QAAA,GAAA;AACA,WAAA,+BADA;AAEA,WAAA,kBAFA;AAGA,WAAA;AAHA,KAAA;AAMA,QAAA,GAAA,GAAA,MAAA,CAAA,cAAA,IAAA,IAAA;AACA,QAAA,GAAA,GAAA,qBAAA,IAAA,GAAA,EAAA,GAAA,GAAA,GAAA,MAAA,CAAA,cAAA;AAEA,IAAA,MAAA,CAAA,OAAA,GAAA,SAAA;;AAEA,aAAA,SAAA,CAAA,OAAA,EAAA,QAAA,EAAA;AACA,UAAA,OAAA,OAAA,KAAA,QAAA,EAAA;AACA,QAAA,OAAA,GAAA;AAAmB,UAAA,GAAA,EAAA;AAAnB,SAAA;AACA;;AAEA,MAAA,OAAA,GAAA,OAAA,IAAA,EAAA;AACA,MAAA,QAAA,GAAA,IAAA,CAAA,QAAA,CAAA;AAEA,UAAA,GAAA,GAAA,OAAA,CAAA,GAAA,IAAA,IAAA;;AAEA,UAAA,CAAA,GAAA,EAAA;AACA,YAAA,OAAA,CAAA,IAAA,IAAA,OAAA,CAAA,MAAA,EAAA;AACA,UAAA,GAAA,GAAA,IAAA,GAAA,EAAA;AACS,SAFT,MAES;AACT,UAAA,GAAA,GAAA,IAAA,GAAA,EAAA;AACA;AACA;;AAEA,UAAA,GAAA,GAAA,GAAA,CAAA,GAAA,GAAA,OAAA,CAAA,GAAA,IAAA,OAAA,CAAA,GAAA;AACA,UAAA,MAAA,GAAA,GAAA,CAAA,MAAA,GAAA,OAAA,CAAA,MAAA,IAAA,KAAA;AACA,UAAA,IAAA,GAAA,OAAA,CAAA,IAAA,IAAA,OAAA,CAAA,IAAA;AACA,UAAA,OAAA,GAAA,GAAA,CAAA,OAAA,GAAA,OAAA,CAAA,OAAA,IAAA,EAAA;AACA,UAAA,IAAA,GAAA,CAAA,CAAA,OAAA,CAAA,IAAA;AACA,UAAA,MAAA,GAAA,KAAA;AACA,UAAA,GAAA;AACA,UAAA,IAAA,GAAA,OAAA,CAAA,QAAA,GAAA,YAAA,GAAA,OAAA;;AAEA,UAAA,UAAA,OAAA,EAAA;AACA,QAAA,MAAA,GAAA,IAAA;AACA,QAAA,OAAA,CAAA,QAAA,CAAA,GAAA,kBAAA;;AACA,YAAA,MAAA,KAAA,KAAA,IAAA,MAAA,KAAA,MAAA,EAAA;AACA,UAAA,OAAA,CAAA,cAAA,CAAA,GAAA,kBAAA;AACA,UAAA,IAAA,GAAA,IAAA,CAAA,SAAA,CAAA,OAAA,CAAA,IAAA,CAAA;AACA;AACA;;AAEA,MAAA,GAAA,CAAA,kBAAA,GAAA,gBAAA;AACA,MAAA,GAAA,CAAA,MAAA,GAAA,IAAA;AACA,MAAA,GAAA,CAAA,OAAA,GAAA,KAAA,CAtCA,CAuCA;;AACA,MAAA,GAAA,CAAA,UAAA,GAAA,YAAA,CAEA,CAFA,CACA;AAEA;AAHA;;AAIA,MAAA,GAAA,CAAA,SAAA,GAAA,IAAA;AACA,MAAA,GAAA,CAAA,IAAA,CAAA,MAAA,EAAA,GAAA,EAAA,CAAA,IAAA,EA7CA,CA8CA;;AACA,UAAA,OAAA,CAAA,eAAA,IAAA,OAAA,CAAA,IAAA,IAAA,OAAA,CAAA,eAAA,KAAA,KAAA,EAAA;AACA,QAAA,GAAA,CAAA,eAAA,GAAA,IAAA;AACA,OAjDA,CAmDA;;;AACA,UAAA,CAAA,IAAA,EAAA;AACA,QAAA,GAAA,CAAA,OAAA,GAAA,aAAA,OAAA,GAAA,OAAA,CAAA,OAAA,GAAA,IAAA;AACA;;AAEA,UAAA,GAAA,CAAA,gBAAA,EAAA;AACA,aAAA,GAAA,IAAA,OAAA,EAAA;AACA,cAAA,OAAA,CAAA,cAAA,CAAA,GAAA,CAAA,EAAA;AACA,YAAA,GAAA,CAAA,gBAAA,CAAA,GAAA,EAAA,OAAA,CAAA,GAAA,CAAA;AACA;AACA;AACK,OANL,MAMK,IAAA,OAAA,CAAA,OAAA,EAAA;AACL,cAAA,IAAA,KAAA,CAAA,mDAAA,CAAA;AACA;;AAEA,UAAA,kBAAA,OAAA,EAAA;AACA,QAAA,GAAA,CAAA,YAAA,GAAA,OAAA,CAAA,YAAA;AACA;;AAEA,UAAA,gBAAA,OAAA,IACA,OAAA,OAAA,CAAA,UAAA,KAAA,UADA,EAEA;AACA,QAAA,OAAA,CAAA,UAAA,CAAA,GAAA;AACA;;AAEA,MAAA,GAAA,CAAA,IAAA,CAAA,IAAA;AAEA,aAAA,GAAA;;AAEA,eAAA,gBAAA,GAAA;AACA,YAAA,GAAA,CAAA,UAAA,KAAA,CAAA,EAAA;AACA,UAAA,IAAA;AACA;AACA;;AAEA,eAAA,OAAA,GAAA;AACA;AACA,YAAA,IAAA,GAAA,IAAA;;AAEA,YAAA,GAAA,CAAA,QAAA,EAAA;AACA,UAAA,IAAA,GAAA,GAAA,CAAA,QAAA;AACS,SAFT,MAES,IAAA,GAAA,CAAA,YAAA,KAAA,MAAA,IAAA,CAAA,GAAA,CAAA,YAAA,EAAA;AACT,UAAA,IAAA,GAAA,GAAA,CAAA,YAAA,IAAA,GAAA,CAAA,WAAA;AACA;;AAEA,YAAA,MAAA,EAAA;AACA,cAAA;AACA,YAAA,IAAA,GAAA,IAAA,CAAA,KAAA,CAAA,IAAA,CAAA;AACa,WAFb,CAEa,OAAA,CAAA,EAAA,CAAA;AACb;;AAEA,eAAA,IAAA;AACA;;AAEA,eAAA,aAAA,GAAA;AACA,eAAA,GAAA,CAAA,MAAA,KAAA,IAAA,GAAA,GAAA,GAAA,GAAA,CAAA,MAAA;AACA,OA3GA,CA6GA;;;AACA,eAAA,mBAAA,CAAA,MAAA,EAAA,IAAA,EAAA;AACA,YAAA,KAAA,GAAA,IAAA;;AACA,YAAA,MAAA,KAAA,CAAA,IAAA,MAAA,IAAA,GAAA,IAAA,MAAA,GAAA,GAAA,EAAA;AACA,cAAA,OAAA,GAAA,CAAA,OAAA,IAAA,KAAA,QAAA,GAAA,IAAA,GAAA,KAAA,KACA,QAAA,CAAA,MAAA,CAAA,MAAA,CAAA,CAAA,MAAA,CAAA,CAAA,CAAA,CADA;AAEA,UAAA,KAAA,GAAA,IAAA,KAAA,CAAA,OAAA,CAAA;AACA,UAAA,KAAA,CAAA,UAAA,GAAA,MAAA;AACA;;AAEA,eAAA,KAAA;AACA,OAxHA,CA0HA;;;AACA,eAAA,YAAA,GAAA;AACA,YAAA,MAAA,GAAA,aAAA,EAAA;AACA,YAAA,IAAA,GAAA,OAAA,EAAA;AACA,YAAA,KAAA,GAAA,mBAAA,CAAA,MAAA,EAAA,IAAA,CAAA;AACA,YAAA,QAAA,GAAA;AACA,UAAA,IAAA,EAAA,IADA;AAEA,UAAA,UAAA,EAAA,MAFA;AAGA,UAAA,UAAA,EAAA,GAAA,CAAA,UAHA;AAIA,UAAA,GAAA,EAAA;AAJA,SAAA;;AAMA,YAAA,GAAA,CAAA,qBAAA,EAAA;AAAsC;AACtC,UAAA,QAAA,CAAA,OAAA,GAAA,YAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,CAAA;AACS,SAFT,MAES;AACT,UAAA,QAAA,CAAA,OAAA,GAAA,EAAA;AACA;;AAEA,QAAA,QAAA,CAAA,KAAA,EAAA,QAAA,EAAA,QAAA,CAAA,IAAA,CAAA;AACA,OA5IA,CA8IA;AACA;;;AACA,eAAA,OAAA,GAAA;AACA,YAAA,MAAA,GAAA,aAAA,EAAA;AACA,YAAA,KAAA,GAAA,mBAAA,CAAA,MAAA,CAAA;AAEA,QAAA,GAAA,CAAA,MAAA,GAAA,GAAA,CAAA,UAAA,GAAA,MAAA;AACA,QAAA,GAAA,CAAA,IAAA,GAAA,OAAA,EAAA;AACA,QAAA,GAAA,CAAA,OAAA,GAAA,YAAA,CAAA,GAAA,CAAA,qBAAA,EAAA,CAAA;AAEA,QAAA,QAAA,CAAA,KAAA,EAAA,GAAA,EAAA,GAAA,CAAA,IAAA,CAAA;AACA;;AAEA,eAAA,KAAA,CAAA,GAAA,EAAA;AACA,QAAA,QAAA,CAAA,GAAA,EAAA,GAAA,CAAA;AACA;AACA;;AAGA,aAAA,IAAA,GAAA,CAAA;;;;;;;;;;;;;;;AChLA,IAAA,MAAA,CAAA,OAAA,GAAA,IAAA;AAEA,IAAA,IAAA,CAAA,KAAA,GAAA,IAAA,CAAA,YAAA;AACA,MAAA,MAAA,CAAA,cAAA,CAAA,QAAA,CAAA,SAAA,EAAA,MAAA,EAAA;AACA,QAAA,KAAA,EAAA,iBAAA;AACA,iBAAA,IAAA,CAAA,IAAA,CAAA;AACK,SAHL;AAIA,QAAA,YAAA,EAAA;AAJA,OAAA;AAMC,KAPD,CAAA;;AASA,aAAA,IAAA,CAAA,EAAA,EAAA;AACA,UAAA,MAAA,GAAA,KAAA;AACA,aAAA,YAAA;AACA,YAAA,MAAA,EAAA;AACA,QAAA,MAAA,GAAA,IAAA;AACA,eAAA,EAAA,CAAA,KAAA,CAAA,IAAA,EAAA,SAAA,CAAA;AACA,OAJA;AAKA;;;;;;;;;;;;;;;AClBA,IAAA,MAAA,CAAA,OAAA,GAAA,SAAA,SAAA,GAAA;AACA;AACA,UAAA,OAAA,IAAA,CAAA,SAAA,KAAA,WAAA,EAAA;AACA,eAAA,UAAA,GAAA,EAAA;AACA,cAAA,MAAA,GAAA,IAAA,IAAA,CAAA,SAAA,EAAA;AACA,iBAAA,MAAA,CAAA,eAAA,CAAA,GAAA,EAAA,iBAAA,CAAA;AACA,SAHA;OAHA,CASA;;;AACA,UAAA,OAAA,IAAA,CAAA,aAAA,KAAA,WAAA,IACA,IAAA,IAAA,CAAA,aAAA,CAAA,kBAAA,CADA,EACA;AACA,eAAA,UAAA,GAAA,EAAA;AACA,cAAA,MAAA,GAAA,IAAA,IAAA,CAAA,aAAA,CAAA,kBAAA,CAAA;AACA,UAAA,MAAA,CAAA,KAAA,GAAA,OAAA;AACA,UAAA,MAAA,CAAA,OAAA,CAAA,GAAA;AACA,iBAAA,MAAA;AACA,SALA;AAMA,OAlBA,CAoBA;;;AACA,aAAA,UAAA,GAAA,EAAA;AACA,YAAA,GAAA,GAAA,QAAA,CAAA,aAAA,CAAA,KAAA,CAAA;AACA,QAAA,GAAA,CAAA,SAAA,GAAA,GAAA;AACA,eAAA,GAAA;AACA,OAJA;AAKC,KA1BD,EAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACwBA,QAAa,cAAc,GAA3B,MAAa,cAAb,CAA2B,EAA3B;AAAa,IAAA,cAAc,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAhB1B,MAAA,CAAA,0CAAA,CAAA,UAAA,CAAA,CAAA,CAAS;AACR,MAAA,SAAS,EAAE,EADH;AAER,MAAA,OAAO,EAAE,CACP,yDAAA,CAAA,iCAAA,CADO,EAEP,iDAAA,CAAA,kBAAA,CAFO,EAGP,4CAAA,CAAA,cAAA,CAHO,EAIP,2CAAA,CAAA,aAAA,CAJO,EAKP,4CAAA,CAAA,cAAA,CAAA,CAAa,QAAb,CAAsB,CACpB;AACE,QAAA,IAAI,EAAE,EADR;AAEE,QAAA,SAAS,EAAE,uCAAA,CAAA,UAAA;AAFb,OADoB,CAAtB,CALO,CAFD;AAcR,MAAA,YAAY,EAAE,CAAC,uCAAA,CAAA,UAAA,CAAD;AAdN,KAAT,CAgB0B,CAAA,EAAd,cAAc,CAAd;;;;;;;;;;;;;;;;ACxBb,IAAA,mBAAA,CAAA,CAAA,CAAA,mBAAA;AAAe;;;AAAA,IAAA,mBAAA,CAAA,SAAA,CAAA,GAAA,2+BAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;gECAf;;;AAWA,IAAA,+CAAA,CAAA,gBAAA,CAAA,CAA+B,mBAAO;AAAC;AAAA,qDAAD,CAAtC;AA6BA,QAAa,QAAQ,GAArB,MAAa,QAAb,CAAqB;AAkBnB,MAAA,WAAA,CAAoB,IAApB,EAA6C,EAA7C,EAA2E,QAA3E,EAA6F;AAAzE,aAAA,IAAA,GAAA,IAAA;AAAyB,aAAA,EAAA,GAAA,EAAA;AAA8B,aAAA,QAAA,GAAA,QAAA;AAd3E,aAAA,cAAA,GAAkC,CAAC,CAAD,EAAI,CAAJ,EAAO,CAAP,EAAU,CAAV,EAAa,CAAb,CAAlC;AACA,aAAA,UAAA,GAAa,EAAb;AAEA,aAAA,UAAA,GAAqC;AACnC,UAAA,MAAM,EAAE;AACN,YAAA,GAAG,EAAE,SADC;AAEN,YAAA,GAAG,EAAE;AAFC,WAD2B;AAKnC,UAAA,IAAI,EAAE,CAL6B;AAMnC,UAAA,SAAS,EAAE,MAAM,CAAC,IAAP,CAAY,SAAZ,CAAsB;AANE,SAArC,CAW6F,CAC3F;;AACA,QAAA,qCAAO,CAAC,wCAAD,EAA2C,CAAC,GAAD,EAAM,GAAN,KAAa;AAC7D,gBAAM,KAAK,GAAY,2CAAQ,CAAC,6CAAA,CAAA,OAAA,CAAA,CAAiB,GAAjB,CAAD,CAA/B;AACA,gBAAM,CAAC,GAAG,KAAK,CAAC,SAAN,CAAgB,CAAC,IAAI,CAAC,CAAC,CAAD,CAAD,KAAS,GAA9B,CAAV;AACA,eAAK,UAAL,GAAkB,KAAK,CACpB,KADe,CACT,CADS,EACN,CAAC,GAAG,CADE,EAEf,GAFe,CAEX,CAAC,IAAI,CAAC,CAAC,IAAF,CAAO,GAAP,CAFM,EAEO,IAFP,CAEY,GAFZ,CAAlB;AAGD,SANM,CAAP;AAOD;;AAXD,UAAI,QAAJ,GAAY;AAAK,eAAO,KAAK,QAAL,CAAc,EAAd,CAAiB,QAAjB,CAAP;AAAoC;;AAa/C,MAAA,kBAAkB,GAAA;;AACtB,gBAAM,KAAK,OAAL,CAAa,KAAb,EAAN;AACA,eAAK,YAAL;AACA,UAAA,WAAW,CAAC,MAAM,KAAK,YAAL,EAAP,EAA4B,KAA5B,CAAX;AACD,S;AAAA;;AAED,MAAA,YAAY,GAAA;AACV,cAAM,MAAM,GAAG,KAAK,OAAL,CAAa,GAAb,CAAiB,SAAjB,EAAf;AACA,cAAM,EAAE,GAAG,MAAM,CAAC,YAAP,EAAX;AACA,cAAM,EAAE,GAAG,MAAM,CAAC,YAAP,EAAX;AACA,aAAK,IAAL,CAAU,GAAV,4DAAkE,EAAE,CAAC,GAAH,EAAlE,oBAAoF,EAAE,CAAC,GAAH,EAApF,oBAAsG,EAAE,CAAC,GAAH,EAAtG,oBAAwH,EAAE,CAAC,GAAH,EAAxH,GACG,SADH,CACc,QAAD,IAAqC;AAC9C,eAAK,cAAL,GAAsB,QAAQ,CAAC,MAAT,IACpB,QAAQ,CAAC,MAAT,CAAgB,GAAhB,CAAoB,QAAQ,IAAG;AAC7B,kBAAM,KAAK,GAAG,KAAK,cAAL,CAAoB,IAApB,CAAyB,CAAC,IAAI,CAAC,CAAC,EAAF,KAAS,QAAQ,CAAC,CAAD,CAA/C,CAAd;AACA,kBAAM,MAAM,GAAoB;AAC9B,cAAA,QAAQ,EAAE,QAAQ,CAAC,EAAD,CADY;AAE9B,cAAA,EAAE,EAAE,QAAQ,CAAC,CAAD,CAFkB;AAG9B,cAAA,KAAK,EAAE,KAAK,IAAI,KAAK,CAAC,KAAf,IAAwB,wCAAW,EAHZ;AAI9B,cAAA,OAAO,EAAE,QAAQ,CAAC,CAAD,CAJa;AAK9B,cAAA,OAAO,EAAE,QAAQ,CAAC,EAAD,CALa;AAM9B,cAAA,IAAI,EAAE,KAAK,IAAI,KAAK,CAAC,IAAf,IAAuB,KAAK,OAAL,CAAa,QAAQ,CAAC,EAAD,CAArB,CANC;AAO9B,cAAA,KAAK,EAAE,CAPuB;AAQ9B,cAAA,KAAK,EAAE;AACL,gBAAA,IAAI,EAAE,QAAQ,CAAC,CAAD,CAAR,CAAY,iBAAZ,EADD;AAEL,gBAAA,KAAK,EAAE;AAFF,eARuB;AAY9B;AACA,cAAA,QAAQ,EAAE,QAAQ,CAAC,CAAD,CAbY;AAc9B,cAAA,QAAQ,EAAE,IAAI,MAAM,CAAC,IAAP,CAAY,MAAhB,CAAuB,QAAQ,CAAC,CAAD,CAA/B,EAAoC,QAAQ,CAAC,CAAD,CAA5C;AAdoB,aAAhC;AAiBA,mBAAO,MAAP;AACD,WApBD,EAqBG,MArBH,CAqBU,CAAC,IAAI,CAAC,CAAC,CAAC,QArBlB,EAsBG,MAtBH,CAsBU,CAtBV,EAsBa,EAtBb,CADoB,IAwBjB,EAxBL;AAyBD,SA3BH;AA4BD;;AAED,MAAA,UAAU,CAAC,WAAD,EAAoB;AAC5B,eAAO,+CAAA,CAAA,eAAA,CAAA,CAA8B,WAA9B,EAA2C,IAA3C,CAAP;AACD;;AAED,MAAA,OAAO,CAAC,QAAD,EAAiB;AACtB,cAAM,KAAK,GAAG,wCAAW,EAAzB;AACA,eAAO;AACL,UAAA,IAAI,EAAE,KAAK,UADN;AAEL,UAAA,WAAW,EAAE,IAAI,MAAM,CAAC,IAAP,CAAY,KAAhB,CAAsB,CAAtB,EAAyB,CAAzB,CAFR;AAGL,UAAA,SAAS,EAAE,KAHN;AAIL,UAAA,WAAW,EAAE,EAJR;AAKL,UAAA,WAAW,EAAE,KALR;AAML,UAAA,aAAa,EAAE,CANV;AAOL,UAAA,YAAY,EAAE,CAPT;AAQL,UAAA,KAAK,EAAE,CARF;AASL,UAAA;AATK,SAAP;AAWD;;AAED,MAAA,iBAAiB,GAAA;AACf,QAAA,IAAI,CAAC,sEAAD,EAAyE,QAAzE,CAAJ;AACD;;AA1FkB,KAArB;;;YAkB4B,iDAAA,CAAA,YAAA;;YAAuB,0CAAA,CAAA,kBAAA;;YAAoC,2CAAA,CAAA,UAAA;;;AAjBpB,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAAhE,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU,yDAAA,CAAA,oCAAA,CAAV,EAA8C;AAAE,MAAA,MAAM,EAAE;AAAV,KAA9C,CAAgE,E,gEAAS,yDAAA,CAAA,oCAAA,C,CAAT,CAAA,E,kBAAA,E,SAAA,E,KAA4C,CAA5C;AACb,IAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CAAnD,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU,oBAAV,EAAgC;AAAE,MAAA,MAAM,EAAE;AAAV,KAAhC,CAAmD,E,gEAAoB,0CAAA,CAAA,aAAA,C,CAApB,CAAA,E,kBAAA,E,oBAAA,E,KAAqC,CAArC;AAFzC,IAAA,QAAQ,GAAA,kCAAA,CAAA,YAAA,CAAA,CAAA,CALpB,MAAA,CAAA,0CAAA,CAAA,WAAA,CAAA,CAAA,CAAU;AACT,MAAA,QAAQ,EAAE,UADD;AAET,MAAA,QAAA,EAAA,kCAAA,CAAA,iBAAA,CAAA,CAAA,mBAAA;AAAA;AAAA,2EAAA,CAAA,EAAA,OAFS;;;;AAAA,KAAV,CAKoB,E,uEAkBO,iDAAA,CAAA,YAAA,C,EAAuB,0CAAA,CAAA,kBAAA,C,EAAoC,2CAAA,CAAA,UAAA,C,EAlBlE,CAAA,EAAR,QAAQ,CAAR","sourcesContent":["/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Observable} from 'rxjs';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Transforms an `HttpRequest` into a stream of `HttpEvent`s, one of which will likely be a\n * `HttpResponse`.\n *\n * `HttpHandler` is injectable. When injected, the handler instance dispatches requests to the\n * first interceptor in the chain, which dispatches to the second, etc, eventually reaching the\n * `HttpBackend`.\n *\n * In an `HttpInterceptor`, the `HttpHandler` parameter is the next interceptor in the chain.\n *\n * @publicApi\n */\nexport abstract class HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n\n/**\n * A final `HttpHandler` which will dispatch the request via browser HTTP APIs to a backend.\n *\n * Interceptors sit between the `HttpClient` interface and the `HttpBackend`.\n *\n * When injected, `HttpBackend` dispatches requests directly to the backend, without going\n * through the interceptor chain.\n *\n * @publicApi\n */\nexport abstract class HttpBackend implements HttpHandler {\n  abstract handle(req: HttpRequest<any>): Observable<HttpEvent<any>>;\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ninterface Update {\n  name: string;\n  value?: string|string[];\n  op: 'a'|'s'|'d';\n}\n\n/**\n * Represents the header configuration options for an HTTP request.\n * Instances are immutable. Modifying methods return a cloned\n * instance with the change. The original object is never changed.\n *\n * @publicApi\n */\nexport class HttpHeaders {\n  /**\n   * Internal map of lowercase header names to values.\n   */\n  // TODO(issue/24571): remove '!'.\n  private headers !: Map<string, string[]>;\n\n\n  /**\n   * Internal map of lowercased header names to the normalized\n   * form of the name (the form seen first).\n   */\n  private normalizedNames: Map<string, string> = new Map();\n\n  /**\n   * Complete the lazy initialization of this object (needed before reading).\n   */\n  private lazyInit !: HttpHeaders | Function | null;\n\n  /**\n   * Queued updates to be materialized the next initialization.\n   */\n  private lazyUpdate: Update[]|null = null;\n\n  /**  Constructs a new HTTP header object with the given values.*/\n\n  constructor(headers?: string|{[name: string]: string | string[]}) {\n    if (!headers) {\n      this.headers = new Map<string, string[]>();\n    } else if (typeof headers === 'string') {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        headers.split('\\n').forEach(line => {\n          const index = line.indexOf(':');\n          if (index > 0) {\n            const name = line.slice(0, index);\n            const key = name.toLowerCase();\n            const value = line.slice(index + 1).trim();\n            this.maybeSetNormalizedName(name, key);\n            if (this.headers.has(key)) {\n              this.headers.get(key) !.push(value);\n            } else {\n              this.headers.set(key, [value]);\n            }\n          }\n        });\n      };\n    } else {\n      this.lazyInit = () => {\n        this.headers = new Map<string, string[]>();\n        Object.keys(headers).forEach(name => {\n          let values: string|string[] = headers[name];\n          const key = name.toLowerCase();\n          if (typeof values === 'string') {\n            values = [values];\n          }\n          if (values.length > 0) {\n            this.headers.set(key, values);\n            this.maybeSetNormalizedName(name, key);\n          }\n        });\n      };\n    }\n  }\n\n  /**\n   * Checks for existence of a given header.\n   *\n   * @param name The header name to check for existence.\n   *\n   * @returns True if the header exists, false otherwise.\n   */\n  has(name: string): boolean {\n    this.init();\n\n    return this.headers.has(name.toLowerCase());\n  }\n\n  /**\n   * Retrieves the first value of a given header.\n   *\n   * @param name The header name.\n   *\n   * @returns The value string if the header exists, null otherwise\n   */\n  get(name: string): string|null {\n    this.init();\n\n    const values = this.headers.get(name.toLowerCase());\n    return values && values.length > 0 ? values[0] : null;\n  }\n\n  /**\n   * Retrieves the names of the headers.\n   *\n   * @returns A list of header names.\n   */\n  keys(): string[] {\n    this.init();\n\n    return Array.from(this.normalizedNames.values());\n  }\n\n  /**\n   * Retrieves a list of values for a given header.\n   *\n   * @param name The header name from which to retrieve values.\n   *\n   * @returns A string of values if the header exists, null otherwise.\n   */\n  getAll(name: string): string[]|null {\n    this.init();\n\n    return this.headers.get(name.toLowerCase()) || null;\n  }\n\n  /**\n   * Appends a new value to the existing set of values for a header\n   * and returns them in a clone of the original instance.\n   *\n   * @param name The header name for which to append the value or values.\n   * @param value The new value or array of values.\n   *\n   * @returns A clone of the HTTP headers object with the value appended to the given header.\n   */\n\n  append(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'a'});\n  }\n  /**\n   * Sets or modifies a value for a given header in a clone of the original instance.\n   * If the header already exists, its value is replaced with the given value\n   * in the returned object.\n   *\n   * @param name The header name.\n   * @param value The value or values to set or overide for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the newly set header value.\n   */\n  set(name: string, value: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 's'});\n  }\n  /**\n   * Deletes values for a given header in a clone of the original instance.\n   *\n   * @param name The header name.\n   * @param value The value or values to delete for the given header.\n   *\n   * @returns A clone of the HTTP headers object with the given value deleted.\n   */\n  delete (name: string, value?: string|string[]): HttpHeaders {\n    return this.clone({name, value, op: 'd'});\n  }\n\n  private maybeSetNormalizedName(name: string, lcName: string): void {\n    if (!this.normalizedNames.has(lcName)) {\n      this.normalizedNames.set(lcName, name);\n    }\n  }\n\n  private init(): void {\n    if (!!this.lazyInit) {\n      if (this.lazyInit instanceof HttpHeaders) {\n        this.copyFrom(this.lazyInit);\n      } else {\n        this.lazyInit();\n      }\n      this.lazyInit = null;\n      if (!!this.lazyUpdate) {\n        this.lazyUpdate.forEach(update => this.applyUpdate(update));\n        this.lazyUpdate = null;\n      }\n    }\n  }\n\n  private copyFrom(other: HttpHeaders) {\n    other.init();\n    Array.from(other.headers.keys()).forEach(key => {\n      this.headers.set(key, other.headers.get(key) !);\n      this.normalizedNames.set(key, other.normalizedNames.get(key) !);\n    });\n  }\n\n  private clone(update: Update): HttpHeaders {\n    const clone = new HttpHeaders();\n    clone.lazyInit =\n        (!!this.lazyInit && this.lazyInit instanceof HttpHeaders) ? this.lazyInit : this;\n    clone.lazyUpdate = (this.lazyUpdate || []).concat([update]);\n    return clone;\n  }\n\n  private applyUpdate(update: Update): void {\n    const key = update.name.toLowerCase();\n    switch (update.op) {\n      case 'a':\n      case 's':\n        let value = update.value !;\n        if (typeof value === 'string') {\n          value = [value];\n        }\n        if (value.length === 0) {\n          return;\n        }\n        this.maybeSetNormalizedName(update.name, key);\n        const base = (update.op === 'a' ? this.headers.get(key) : undefined) || [];\n        base.push(...value);\n        this.headers.set(key, base);\n        break;\n      case 'd':\n        const toDelete = update.value as string | undefined;\n        if (!toDelete) {\n          this.headers.delete(key);\n          this.normalizedNames.delete(key);\n        } else {\n          let existing = this.headers.get(key);\n          if (!existing) {\n            return;\n          }\n          existing = existing.filter(value => toDelete.indexOf(value) === -1);\n          if (existing.length === 0) {\n            this.headers.delete(key);\n            this.normalizedNames.delete(key);\n          } else {\n            this.headers.set(key, existing);\n          }\n        }\n        break;\n    }\n  }\n\n  /**\n   * @internal\n   */\n  forEach(fn: (name: string, values: string[]) => void) {\n    this.init();\n    Array.from(this.normalizedNames.keys())\n        .forEach(key => fn(this.normalizedNames.get(key) !, this.headers.get(key) !));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\n/**\n * A codec for encoding and decoding parameters in URLs.\n *\n * Used by `HttpParams`.\n *\n * @publicApi\n **/\nexport interface HttpParameterCodec {\n  encodeKey(key: string): string;\n  encodeValue(value: string): string;\n\n  decodeKey(key: string): string;\n  decodeValue(value: string): string;\n}\n\n/**\n * Provides encoding and decoding of URL parameter and query-string values.\n *\n * Serializes and parses URL parameter keys and values to encode and decode them.\n * If you pass URL query parameters without encoding,\n * the query parameters can be misinterpreted at the receiving end.\n *\n *\n * @publicApi\n */\nexport class HttpUrlEncodingCodec implements HttpParameterCodec {\n  /**\n   * Encodes a key name for a URL parameter or query-string.\n   * @param key The key name.\n   * @returns The encoded key name.\n   */\n  encodeKey(key: string): string { return standardEncoding(key); }\n\n  /**\n   * Encodes the value of a URL parameter or query-string.\n   * @param value The value.\n   * @returns The encoded value.\n   */\n  encodeValue(value: string): string { return standardEncoding(value); }\n\n  /**\n   * Decodes an encoded URL parameter or query-string key.\n   * @param key The encoded key name.\n   * @returns The decoded key name.\n   */\n  decodeKey(key: string): string { return decodeURIComponent(key); }\n\n  /**\n   * Decodes an encoded URL parameter or query-string value.\n   * @param value The encoded value.\n   * @returns The decoded value.\n   */\n  decodeValue(value: string) { return decodeURIComponent(value); }\n}\n\n\nfunction paramParser(rawParams: string, codec: HttpParameterCodec): Map<string, string[]> {\n  const map = new Map<string, string[]>();\n  if (rawParams.length > 0) {\n    const params: string[] = rawParams.split('&');\n    params.forEach((param: string) => {\n      const eqIdx = param.indexOf('=');\n      const [key, val]: string[] = eqIdx == -1 ?\n          [codec.decodeKey(param), ''] :\n          [codec.decodeKey(param.slice(0, eqIdx)), codec.decodeValue(param.slice(eqIdx + 1))];\n      const list = map.get(key) || [];\n      list.push(val);\n      map.set(key, list);\n    });\n  }\n  return map;\n}\nfunction standardEncoding(v: string): string {\n  return encodeURIComponent(v)\n      .replace(/%40/gi, '@')\n      .replace(/%3A/gi, ':')\n      .replace(/%24/gi, '$')\n      .replace(/%2C/gi, ',')\n      .replace(/%3B/gi, ';')\n      .replace(/%2B/gi, '+')\n      .replace(/%3D/gi, '=')\n      .replace(/%3F/gi, '?')\n      .replace(/%2F/gi, '/');\n}\n\ninterface Update {\n  param: string;\n  value?: string;\n  op: 'a'|'d'|'s';\n}\n\n/** Options used to construct an `HttpParams` instance.\n *\n * @publicApi\n */\nexport interface HttpParamsOptions {\n  /**\n   * String representation of the HTTP parameters in URL-query-string format.\n   * Mutually exclusive with `fromObject`.\n   */\n  fromString?: string;\n\n  /** Object map of the HTTP parameters. Mutually exclusive with `fromString`. */\n  fromObject?: {[param: string]: string | ReadonlyArray<string>};\n\n  /** Encoding codec used to parse and serialize the parameters. */\n  encoder?: HttpParameterCodec;\n}\n\n/**\n * An HTTP request/response body that represents serialized parameters,\n * per the MIME type `application/x-www-form-urlencoded`.\n *\n * This class is immutable; all mutation operations return a new instance.\n *\n * @publicApi\n */\nexport class HttpParams {\n  private map: Map<string, string[]>|null;\n  private encoder: HttpParameterCodec;\n  private updates: Update[]|null = null;\n  private cloneFrom: HttpParams|null = null;\n\n  constructor(options: HttpParamsOptions = {} as HttpParamsOptions) {\n    this.encoder = options.encoder || new HttpUrlEncodingCodec();\n    if (!!options.fromString) {\n      if (!!options.fromObject) {\n        throw new Error(`Cannot specify both fromString and fromObject.`);\n      }\n      this.map = paramParser(options.fromString, this.encoder);\n    } else if (!!options.fromObject) {\n      this.map = new Map<string, string[]>();\n      Object.keys(options.fromObject).forEach(key => {\n        const value = (options.fromObject as any)[key];\n        this.map !.set(key, Array.isArray(value) ? value : [value]);\n      });\n    } else {\n      this.map = null;\n    }\n  }\n\n  /**\n   * Reports whether the body includes one or more values for a given parameter.\n   * @param param The parameter name.\n   * @returns True if the parameter has one or more values,\n   * false if it has no value or is not present.\n   */\n  has(param: string): boolean {\n    this.init();\n    return this.map !.has(param);\n  }\n\n  /**\n   * Retrieves the first value for a parameter.\n   * @param param The parameter name.\n   * @returns The first value of the given parameter,\n   * or `null` if the parameter is not present.\n   */\n  get(param: string): string|null {\n    this.init();\n    const res = this.map !.get(param);\n    return !!res ? res[0] : null;\n  }\n\n  /**\n   * Retrieves all values for a  parameter.\n   * @param param The parameter name.\n   * @returns All values in a string array,\n   * or `null` if the parameter not present.\n   */\n  getAll(param: string): string[]|null {\n    this.init();\n    return this.map !.get(param) || null;\n  }\n\n  /**\n   * Retrieves all the parameters for this body.\n   * @returns The parameter names in a string array.\n   */\n  keys(): string[] {\n    this.init();\n    return Array.from(this.map !.keys());\n  }\n\n  /**\n   * Appends a new value to existing values for a parameter.\n   * @param param The parameter name.\n   * @param value The new value to add.\n   * @return A new body with the appended value.\n   */\n  append(param: string, value: string): HttpParams { return this.clone({param, value, op: 'a'}); }\n\n  /**\n   * Replaces the value for a parameter.\n   * @param param The parameter name.\n   * @param value The new value.\n   * @return A new body with the new value.\n   */\n  set(param: string, value: string): HttpParams { return this.clone({param, value, op: 's'}); }\n\n  /**\n   * Removes a given value or all values from a parameter.\n   * @param param The parameter name.\n   * @param value The value to remove, if provided.\n   * @return A new body with the given value removed, or with all values\n   * removed if no value is specified.\n   */\n  delete (param: string, value?: string): HttpParams { return this.clone({param, value, op: 'd'}); }\n\n  /**\n   * Serializes the body to an encoded string, where key-value pairs (separated by `=`) are\n   * separated by `&`s.\n   */\n  toString(): string {\n    this.init();\n    return this.keys()\n        .map(key => {\n          const eKey = this.encoder.encodeKey(key);\n          return this.map !.get(key) !.map(value => eKey + '=' + this.encoder.encodeValue(value))\n              .join('&');\n        })\n        .join('&');\n  }\n\n  private clone(update: Update): HttpParams {\n    const clone = new HttpParams({ encoder: this.encoder } as HttpParamsOptions);\n    clone.cloneFrom = this.cloneFrom || this;\n    clone.updates = (this.updates || []).concat([update]);\n    return clone;\n  }\n\n  private init() {\n    if (this.map === null) {\n      this.map = new Map<string, string[]>();\n    }\n    if (this.cloneFrom !== null) {\n      this.cloneFrom.init();\n      this.cloneFrom.keys().forEach(key => this.map !.set(key, this.cloneFrom !.map !.get(key) !));\n      this.updates !.forEach(update => {\n        switch (update.op) {\n          case 'a':\n          case 's':\n            const base = (update.op === 'a' ? this.map !.get(update.param) : undefined) || [];\n            base.push(update.value !);\n            this.map !.set(update.param, base);\n            break;\n          case 'd':\n            if (update.value !== undefined) {\n              let base = this.map !.get(update.param) || [];\n              const idx = base.indexOf(update.value);\n              if (idx !== -1) {\n                base.splice(idx, 1);\n              }\n              if (base.length > 0) {\n                this.map !.set(update.param, base);\n              } else {\n                this.map !.delete(update.param);\n              }\n            } else {\n              this.map !.delete(update.param);\n              break;\n            }\n        }\n      });\n      this.cloneFrom = this.updates = null;\n    }\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\nimport {HttpParams} from './params';\n\n/**\n * Construction interface for `HttpRequest`s.\n *\n * All values are optional and will override default values if provided.\n */\ninterface HttpRequestInit {\n  headers?: HttpHeaders;\n  reportProgress?: boolean;\n  params?: HttpParams;\n  responseType?: 'arraybuffer'|'blob'|'json'|'text';\n  withCredentials?: boolean;\n}\n\n/**\n * Determine whether the given HTTP method may include a body.\n */\nfunction mightHaveBody(method: string): boolean {\n  switch (method) {\n    case 'DELETE':\n    case 'GET':\n    case 'HEAD':\n    case 'OPTIONS':\n    case 'JSONP':\n      return false;\n    default:\n      return true;\n  }\n}\n\n/**\n * Safely assert whether the given value is an ArrayBuffer.\n *\n * In some execution environments ArrayBuffer is not defined.\n */\nfunction isArrayBuffer(value: any): value is ArrayBuffer {\n  return typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer;\n}\n\n/**\n * Safely assert whether the given value is a Blob.\n *\n * In some execution environments Blob is not defined.\n */\nfunction isBlob(value: any): value is Blob {\n  return typeof Blob !== 'undefined' && value instanceof Blob;\n}\n\n/**\n * Safely assert whether the given value is a FormData instance.\n *\n * In some execution environments FormData is not defined.\n */\nfunction isFormData(value: any): value is FormData {\n  return typeof FormData !== 'undefined' && value instanceof FormData;\n}\n\n/**\n * An outgoing HTTP request with an optional typed body.\n *\n * `HttpRequest` represents an outgoing request, including URL, method,\n * headers, body, and other request configuration options. Instances should be\n * assumed to be immutable. To modify a `HttpRequest`, the `clone`\n * method should be used.\n *\n * @publicApi\n */\nexport class HttpRequest<T> {\n  /**\n   * The request body, or `null` if one isn't set.\n   *\n   * Bodies are not enforced to be immutable, as they can include a reference to any\n   * user-defined data type. However, interceptors should take care to preserve\n   * idempotence by treating them as such.\n   */\n  readonly body: T|null = null;\n\n  /**\n   * Outgoing headers for this request.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly headers !: HttpHeaders;\n\n  /**\n   * Whether this request should be made in a way that exposes progress events.\n   *\n   * Progress events are expensive (change detection runs on each event) and so\n   * they should only be requested if the consumer intends to monitor them.\n   */\n  readonly reportProgress: boolean = false;\n\n  /**\n   * Whether this request should be sent with outgoing credentials (cookies).\n   */\n  readonly withCredentials: boolean = false;\n\n  /**\n   * The expected response type of the server.\n   *\n   * This is used to parse the response appropriately before returning it to\n   * the requestee.\n   */\n  readonly responseType: 'arraybuffer'|'blob'|'json'|'text' = 'json';\n\n  /**\n   * The outgoing HTTP request method.\n   */\n  readonly method: string;\n\n  /**\n   * Outgoing URL parameters.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly params !: HttpParams;\n\n  /**\n   * The outgoing URL with all URL parameters set.\n   */\n  readonly urlWithParams: string;\n\n  constructor(method: 'DELETE'|'GET'|'HEAD'|'JSONP'|'OPTIONS', url: string, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: 'POST'|'PUT'|'PATCH', url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(method: string, url: string, body: T|null, init?: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  });\n  constructor(\n      method: string, readonly url: string, third?: T|{\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }|null,\n      fourth?: {\n        headers?: HttpHeaders,\n        reportProgress?: boolean,\n        params?: HttpParams,\n        responseType?: 'arraybuffer'|'blob'|'json'|'text',\n        withCredentials?: boolean,\n      }) {\n    this.method = method.toUpperCase();\n    // Next, need to figure out which argument holds the HttpRequestInit\n    // options, if any.\n    let options: HttpRequestInit|undefined;\n\n    // Check whether a body argument is expected. The only valid way to omit\n    // the body argument is to use a known no-body method like GET.\n    if (mightHaveBody(this.method) || !!fourth) {\n      // Body is the third argument, options are the fourth.\n      this.body = (third !== undefined) ? third as T : null;\n      options = fourth;\n    } else {\n      // No body required, options are the third argument. The body stays null.\n      options = third as HttpRequestInit;\n    }\n\n    // If options have been passed, interpret them.\n    if (options) {\n      // Normalize reportProgress and withCredentials.\n      this.reportProgress = !!options.reportProgress;\n      this.withCredentials = !!options.withCredentials;\n\n      // Override default response type of 'json' if one is provided.\n      if (!!options.responseType) {\n        this.responseType = options.responseType;\n      }\n\n      // Override headers if they're provided.\n      if (!!options.headers) {\n        this.headers = options.headers;\n      }\n\n      if (!!options.params) {\n        this.params = options.params;\n      }\n    }\n\n    // If no headers have been passed in, construct a new HttpHeaders instance.\n    if (!this.headers) {\n      this.headers = new HttpHeaders();\n    }\n\n    // If no parameters have been passed in, construct a new HttpUrlEncodedParams instance.\n    if (!this.params) {\n      this.params = new HttpParams();\n      this.urlWithParams = url;\n    } else {\n      // Encode the parameters to a string in preparation for inclusion in the URL.\n      const params = this.params.toString();\n      if (params.length === 0) {\n        // No parameters, the visible URL is just the URL given at creation time.\n        this.urlWithParams = url;\n      } else {\n        // Does the URL already have query parameters? Look for '?'.\n        const qIdx = url.indexOf('?');\n        // There are 3 cases to handle:\n        // 1) No existing parameters -> append '?' followed by params.\n        // 2) '?' exists and is followed by existing query string ->\n        //    append '&' followed by params.\n        // 3) '?' exists at the end of the url -> append params directly.\n        // This basically amounts to determining the character, if any, with\n        // which to join the URL and parameters.\n        const sep: string = qIdx === -1 ? '?' : (qIdx < url.length - 1 ? '&' : '');\n        this.urlWithParams = url + sep + params;\n      }\n    }\n  }\n\n  /**\n   * Transform the free-form body into a serialized format suitable for\n   * transmission to the server.\n   */\n  serializeBody(): ArrayBuffer|Blob|FormData|string|null {\n    // If no body is present, no need to serialize it.\n    if (this.body === null) {\n      return null;\n    }\n    // Check whether the body is already in a serialized form. If so,\n    // it can just be returned directly.\n    if (isArrayBuffer(this.body) || isBlob(this.body) || isFormData(this.body) ||\n        typeof this.body === 'string') {\n      return this.body;\n    }\n    // Check whether the body is an instance of HttpUrlEncodedParams.\n    if (this.body instanceof HttpParams) {\n      return this.body.toString();\n    }\n    // Check whether the body is an object or array, and serialize with JSON if so.\n    if (typeof this.body === 'object' || typeof this.body === 'boolean' ||\n        Array.isArray(this.body)) {\n      return JSON.stringify(this.body);\n    }\n    // Fall back on toString() for everything else.\n    return (this.body as any).toString();\n  }\n\n  /**\n   * Examine the body and attempt to infer an appropriate MIME type\n   * for it.\n   *\n   * If no such type can be inferred, this method will return `null`.\n   */\n  detectContentTypeHeader(): string|null {\n    // An empty body has no content type.\n    if (this.body === null) {\n      return null;\n    }\n    // FormData bodies rely on the browser's content type assignment.\n    if (isFormData(this.body)) {\n      return null;\n    }\n    // Blobs usually have their own content type. If it doesn't, then\n    // no type can be inferred.\n    if (isBlob(this.body)) {\n      return this.body.type || null;\n    }\n    // Array buffers have unknown contents and thus no type can be inferred.\n    if (isArrayBuffer(this.body)) {\n      return null;\n    }\n    // Technically, strings could be a form of JSON data, but it's safe enough\n    // to assume they're plain strings.\n    if (typeof this.body === 'string') {\n      return 'text/plain';\n    }\n    // `HttpUrlEncodedParams` has its own content-type.\n    if (this.body instanceof HttpParams) {\n      return 'application/x-www-form-urlencoded;charset=UTF-8';\n    }\n    // Arrays, objects, and numbers will be encoded as JSON.\n    if (typeof this.body === 'object' || typeof this.body === 'number' ||\n        Array.isArray(this.body)) {\n      return 'application/json';\n    }\n    // No type could be inferred.\n    return null;\n  }\n\n  clone(): HttpRequest<T>;\n  clone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: T|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<T>;\n  clone<V>(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: V|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string},\n  }): HttpRequest<V>;\n  clone(update: {\n    headers?: HttpHeaders,\n    reportProgress?: boolean,\n    params?: HttpParams,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n    body?: any|null,\n    method?: string,\n    url?: string,\n    setHeaders?: {[name: string]: string | string[]},\n    setParams?: {[param: string]: string};\n  } = {}): HttpRequest<any> {\n    // For method, url, and responseType, take the current value unless\n    // it is overridden in the update hash.\n    const method = update.method || this.method;\n    const url = update.url || this.url;\n    const responseType = update.responseType || this.responseType;\n\n    // The body is somewhat special - a `null` value in update.body means\n    // whatever current body is present is being overridden with an empty\n    // body, whereas an `undefined` value in update.body implies no\n    // override.\n    const body = (update.body !== undefined) ? update.body : this.body;\n\n    // Carefully handle the boolean options to differentiate between\n    // `false` and `undefined` in the update args.\n    const withCredentials =\n        (update.withCredentials !== undefined) ? update.withCredentials : this.withCredentials;\n    const reportProgress =\n        (update.reportProgress !== undefined) ? update.reportProgress : this.reportProgress;\n\n    // Headers and params may be appended to if `setHeaders` or\n    // `setParams` are used.\n    let headers = update.headers || this.headers;\n    let params = update.params || this.params;\n\n    // Check whether the caller has asked to add headers.\n    if (update.setHeaders !== undefined) {\n      // Set every requested header.\n      headers =\n          Object.keys(update.setHeaders)\n              .reduce((headers, name) => headers.set(name, update.setHeaders ![name]), headers);\n    }\n\n    // Check whether the caller has asked to set params.\n    if (update.setParams) {\n      // Set every requested param.\n      params = Object.keys(update.setParams)\n                   .reduce((params, param) => params.set(param, update.setParams ![param]), params);\n    }\n\n    // Finally, construct the new HttpRequest using the pieces from above.\n    return new HttpRequest(\n        method, url, body, {\n                               params, headers, reportProgress, responseType, withCredentials,\n                           });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {HttpHeaders} from './headers';\n\n/**\n * Type enumeration for the different kinds of `HttpEvent`.\n *\n * @publicApi\n */\nexport enum HttpEventType {\n  /**\n   * The request was sent out over the wire.\n   */\n  Sent,\n\n  /**\n   * An upload progress event was received.\n   */\n  UploadProgress,\n\n  /**\n   * The response status code and headers were received.\n   */\n  ResponseHeader,\n\n  /**\n   * A download progress event was received.\n   */\n  DownloadProgress,\n\n  /**\n   * The full response including the body was received.\n   */\n  Response,\n\n  /**\n   * A custom event from an interceptor or a backend.\n   */\n  User,\n}\n\n/**\n * Base interface for progress events.\n *\n * @publicApi\n */\nexport interface HttpProgressEvent {\n  /**\n   * Progress event type is either upload or download.\n   */\n  type: HttpEventType.DownloadProgress|HttpEventType.UploadProgress;\n\n  /**\n   * Number of bytes uploaded or downloaded.\n   */\n  loaded: number;\n\n  /**\n   * Total number of bytes to upload or download. Depending on the request or\n   * response, this may not be computable and thus may not be present.\n   */\n  total?: number;\n}\n\n/**\n * A download progress event.\n *\n * @publicApi\n */\nexport interface HttpDownloadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.DownloadProgress;\n\n  /**\n   * The partial response body as downloaded so far.\n   *\n   * Only present if the responseType was `text`.\n   */\n  partialText?: string;\n}\n\n/**\n * An upload progress event.\n *\n * @publicApi\n */\nexport interface HttpUploadProgressEvent extends HttpProgressEvent {\n  type: HttpEventType.UploadProgress;\n}\n\n/**\n * An event indicating that the request was sent to the server. Useful\n * when a request may be retried multiple times, to distinguish between\n * retries on the final event stream.\n *\n * @publicApi\n */\nexport interface HttpSentEvent { type: HttpEventType.Sent; }\n\n/**\n * A user-defined event.\n *\n * Grouping all custom events under this type ensures they will be handled\n * and forwarded by all implementations of interceptors.\n *\n * @publicApi\n */\nexport interface HttpUserEvent<T> { type: HttpEventType.User; }\n\n/**\n * An error that represents a failed attempt to JSON.parse text coming back\n * from the server.\n *\n * It bundles the Error object with the actual response body that failed to parse.\n *\n *\n */\nexport interface HttpJsonParseError {\n  error: Error;\n  text: string;\n}\n\n/**\n * Union type for all possible events on the response stream.\n *\n * Typed according to the expected type of the response.\n *\n * @publicApi\n */\nexport type HttpEvent<T> =\n    HttpSentEvent | HttpHeaderResponse | HttpResponse<T>| HttpProgressEvent | HttpUserEvent<T>;\n\n/**\n * Base class for both `HttpResponse` and `HttpHeaderResponse`.\n *\n * @publicApi\n */\nexport abstract class HttpResponseBase {\n  /**\n   * All response headers.\n   */\n  readonly headers: HttpHeaders;\n\n  /**\n   * Response status code.\n   */\n  readonly status: number;\n\n  /**\n   * Textual description of response status code.\n   *\n   * Do not depend on this.\n   */\n  readonly statusText: string;\n\n  /**\n   * URL of the resource retrieved, or null if not available.\n   */\n  readonly url: string|null;\n\n  /**\n   * Whether the status code falls in the 2xx range.\n   */\n  readonly ok: boolean;\n\n  /**\n   * Type of the response, narrowed to either the full response or the header.\n   */\n  // TODO(issue/24571): remove '!'.\n  readonly type !: HttpEventType.Response | HttpEventType.ResponseHeader;\n\n  /**\n   * Super-constructor for all responses.\n   *\n   * The single parameter accepted is an initialization hash. Any properties\n   * of the response passed there will override the default values.\n   */\n  constructor(\n      init: {\n        headers?: HttpHeaders,\n        status?: number,\n        statusText?: string,\n        url?: string,\n      },\n      defaultStatus: number = 200, defaultStatusText: string = 'OK') {\n    // If the hash has values passed, use them to initialize the response.\n    // Otherwise use the default values.\n    this.headers = init.headers || new HttpHeaders();\n    this.status = init.status !== undefined ? init.status : defaultStatus;\n    this.statusText = init.statusText || defaultStatusText;\n    this.url = init.url || null;\n\n    // Cache the ok value to avoid defining a getter.\n    this.ok = this.status >= 200 && this.status < 300;\n  }\n}\n\n/**\n * A partial HTTP response which only includes the status and header data,\n * but no response body.\n *\n * `HttpHeaderResponse` is a `HttpEvent` available on the response\n * event stream, only when progress events are requested.\n *\n * @publicApi\n */\nexport class HttpHeaderResponse extends HttpResponseBase {\n  /**\n   * Create a new `HttpHeaderResponse` with the given parameters.\n   */\n  constructor(init: {\n    headers?: HttpHeaders,\n    status?: number,\n    statusText?: string,\n    url?: string,\n  } = {}) {\n    super(init);\n  }\n\n  readonly type: HttpEventType.ResponseHeader = HttpEventType.ResponseHeader;\n\n  /**\n   * Copy this `HttpHeaderResponse`, overriding its contents with the\n   * given parameter hash.\n   */\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;} = {}):\n      HttpHeaderResponse {\n    // Perform a straightforward initialization of the new HttpHeaderResponse,\n    // overriding the current parameters with new ones if given.\n    return new HttpHeaderResponse({\n      headers: update.headers || this.headers,\n      status: update.status !== undefined ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A full HTTP response, including a typed response body (which may be `null`\n * if one was not returned).\n *\n * `HttpResponse` is a `HttpEvent` available on the response event\n * stream.\n *\n * @publicApi\n */\nexport class HttpResponse<T> extends HttpResponseBase {\n  /**\n   * The response body, or `null` if one was not returned.\n   */\n  readonly body: T|null;\n\n  /**\n   * Construct a new `HttpResponse`.\n   */\n  constructor(init: {\n    body?: T | null, headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  } = {}) {\n    super(init);\n    this.body = init.body !== undefined ? init.body : null;\n  }\n\n  readonly type: HttpEventType.Response = HttpEventType.Response;\n\n  clone(): HttpResponse<T>;\n  clone(update: {headers?: HttpHeaders; status?: number; statusText?: string; url?: string;}):\n      HttpResponse<T>;\n  clone<V>(update: {\n    body?: V | null, headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  }): HttpResponse<V>;\n  clone(update: {\n    body?: any | null; headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  } = {}): HttpResponse<any> {\n    return new HttpResponse<any>({\n      body: (update.body !== undefined) ? update.body : this.body,\n      headers: update.headers || this.headers,\n      status: (update.status !== undefined) ? update.status : this.status,\n      statusText: update.statusText || this.statusText,\n      url: update.url || this.url || undefined,\n    });\n  }\n}\n\n/**\n * A response that represents an error or failure, either from a\n * non-successful HTTP status, an error while executing the request,\n * or some other failure which occurred during the parsing of the response.\n *\n * Any error returned on the `Observable` response stream will be\n * wrapped in an `HttpErrorResponse` to provide additional context about\n * the state of the HTTP layer when the error occurred. The error property\n * will contain either a wrapped Error object or the error response returned\n * from the server.\n *\n * @publicApi\n */\nexport class HttpErrorResponse extends HttpResponseBase implements Error {\n  readonly name = 'HttpErrorResponse';\n  readonly message: string;\n  readonly error: any|null;\n\n  /**\n   * Errors are never okay, even when the status code is in the 2xx success range.\n   */\n  readonly ok = false;\n\n  constructor(init: {\n    error?: any; headers?: HttpHeaders; status?: number; statusText?: string; url?: string;\n  }) {\n    // Initialize with a default status of 0 / Unknown Error.\n    super(init, 0, 'Unknown Error');\n\n    // If the response was successful, then this was a parse error. Otherwise, it was\n    // a protocol-level failure of some sort. Either the request failed in transit\n    // or the server returned an unsuccessful status code.\n    if (this.status >= 200 && this.status < 300) {\n      this.message = `Http failure during parsing for ${init.url || '(unknown url)'}`;\n    } else {\n      this.message =\n          `Http failure response for ${init.url || '(unknown url)'}: ${init.status} ${init.statusText}`;\n    }\n    this.error = init.error || null;\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, of } from 'rxjs';\nimport {concatMap, filter, map} from 'rxjs/operators';\n\nimport {HttpHandler} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpParams, HttpParamsOptions} from './params';\nimport {HttpRequest} from './request';\nimport {HttpEvent, HttpResponse} from './response';\n\n\n/**\n * Constructs an instance of `HttpRequestOptions<T>` from a source `HttpMethodOptions` and\n * the given `body`. This function clones the object and adds the body.\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n *\n */\nfunction addBody<T>(\n    options: {\n      headers?: HttpHeaders | {[header: string]: string | string[]},\n      observe?: HttpObserve,\n      params?: HttpParams | {[param: string]: string | string[]},\n      reportProgress?: boolean,\n      responseType?: 'arraybuffer' | 'blob' | 'json' | 'text',\n      withCredentials?: boolean,\n    },\n    body: T | null): any {\n  return {\n    body,\n    headers: options.headers,\n    observe: options.observe,\n    params: options.params,\n    reportProgress: options.reportProgress,\n    responseType: options.responseType,\n    withCredentials: options.withCredentials,\n  };\n}\n\nexport type HttpObserve = 'body' | 'events' | 'response';\n\n/**\n * Performs HTTP requests.\n * This service is available as an injectable class, with methods to perform HTTP requests.\n * Each request method has multiple signatures, and the return type varies based on\n * the signature that is called (mainly the values of `observe` and `responseType`).\n *\n * Note that the `responseType` *options* value is a String that identifies the\n * single data type of the response.\n * A single overload version of the method handles each response type.\n * The value of `responseType` cannot be a union, as the combined signature could imply.\n\n *\n * @usageNotes\n * Sample HTTP requests for the [Tour of Heroes](/tutorial/toh-pt0) application.\n *\n * ### HTTP Request Example\n *\n * ```\n *  // GET heroes whose name contains search term\n * searchHeroes(term: string): observable<Hero[]>{\n *\n *  const params = new HttpParams({fromString: 'name=term'});\n *    return this.httpClient.request('GET', this.heroesUrl, {responseType:'json', params});\n * }\n * ```\n * ### JSONP Example\n * ```\n * requestJsonp(url, callback = 'callback') {\n *  return this.httpClient.jsonp(this.heroesURL, callback);\n * }\n * ```\n *\n * ### PATCH Example\n * ```\n * // PATCH one of the heroes' name\n * patchHero (id: number, heroName: string): Observable<{}> {\n * const url = `${this.heroesUrl}/${id}`;   // PATCH api/heroes/42\n *  return this.httpClient.patch(url, {name: heroName}, httpOptions)\n *    .pipe(catchError(this.handleError('patchHero')));\n * }\n * ```\n *\n * @see [HTTP Guide](guide/http)\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpClient {\n  constructor(private handler: HttpHandler) {}\n\n  /**\n   * Sends an `HTTPRequest` and returns a stream of `HTTPEvents`.\n   *\n   * @return An `Observable` of the response, with the response body as a stream of `HTTPEvents`.\n   */\n  request<R>(req: HttpRequest<any>): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the response in an\n   * `ArrayBuffer`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a request that interprets the body as a blob and returns\n   * the response as a blob.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a request that interprets the body as an `ArrayBuffer` and returns the\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an array of `HTTPEvents` for the\n   * request.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    params?: HttpParams|{[param: string]: string | string[]},\n    observe: 'events', reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a request that interprets the body as a `Blob` and returns\n   * the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of of all `HttpEvents` for the request,\n   * with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text string and returns the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the reques,\n   * with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the  request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   *  with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<any>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<R>>;\n\n  /**\n   * Constructs a request which interprets the body as an `ArrayBuffer`\n   * and returns the full `HTTPResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body as an `ArrayBuffer`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a request which interprets the body as a `Blob` and returns the full `HTTPResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `Blob`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a request which interprets the body as a text stream and returns the full `HTTPResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the HTTP response, with the response body of type string.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full `HTTPResponse`.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HTTPResponse`,\n   * with the response body of type `Object`.\n   */\n  request(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns\n   * the full `HTTPResponse` with the response body in the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the full `HTTPResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    reportProgress?: boolean,\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<R>>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object and returns the full\n   * `HTTPResponse` as a JSON object.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `Object`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a request which interprets the body as a JSON object\n   * with the response body of the requested type.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `R`.\n   */\n  request<R>(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    responseType?: 'json',\n    reportProgress?: boolean,\n    withCredentials?: boolean,\n  }): Observable<R>;\n\n  /**\n   * Constructs a request where response type and requested observable are not known statically.\n   *\n   * @param method  The HTTP method.\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the reuested response, wuth body of type `any`.\n   */\n  request(method: string, url: string, options?: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    params?: HttpParams|{[param: string]: string | string[]},\n    observe?: HttpObserve,\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  }): Observable<any>;\n\n  /**\n   * Constructs an observable for a generic HTTP request that, when subscribed,\n   * fires the request through the chain of registered interceptors and on to the\n   * server.\n   *\n   * You can pass an `HttpRequest` directly as the only parameter. In this case,\n   * the call returns an observable of the raw `HttpEvent` stream.\n   *\n   * Alternatively you can pass an HTTP method as the first parameter,\n   * a URL string as the second, and an options hash containing the request body as the third.\n   * See `addBody()`. In this case, the specified `responseType` and `observe` options determine the\n   * type of returned observable.\n   *   * The `responseType` value determines how a successful response body is parsed.\n   *   * If `responseType` is the default `json`, you can pass a type interface for the resulting\n   * object as a type parameter to the call.\n   *\n   * The `observe` value determines the return type, according to what you are interested in\n   * observing.\n   *   * An `observe` value of events returns an observable of the raw `HttpEvent` stream, including\n   * progress events by default.\n   *   * An `observe` value of response returns an observable of `HttpResponse<T>`,\n   * where the `T` parameter depends on the `responseType` and any optionally provided type\n   * parameter.\n   *   * An `observe` value of body returns an observable of `<T>` with the same `T` body type.\n   *\n   */\n  request(first: string|HttpRequest<any>, url?: string, options: {\n    body?: any,\n    headers?: HttpHeaders|{[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    let req: HttpRequest<any>;\n    // First, check whether the primary argument is an instance of `HttpRequest`.\n    if (first instanceof HttpRequest) {\n      // It is. The other arguments must be undefined (per the signatures) and can be\n      // ignored.\n      req = first as HttpRequest<any>;\n    } else {\n      // It's a string, so it represents a URL. Construct a request based on it,\n      // and incorporate the remaining arguments (assuming `GET` unless a method is\n      // provided.\n\n      // Figure out the headers.\n      let headers: HttpHeaders|undefined = undefined;\n      if (options.headers instanceof HttpHeaders) {\n        headers = options.headers;\n      } else {\n        headers = new HttpHeaders(options.headers);\n      }\n\n      // Sort out parameters.\n      let params: HttpParams|undefined = undefined;\n      if (!!options.params) {\n        if (options.params instanceof HttpParams) {\n          params = options.params;\n        } else {\n          params = new HttpParams({ fromObject: options.params } as HttpParamsOptions);\n        }\n      }\n\n      // Construct the request.\n      req = new HttpRequest(first, url !, (options.body !== undefined ? options.body : null), {\n        headers,\n        params,\n        reportProgress: options.reportProgress,\n        // By default, JSON is assumed to be returned for all calls.\n        responseType: options.responseType || 'json',\n        withCredentials: options.withCredentials,\n      });\n    }\n\n    // Start with an Observable.of() the initial request, and run the handler (which\n    // includes all interceptors) inside a concatMap(). This way, the handler runs\n    // inside an Observable chain, which causes interceptors to be re-run on every\n    // subscription (this also makes retries re-run the handler, including interceptors).\n    const events$: Observable<HttpEvent<any>> =\n        of (req).pipe(concatMap((req: HttpRequest<any>) => this.handler.handle(req)));\n\n    // If coming via the API signature which accepts a previously constructed HttpRequest,\n    // the only option is to get the event stream. Otherwise, return the event stream if\n    // that is what was requested.\n    if (first instanceof HttpRequest || options.observe === 'events') {\n      return events$;\n    }\n\n    // The requested stream contains either the full response or the body. In either\n    // case, the first step is to filter the event stream to extract a stream of\n    // responses(s).\n    const res$: Observable<HttpResponse<any>> = <Observable<HttpResponse<any>>>events$.pipe(\n        filter((event: HttpEvent<any>) => event instanceof HttpResponse));\n\n    // Decide which stream to return.\n    switch (options.observe || 'body') {\n      case 'body':\n        // The requested stream is the body. Map the response stream to the response\n        // body. This could be done more simply, but a misbehaving interceptor might\n        // transform the response body into a different format and ignore the requested\n        // responseType. Guard against this by validating that the response is of the\n        // requested type.\n        switch (req.responseType) {\n          case 'arraybuffer':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is an ArrayBuffer.\n              if (res.body !== null && !(res.body instanceof ArrayBuffer)) {\n                throw new Error('Response is not an ArrayBuffer.');\n              }\n              return res.body;\n            }));\n          case 'blob':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a Blob.\n              if (res.body !== null && !(res.body instanceof Blob)) {\n                throw new Error('Response is not a Blob.');\n              }\n              return res.body;\n            }));\n          case 'text':\n            return res$.pipe(map((res: HttpResponse<any>) => {\n              // Validate that the body is a string.\n              if (res.body !== null && typeof res.body !== 'string') {\n                throw new Error('Response is not a string.');\n              }\n              return res.body;\n            }));\n          case 'json':\n          default:\n            // No validation needed for JSON responses, as they can be of any type.\n            return res$.pipe(map((res: HttpResponse<any>) => res.body));\n        }\n      case 'response':\n        // The response stream was requested directly, so return it.\n        return res$;\n      default:\n        // Guard against new future observe types being added.\n        throw new Error(`Unreachable: unhandled observe type ${options.observe}}`);\n    }\n  }\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response body as an `ArrayBuffer`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response body as a `Blob`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string and returns\n   * a string.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HTTPEvents` for the request,\n   * with response body as an `ArrayBuffer`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HTTPEvents` for the request, with the response body as a\n   * `Blob`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HTTPEvents` for the request, with the response\n   *  body of type string.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HTTPEvents` for the request, with response body of\n   * type `Object`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `DELETE`request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all the `HTTPEvents` for the request, with a response\n   * body in the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HTTPResponse`, with the response body as an `ArrayBuffer`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a `Blob` and returns the full\n   * `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `Blob`.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a text stream and\n   *  returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HTTPResponse`, with the response body of type string.\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `DELETE` request the interprets the body as a JSON object and returns\n   * the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of type `Object`.\n   *\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with the response body of the requested type.\n   */\n  delete<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `DELETE` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  delete (url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a DELETE request that interprets the body as a JSON object and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with response body in the requested type.\n   */\n  delete<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `DELETE` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   */\n  delete (url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('DELETE', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns the response in\n   *  an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob`\n   * and returns the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string\n   * and returns the response as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and returns\n   *  the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request, with the response\n   * body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text string and returns\n   * the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as an `ArrayBuffer` and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a `Blob` and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   *  with the response body as a `Blob`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a text stream and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body of type string.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HttpResponse`,\n   * with the response body of type `Object`.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the full `HTTPResponse` for the request,\n   * with a response body in the requested type.\n   */\n  get<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   *\n   * @return An `Observable` of the response body as a JSON object.\n   */\n  get(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `GET` request that interprets the body as a JSON object and returns\n   * the response body in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with a response body in the requested type.\n   */\n  get<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `GET` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  get(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('GET', url, options as any);\n  }\n\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer` and\n   * returns the response as an `ArrayBuffer`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return  An `Observable` of the response, with the response body as a `Blob`.\n   */\n\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string and returns the response\n   * as a string value.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an  `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of tall `HttpEvents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as a `Blob`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all HttpEvents for the request, with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object\n   * and returns the full HTTP event stream.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of all `HTTPEvents` for the request, with a response body of\n   * type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the full event stream.\n   *\n   * @return An `Observable` of all the `HTTPEvents` for the request\n   * , with a response body in the requested type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a `Blob` and returns\n   * the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as a blob.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as text stream\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body of type string.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with a responmse body of the requested type.\n   */\n  head<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  head(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `HEAD` request that interprets the body as a JSON object and returns\n   * the response in a given type.\n   *\n   * @param url     The endpoint URL.\n   * @param options The HTTP options to send with the request.\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with a response body of the given type.\n   */\n  head<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `HEAD` request to execute on the server. The `HEAD` method returns\n   * meta information about the resource without transferring the\n   * resource itself. See the individual overloads for\n   * details on the return type.\n   */\n  head(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('HEAD', url, options as any);\n  }\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * @return An `Observable` of the response object, with response body as an object.\n   */\n  jsonp(url: string, callbackParam: string): Observable<Object>;\n\n  /**\n   * Constructs a `JSONP` request for the given URL and name of the callback parameter.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   * You must install a suitable interceptor, such as one provided by `HttpClientJsonpModule`.\n   * If no such interceptor is reached,\n   * then the `JSONP` request can be rejected by the configured backend.\n   *\n   * @return An `Observable` of the response object, with response body in the requested type.\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes a request with the special method\n   * `JSONP` to be dispatched via the interceptor pipeline.\n   * The [JSONP pattern](https://en.wikipedia.org/wiki/JSONP) works around limitations of certain\n   * API endpoints that don't support newer,\n   * and preferable [CORS](https://developer.mozilla.org/en-US/docs/Web/HTTP/CORS) protocol.\n   * JSONP treats the endpoint API as a JavaScript file and tricks the browser to process the\n   * requests even if the API endpoint is not located on the same domain (origin) as the client-side\n   * application making the request.\n   * The endpoint API must support JSONP callback for JSONP requests to work.\n   * The resource API returns the JSON response wrapped in a callback function.\n   * You can pass the callback function name as one of the query parameters.\n   * Note that JSONP requests can only be used with `GET` requests.\n   *\n   * @param url The resource URL.\n   * @param callbackParam The callback function name.\n   *\n   */\n  jsonp<T>(url: string, callbackParam: string): Observable<T> {\n    return this.request<any>('JSONP', url, {\n      params: new HttpParams().append(callbackParam, 'JSONP_CALLBACK'),\n      observe: 'body',\n      responseType: 'json',\n    });\n  }\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an\n   * `ArrayBuffer` and returns the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string and\n   * returns a string value.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of all `HttpEvents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a text string\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPEvents` for the request,\n   * with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvents` for the request with the response\n   * body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HttpEvents` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a `Blob`\n   *  and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   *  with the response body as a `Blob`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as text stream\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   *  with the response body of type string.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with the response body of type `Object`.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and\n   * returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  options<T>(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the response\n   * body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  options(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs an `OPTIONS` request that interprets the body as a JSON object and returns the response\n   * in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HTTPResponse`, with a response body of the given type.\n   */\n  options<T>(url: string, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an `Observable` that, when subscribed, causes the configured\n   * `OPTIONS` request to execute on the server. This method allows the client\n   * to determine the supported HTTP methods and other capabilites of an endpoint,\n   * without implying a resource action. See the individual overloads for\n   * details on the return type.\n   */\n  options(url: string, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('OPTIONS', url, options as any);\n  }\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and returns\n   * the response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the response\n   * as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer` and\n   *  returns the the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob`\n   *  and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents` for the request, with the\n   * response body as `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text string and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents`for the request, with a\n   * response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents` for the request,\n   * with a response body of type `Object`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of all the `HTTPevents` for the request,\n   *  with a response body in the requested type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   *  with the response body as an `ArrayBuffer`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a `Blob` and returns the full\n   * `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a text stream and returns the\n   * full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body of type string.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the requested type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object and\n   * returns the response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  patch(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PATCH` request that interprets the body as a JSON object\n   * and returns the response in a given type.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to edit.\n   * @param options HTTP options.\n   *\n   * @return  An `Observable` of the `HttpResponse` for the request,\n   * with a response body in the given type.\n   */\n  patch<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PATCH` request to execute on the server. See the individual overloads for\n   * details on the return type.\n   */\n  patch(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PATCH', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `POST` request that interprets the body as an as an `ArrayBuffer` and returns\n   * an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options.\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the\n   * response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob`\n   * and returns the response in an observable of the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request, with the response body as `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text string and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvents` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a POST request that interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of all `HttpEvents` for the request,\n   * with a response body of type `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a POST request that interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a POST request that interprets the body as an `ArrayBuffer`\n   *  and returns the full `HTTPresponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HTTPResponse` for the request, with the response body as an `ArrayBuffer`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a `Blob` and returns the full\n   * `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a text stream and returns\n   * the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HTTPResponse` for the request,\n   * with a response body of type string.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object\n   * and returns the full `HTTPResponse`.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body of type\n   * `Object`.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object and returns the full\n   * `HTTPResponse`.\n   *\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a\n   * JSON object and returns the response body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  post(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `POST` request that interprets the body as a JSON object\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The content to replace with.\n   * @param options HTTP options\n   *\n   * @return  An `Observable` of the `HTTPResponse` for the request, with a response body in the requested type.\n   */\n  post<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `POST` request to execute on the server. The server responds with the location of\n   * the replaced resource. See the individual overloads for\n   * details on the return type.\n   */\n  post(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('POST', url, addBody(options, body));\n  }\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and returns the\n   * response as an `ArrayBuffer`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<ArrayBuffer>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns\n   * the response as a `Blob`.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<Blob>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and\n   * returns the response as a string value.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<string>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an `ArrayBuffer` and\n   * returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpEvent<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpEvent<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text string and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all HttpEvents for the request, with a response body\n   * of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpEvent<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request, with a response body of\n   * type `Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpEvent<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the\n   * full event stream.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of all `HttpEvents` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'events', responseType?: 'json', withCredentials?: boolean,\n  }): Observable<HttpEvent<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as an\n   * `ArrayBuffer` and returns an observable of the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with the response body as an `ArrayBuffer`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'arraybuffer', withCredentials?: boolean,\n  }): Observable<HttpResponse<ArrayBuffer>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a `Blob` and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with the response body as a `Blob`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'blob', withCredentials?: boolean,\n  }): Observable<HttpResponse<Blob>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a text stream and returns the\n   * full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body of type string.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType: 'text', withCredentials?: boolean,\n  }): Observable<HttpResponse<string>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body\n   * of type 'Object`.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<Object>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the full HTTP response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request,\n   * with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe: 'response',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<HttpResponse<T>>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object and returns the response\n   * body as a JSON object.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the response, with the response body as a JSON object.\n   */\n  put(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<Object>;\n\n  /**\n   * Constructs a `PUT` request that interprets the body as a JSON object\n   * and returns an observable of the response.\n   *\n   * @param url The endpoint URL.\n   * @param body The resources to add/update.\n   * @param options HTTP options\n   *\n   * @return An `Observable` of the `HTTPResponse` for the request, with a response body in the requested type.\n   */\n  put<T>(url: string, body: any|null, options?: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: 'body',\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'json',\n    withCredentials?: boolean,\n  }): Observable<T>;\n\n  /**\n   * Constructs an observable that, when subscribed, causes the configured\n   * `PUT` request to execute on the server. The `PUT` method replaces an existing resource\n   * with a new set of values.\n   * See the individual overloads for details on the return type.\n   */\n  put(url: string, body: any|null, options: {\n    headers?: HttpHeaders | {[header: string]: string | string[]},\n    observe?: HttpObserve,\n    params?: HttpParams|{[param: string]: string | string[]},\n    reportProgress?: boolean,\n    responseType?: 'arraybuffer'|'blob'|'json'|'text',\n    withCredentials?: boolean,\n  } = {}): Observable<any> {\n    return this.request<any>('PUT', url, addBody(options, body));\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, InjectionToken} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\n/**\n * Intercepts and handles an `HttpRequest` or `HttpResponse`.\n *\n * Most interceptors transform the outgoing request before passing it to the\n * next interceptor in the chain, by calling `next.handle(transformedReq)`.\n * An interceptor may transform the\n * response event stream as well, by applying additional RxJS operators on the stream\n * returned by `next.handle()`.\n *\n * More rarely, an interceptor may handle the request entirely,\n * and compose a new event stream instead of invoking `next.handle()`. This is an\n * acceptable behavior, but keep in mind that further interceptors will be skipped entirely.\n *\n * It is also rare but valid for an interceptor to return multiple responses on the\n * event stream for a single request.\n *\n * @publicApi\n *\n * @see [HTTP Guide](guide/http#intercepting-requests-and-responses)\n *\n * @usageNotes\n *\n * To use the same instance of `HttpInterceptors` for the entire app, import the `HttpClientModule`\n * only in your `AppModule`, and add the interceptors to the root application injector .\n * If you import `HttpClientModule` multiple times across different modules (for example, in lazy\n * loading modules), each import creates a new copy of the `HttpClientModule`, which overwrites the interceptors\n * provided in the root module.\n *\n */\nexport interface HttpInterceptor {\n  /**\n   * Identifies and handles a given HTTP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>>;\n}\n\n/**\n * `HttpHandler` which applies an `HttpInterceptor` to an `HttpRequest`.\n *\n *\n */\nexport class HttpInterceptorHandler implements HttpHandler {\n  constructor(private next: HttpHandler, private interceptor: HttpInterceptor) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    return this.interceptor.intercept(req, this.next);\n  }\n}\n\n/**\n * A multi-provider token that represents the array of registered\n * `HttpInterceptor` objects.\n *\n * @publicApi\n */\nexport const HTTP_INTERCEPTORS = new InjectionToken<HttpInterceptor[]>('HTTP_INTERCEPTORS');\n\n@Injectable()\nexport class NoopInterceptor implements HttpInterceptor {\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT} from '@angular/common';\nimport {Inject, Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpRequest} from './request';\nimport {HttpErrorResponse, HttpEvent, HttpEventType, HttpResponse} from './response';\n\n// Every request made through JSONP needs a callback name that's unique across the\n// whole page. Each request is assigned an id and the callback name is constructed\n// from that. The next id to be assigned is tracked in a global variable here that\n// is shared among all applications on the page.\nlet nextRequestId: number = 0;\n\n// Error text given when a JSONP script is injected, but doesn't invoke the callback\n// passed in its URL.\nexport const JSONP_ERR_NO_CALLBACK = 'JSONP injected script did not invoke callback.';\n\n// Error text given when a request is passed to the JsonpClientBackend that doesn't\n// have a request method JSONP.\nexport const JSONP_ERR_WRONG_METHOD = 'JSONP requests must use JSONP request method.';\nexport const JSONP_ERR_WRONG_RESPONSE_TYPE = 'JSONP requests must use Json response type.';\n\n/**\n * DI token/abstract type representing a map of JSONP callbacks.\n *\n * In the browser, this should always be the `window` object.\n *\n *\n */\nexport abstract class JsonpCallbackContext { [key: string]: (data: any) => void; }\n\n/**\n * Processes an `HttpRequest` with the JSONP method,\n * by performing JSONP style requests.\n * @see `HttpHandler`\n * @see `HttpXhrBackend`\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpClientBackend implements HttpBackend {\n  constructor(private callbackMap: JsonpCallbackContext, @Inject(DOCUMENT) private document: any) {}\n\n  /**\n   * Get the name of the next callback method, by incrementing the global `nextRequestId`.\n   */\n  private nextCallback(): string { return `ng_jsonp_callback_${nextRequestId++}`; }\n\n  /**\n   * Processes a JSONP request and returns an event stream of the results.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   *\n   */\n  handle(req: HttpRequest<never>): Observable<HttpEvent<any>> {\n    // Firstly, check both the method and response type. If either doesn't match\n    // then the request was improperly routed here and cannot be handled.\n    if (req.method !== 'JSONP') {\n      throw new Error(JSONP_ERR_WRONG_METHOD);\n    } else if (req.responseType !== 'json') {\n      throw new Error(JSONP_ERR_WRONG_RESPONSE_TYPE);\n    }\n\n    // Everything else happens inside the Observable boundary.\n    return new Observable<HttpEvent<any>>((observer: Observer<HttpEvent<any>>) => {\n      // The first step to make a request is to generate the callback name, and replace the\n      // callback placeholder in the URL with the name. Care has to be taken here to ensure\n      // a trailing &, if matched, gets inserted back into the URL in the correct place.\n      const callback = this.nextCallback();\n      const url = req.urlWithParams.replace(/=JSONP_CALLBACK(&|$)/, `=${callback}$1`);\n\n      // Construct the <script> tag and point it at the URL.\n      const node = this.document.createElement('script');\n      node.src = url;\n\n      // A JSONP request requires waiting for multiple callbacks. These variables\n      // are closed over and track state across those callbacks.\n\n      // The response object, if one has been received, or null otherwise.\n      let body: any|null = null;\n\n      // Whether the response callback has been called.\n      let finished: boolean = false;\n\n      // Whether the request has been cancelled (and thus any other callbacks)\n      // should be ignored.\n      let cancelled: boolean = false;\n\n      // Set the response callback in this.callbackMap (which will be the window\n      // object in the browser. The script being loaded via the <script> tag will\n      // eventually call this callback.\n      this.callbackMap[callback] = (data?: any) => {\n        // Data has been received from the JSONP script. Firstly, delete this callback.\n        delete this.callbackMap[callback];\n\n        // Next, make sure the request wasn't cancelled in the meantime.\n        if (cancelled) {\n          return;\n        }\n\n        // Set state to indicate data was received.\n        body = data;\n        finished = true;\n      };\n\n      // cleanup() is a utility closure that removes the <script> from the page and\n      // the response callback from the window. This logic is used in both the\n      // success, error, and cancellation paths, so it's extracted out for convenience.\n      const cleanup = () => {\n        // Remove the <script> tag if it's still on the page.\n        if (node.parentNode) {\n          node.parentNode.removeChild(node);\n        }\n\n        // Remove the response callback from the callbackMap (window object in the\n        // browser).\n        delete this.callbackMap[callback];\n      };\n\n      // onLoad() is the success callback which runs after the response callback\n      // if the JSONP script loads successfully. The event itself is unimportant.\n      // If something went wrong, onLoad() may run without the response callback\n      // having been invoked.\n      const onLoad = (event: Event) => {\n        // Do nothing if the request has been cancelled.\n        if (cancelled) {\n          return;\n        }\n\n        // Cleanup the page.\n        cleanup();\n\n        // Check whether the response callback has run.\n        if (!finished) {\n          // It hasn't, something went wrong with the request. Return an error via\n          // the Observable error path. All JSONP errors have status 0.\n          observer.error(new HttpErrorResponse({\n            url,\n            status: 0,\n            statusText: 'JSONP Error',\n            error: new Error(JSONP_ERR_NO_CALLBACK),\n          }));\n          return;\n        }\n\n        // Success. body either contains the response body or null if none was\n        // returned.\n        observer.next(new HttpResponse({\n          body,\n          status: 200,\n          statusText: 'OK', url,\n        }));\n\n        // Complete the stream, the response is over.\n        observer.complete();\n      };\n\n      // onError() is the error callback, which runs if the script returned generates\n      // a Javascript error. It emits the error via the Observable error channel as\n      // a HttpErrorResponse.\n      const onError: any = (error: Error) => {\n        // If the request was already cancelled, no need to emit anything.\n        if (cancelled) {\n          return;\n        }\n        cleanup();\n\n        // Wrap the error in a HttpErrorResponse.\n        observer.error(new HttpErrorResponse({\n          error,\n          status: 0,\n          statusText: 'JSONP Error', url,\n        }));\n      };\n\n      // Subscribe to both the success (load) and error events on the <script> tag,\n      // and add it to the page.\n      node.addEventListener('load', onLoad);\n      node.addEventListener('error', onError);\n      this.document.body.appendChild(node);\n\n      // The request has now been successfully sent.\n      observer.next({type: HttpEventType.Sent});\n\n      // Cancellation handler.\n      return () => {\n        // Track the cancellation so event listeners won't do anything even if already scheduled.\n        cancelled = true;\n\n        // Remove the event listeners so they won't run if the events later fire.\n        node.removeEventListener('load', onLoad);\n        node.removeEventListener('error', onError);\n\n        // And finally, clean up the page.\n        cleanup();\n      };\n    });\n  }\n}\n\n/**\n * Identifies requests with the method JSONP and\n * shifts them to the `JsonpClientBackend`.\n *\n * @see `HttpInterceptor`\n *\n * @publicApi\n */\n@Injectable()\nexport class JsonpInterceptor {\n  constructor(private jsonp: JsonpClientBackend) {}\n\n  /**\n   * Identifies and handles a given JSONP request.\n   * @param req The outgoing request object to handle.\n   * @param next The next interceptor in the chain, or the backend\n   * if no interceptors remain in the chain.\n   * @returns An observable of the event stream.\n   */\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    if (req.method === 'JSONP') {\n      return this.jsonp.handle(req as HttpRequest<never>);\n    }\n    // Fall through for normal HTTP requests.\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable} from '@angular/core';\nimport {Observable, Observer} from 'rxjs';\n\nimport {HttpBackend} from './backend';\nimport {HttpHeaders} from './headers';\nimport {HttpRequest} from './request';\nimport {HttpDownloadProgressEvent, HttpErrorResponse, HttpEvent, HttpEventType, HttpHeaderResponse, HttpJsonParseError, HttpResponse, HttpUploadProgressEvent} from './response';\n\nconst XSSI_PREFIX = /^\\)\\]\\}',?\\n/;\n\n/**\n * Determine an appropriate URL for the response, by checking either\n * XMLHttpRequest.responseURL or the X-Request-URL header.\n */\nfunction getResponseUrl(xhr: any): string|null {\n  if ('responseURL' in xhr && xhr.responseURL) {\n    return xhr.responseURL;\n  }\n  if (/^X-Request-URL:/m.test(xhr.getAllResponseHeaders())) {\n    return xhr.getResponseHeader('X-Request-URL');\n  }\n  return null;\n}\n\n/**\n * A wrapper around the `XMLHttpRequest` constructor.\n *\n * @publicApi\n */\nexport abstract class XhrFactory { abstract build(): XMLHttpRequest; }\n\n/**\n * A factory for `HttpXhrBackend` that uses the `XMLHttpRequest` browser API.\n *\n */\n@Injectable()\nexport class BrowserXhr implements XhrFactory {\n  constructor() {}\n  build(): any { return <any>(new XMLHttpRequest()); }\n}\n\n/**\n * Tracks a response from the server that does not yet have a body.\n */\ninterface PartialResponse {\n  headers: HttpHeaders;\n  status: number;\n  statusText: string;\n  url: string;\n}\n\n/**\n * Uses `XMLHttpRequest` to send requests to a backend server.\n * @see `HttpHandler`\n * @see `JsonpClientBackend`\n *\n * @publicApi\n */\n@Injectable()\nexport class HttpXhrBackend implements HttpBackend {\n  constructor(private xhrFactory: XhrFactory) {}\n\n  /**\n   * Processes a request and returns a stream of response events.\n   * @param req The request object.\n   * @returns An observable of the response events.\n   */\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    // Quick check to give a better error message when a user attempts to use\n    // HttpClient.jsonp() without installing the JsonpClientModule\n    if (req.method === 'JSONP') {\n      throw new Error(`Attempted to construct Jsonp request without JsonpClientModule installed.`);\n    }\n\n    // Everything happens on Observable subscription.\n    return new Observable((observer: Observer<HttpEvent<any>>) => {\n      // Start by setting up the XHR object with request method, URL, and withCredentials flag.\n      const xhr = this.xhrFactory.build();\n      xhr.open(req.method, req.urlWithParams);\n      if (!!req.withCredentials) {\n        xhr.withCredentials = true;\n      }\n\n      // Add all the requested headers.\n      req.headers.forEach((name, values) => xhr.setRequestHeader(name, values.join(',')));\n\n      // Add an Accept header if one isn't present already.\n      if (!req.headers.has('Accept')) {\n        xhr.setRequestHeader('Accept', 'application/json, text/plain, */*');\n      }\n\n      // Auto-detect the Content-Type header if one isn't present already.\n      if (!req.headers.has('Content-Type')) {\n        const detectedType = req.detectContentTypeHeader();\n        // Sometimes Content-Type detection fails.\n        if (detectedType !== null) {\n          xhr.setRequestHeader('Content-Type', detectedType);\n        }\n      }\n\n      // Set the responseType if one was requested.\n      if (req.responseType) {\n        const responseType = req.responseType.toLowerCase();\n\n        // JSON responses need to be processed as text. This is because if the server\n        // returns an XSSI-prefixed JSON response, the browser will fail to parse it,\n        // xhr.response will be null, and xhr.responseText cannot be accessed to\n        // retrieve the prefixed JSON data in order to strip the prefix. Thus, all JSON\n        // is parsed by first requesting text and then applying JSON.parse.\n        xhr.responseType = ((responseType !== 'json') ? responseType : 'text') as any;\n      }\n\n      // Serialize the request body if one is present. If not, this will be set to null.\n      const reqBody = req.serializeBody();\n\n      // If progress events are enabled, response headers will be delivered\n      // in two events - the HttpHeaderResponse event and the full HttpResponse\n      // event. However, since response headers don't change in between these\n      // two events, it doesn't make sense to parse them twice. So headerResponse\n      // caches the data extracted from the response whenever it's first parsed,\n      // to ensure parsing isn't duplicated.\n      let headerResponse: HttpHeaderResponse|null = null;\n\n      // partialFromXhr extracts the HttpHeaderResponse from the current XMLHttpRequest\n      // state, and memoizes it into headerResponse.\n      const partialFromXhr = (): HttpHeaderResponse => {\n        if (headerResponse !== null) {\n          return headerResponse;\n        }\n\n        // Read status and normalize an IE9 bug (http://bugs.jquery.com/ticket/1450).\n        const status: number = xhr.status === 1223 ? 204 : xhr.status;\n        const statusText = xhr.statusText || 'OK';\n\n        // Parse headers from XMLHttpRequest - this step is lazy.\n        const headers = new HttpHeaders(xhr.getAllResponseHeaders());\n\n        // Read the response URL from the XMLHttpResponse instance and fall back on the\n        // request URL.\n        const url = getResponseUrl(xhr) || req.url;\n\n        // Construct the HttpHeaderResponse and memoize it.\n        headerResponse = new HttpHeaderResponse({headers, status, statusText, url});\n        return headerResponse;\n      };\n\n      // Next, a few closures are defined for the various events which XMLHttpRequest can\n      // emit. This allows them to be unregistered as event listeners later.\n\n      // First up is the load event, which represents a response being fully available.\n      const onLoad = () => {\n        // Read response state from the memoized partial data.\n        let {headers, status, statusText, url} = partialFromXhr();\n\n        // The body will be read out if present.\n        let body: any|null = null;\n\n        if (status !== 204) {\n          // Use XMLHttpRequest.response if set, responseText otherwise.\n          body = (typeof xhr.response === 'undefined') ? xhr.responseText : xhr.response;\n        }\n\n        // Normalize another potential bug (this one comes from CORS).\n        if (status === 0) {\n          status = !!body ? 200 : 0;\n        }\n\n        // ok determines whether the response will be transmitted on the event or\n        // error channel. Unsuccessful status codes (not 2xx) will always be errors,\n        // but a successful status code can still result in an error if the user\n        // asked for JSON data and the body cannot be parsed as such.\n        let ok = status >= 200 && status < 300;\n\n        // Check whether the body needs to be parsed as JSON (in many cases the browser\n        // will have done that already).\n        if (req.responseType === 'json' && typeof body === 'string') {\n          // Save the original body, before attempting XSSI prefix stripping.\n          const originalBody = body;\n          body = body.replace(XSSI_PREFIX, '');\n          try {\n            // Attempt the parse. If it fails, a parse error should be delivered to the user.\n            body = body !== '' ? JSON.parse(body) : null;\n          } catch (error) {\n            // Since the JSON.parse failed, it's reasonable to assume this might not have been a\n            // JSON response. Restore the original body (including any XSSI prefix) to deliver\n            // a better error response.\n            body = originalBody;\n\n            // If this was an error request to begin with, leave it as a string, it probably\n            // just isn't JSON. Otherwise, deliver the parsing error to the user.\n            if (ok) {\n              // Even though the response status was 2xx, this is still an error.\n              ok = false;\n              // The parse error contains the text of the body that failed to parse.\n              body = { error, text: body } as HttpJsonParseError;\n            }\n          }\n        }\n\n        if (ok) {\n          // A successful response is delivered on the event stream.\n          observer.next(new HttpResponse({\n            body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n          // The full body has been received and delivered, no further events\n          // are possible. This request is complete.\n          observer.complete();\n        } else {\n          // An unsuccessful request is delivered on the error channel.\n          observer.error(new HttpErrorResponse({\n            // The error in this case is the response body (error from the server).\n            error: body,\n            headers,\n            status,\n            statusText,\n            url: url || undefined,\n          }));\n        }\n      };\n\n      // The onError callback is called when something goes wrong at the network level.\n      // Connection timeout, DNS error, offline, etc. These are actual errors, and are\n      // transmitted on the error channel.\n      const onError = (error: ProgressEvent) => {\n        const {url} = partialFromXhr();\n        const res = new HttpErrorResponse({\n          error,\n          status: xhr.status || 0,\n          statusText: xhr.statusText || 'Unknown Error',\n          url: url || undefined,\n        });\n        observer.error(res);\n      };\n\n      // The sentHeaders flag tracks whether the HttpResponseHeaders event\n      // has been sent on the stream. This is necessary to track if progress\n      // is enabled since the event will be sent on only the first download\n      // progerss event.\n      let sentHeaders = false;\n\n      // The download progress event handler, which is only registered if\n      // progress events are enabled.\n      const onDownProgress = (event: ProgressEvent) => {\n        // Send the HttpResponseHeaders event if it hasn't been sent already.\n        if (!sentHeaders) {\n          observer.next(partialFromXhr());\n          sentHeaders = true;\n        }\n\n        // Start building the download progress event to deliver on the response\n        // event stream.\n        let progressEvent: HttpDownloadProgressEvent = {\n          type: HttpEventType.DownloadProgress,\n          loaded: event.loaded,\n        };\n\n        // Set the total number of bytes in the event if it's available.\n        if (event.lengthComputable) {\n          progressEvent.total = event.total;\n        }\n\n        // If the request was for text content and a partial response is\n        // available on XMLHttpRequest, include it in the progress event\n        // to allow for streaming reads.\n        if (req.responseType === 'text' && !!xhr.responseText) {\n          progressEvent.partialText = xhr.responseText;\n        }\n\n        // Finally, fire the event.\n        observer.next(progressEvent);\n      };\n\n      // The upload progress event handler, which is only registered if\n      // progress events are enabled.\n      const onUpProgress = (event: ProgressEvent) => {\n        // Upload progress events are simpler. Begin building the progress\n        // event.\n        let progress: HttpUploadProgressEvent = {\n          type: HttpEventType.UploadProgress,\n          loaded: event.loaded,\n        };\n\n        // If the total number of bytes being uploaded is available, include\n        // it.\n        if (event.lengthComputable) {\n          progress.total = event.total;\n        }\n\n        // Send the event.\n        observer.next(progress);\n      };\n\n      // By default, register for load and error events.\n      xhr.addEventListener('load', onLoad);\n      xhr.addEventListener('error', onError);\n\n      // Progress events are only enabled if requested.\n      if (req.reportProgress) {\n        // Download progress is always enabled if requested.\n        xhr.addEventListener('progress', onDownProgress);\n\n        // Upload progress depends on whether there is a body to upload.\n        if (reqBody !== null && xhr.upload) {\n          xhr.upload.addEventListener('progress', onUpProgress);\n        }\n      }\n\n      // Fire the request, and notify the event stream that it was fired.\n      xhr.send(reqBody !);\n      observer.next({type: HttpEventType.Sent});\n\n      // This is the return from the Observable function, which is the\n      // request cancellation handler.\n      return () => {\n        // On a cancellation, remove all registered event listeners.\n        xhr.removeEventListener('error', onError);\n        xhr.removeEventListener('load', onLoad);\n        if (req.reportProgress) {\n          xhr.removeEventListener('progress', onDownProgress);\n          if (reqBody !== null && xhr.upload) {\n            xhr.upload.removeEventListener('progress', onUpProgress);\n          }\n        }\n\n        // Finally, abort the in-flight request.\n        xhr.abort();\n      };\n    });\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {DOCUMENT, ÉµparseCookieValue as parseCookieValue} from '@angular/common';\nimport {Inject, Injectable, InjectionToken, PLATFORM_ID} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpHandler} from './backend';\nimport {HttpInterceptor} from './interceptor';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\n\nexport const XSRF_COOKIE_NAME = new InjectionToken<string>('XSRF_COOKIE_NAME');\nexport const XSRF_HEADER_NAME = new InjectionToken<string>('XSRF_HEADER_NAME');\n\n/**\n * Retrieves the current XSRF token to use with the next outgoing request.\n *\n * @publicApi\n */\nexport abstract class HttpXsrfTokenExtractor {\n  /**\n   * Get the XSRF token to use with an outgoing request.\n   *\n   * Will be called for every request, so the token may change between requests.\n   */\n  abstract getToken(): string|null;\n}\n\n/**\n * `HttpXsrfTokenExtractor` which retrieves the token from a cookie.\n */\n@Injectable()\nexport class HttpXsrfCookieExtractor implements HttpXsrfTokenExtractor {\n  private lastCookieString: string = '';\n  private lastToken: string|null = null;\n\n  /**\n   * @internal for testing\n   */\n  parseCount: number = 0;\n\n  constructor(\n      @Inject(DOCUMENT) private doc: any, @Inject(PLATFORM_ID) private platform: string,\n      @Inject(XSRF_COOKIE_NAME) private cookieName: string) {}\n\n  getToken(): string|null {\n    if (this.platform === 'server') {\n      return null;\n    }\n    const cookieString = this.doc.cookie || '';\n    if (cookieString !== this.lastCookieString) {\n      this.parseCount++;\n      this.lastToken = parseCookieValue(cookieString, this.cookieName);\n      this.lastCookieString = cookieString;\n    }\n    return this.lastToken;\n  }\n}\n\n/**\n * `HttpInterceptor` which adds an XSRF token to eligible outgoing requests.\n */\n@Injectable()\nexport class HttpXsrfInterceptor implements HttpInterceptor {\n  constructor(\n      private tokenService: HttpXsrfTokenExtractor,\n      @Inject(XSRF_HEADER_NAME) private headerName: string) {}\n\n  intercept(req: HttpRequest<any>, next: HttpHandler): Observable<HttpEvent<any>> {\n    const lcUrl = req.url.toLowerCase();\n    // Skip both non-mutating requests and absolute URLs.\n    // Non-mutating requests don't require a token, and absolute URLs require special handling\n    // anyway as the cookie set\n    // on our origin is not the same as the token expected by another origin.\n    if (req.method === 'GET' || req.method === 'HEAD' || lcUrl.startsWith('http://') ||\n        lcUrl.startsWith('https://')) {\n      return next.handle(req);\n    }\n    const token = this.tokenService.getToken();\n\n    // Be careful not to overwrite an existing header of the same name.\n    if (token !== null && !req.headers.has(this.headerName)) {\n      req = req.clone({headers: req.headers.set(this.headerName, token)});\n    }\n    return next.handle(req);\n  }\n}\n","/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {Injectable, Injector, ModuleWithProviders, NgModule} from '@angular/core';\nimport {Observable} from 'rxjs';\n\nimport {HttpBackend, HttpHandler} from './backend';\nimport {HttpClient} from './client';\nimport {HTTP_INTERCEPTORS, HttpInterceptor, HttpInterceptorHandler, NoopInterceptor} from './interceptor';\nimport {JsonpCallbackContext, JsonpClientBackend, JsonpInterceptor} from './jsonp';\nimport {HttpRequest} from './request';\nimport {HttpEvent} from './response';\nimport {BrowserXhr, HttpXhrBackend, XhrFactory} from './xhr';\nimport {HttpXsrfCookieExtractor, HttpXsrfInterceptor, HttpXsrfTokenExtractor, XSRF_COOKIE_NAME, XSRF_HEADER_NAME} from './xsrf';\n\n/**\n * An injectable `HttpHandler` that applies multiple interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * The interceptors are loaded lazily from the injector, to allow\n * interceptors to themselves inject classes depending indirectly\n * on `HttpInterceptingHandler` itself.\n * @see `HttpInterceptor`\n */\n@Injectable()\nexport class HttpInterceptingHandler implements HttpHandler {\n  private chain: HttpHandler|null = null;\n\n  constructor(private backend: HttpBackend, private injector: Injector) {}\n\n  handle(req: HttpRequest<any>): Observable<HttpEvent<any>> {\n    if (this.chain === null) {\n      const interceptors = this.injector.get(HTTP_INTERCEPTORS, []);\n      this.chain = interceptors.reduceRight(\n          (next, interceptor) => new HttpInterceptorHandler(next, interceptor), this.backend);\n    }\n    return this.chain.handle(req);\n  }\n}\n\n/**\n * Constructs an `HttpHandler` that applies interceptors\n * to a request before passing it to the given `HttpBackend`.\n *\n * Use as a factory function within `HttpClientModule`.\n *\n *\n */\nexport function interceptingHandler(\n    backend: HttpBackend, interceptors: HttpInterceptor[] | null = []): HttpHandler {\n  if (!interceptors) {\n    return backend;\n  }\n  return interceptors.reduceRight(\n      (next, interceptor) => new HttpInterceptorHandler(next, interceptor), backend);\n}\n\n/**\n * Factory function that determines where to store JSONP callbacks.\n *\n * Ordinarily JSONP callbacks are stored on the `window` object, but this may not exist\n * in test environments. In that case, callbacks are stored on an anonymous object instead.\n *\n *\n */\nexport function jsonpCallbackContext(): Object {\n  if (typeof window === 'object') {\n    return window;\n  }\n  return {};\n}\n\n/**\n * Configures XSRF protection support for outgoing requests.\n *\n * For a server that supports a cookie-based XSRF protection system,\n * use directly to configure XSRF protection with the correct\n * cookie and header names.\n *\n * If no names are supplied, the default cookie name is `XSRF-TOKEN`\n * and the default header name is `X-XSRF-TOKEN`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    HttpXsrfInterceptor,\n    {provide: HTTP_INTERCEPTORS, useExisting: HttpXsrfInterceptor, multi: true},\n    {provide: HttpXsrfTokenExtractor, useClass: HttpXsrfCookieExtractor},\n    {provide: XSRF_COOKIE_NAME, useValue: 'XSRF-TOKEN'},\n    {provide: XSRF_HEADER_NAME, useValue: 'X-XSRF-TOKEN'},\n  ],\n})\nexport class HttpClientXsrfModule {\n  /**\n   * Disable the default XSRF protection.\n   */\n  static disable(): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        {provide: HttpXsrfInterceptor, useClass: NoopInterceptor},\n      ],\n    };\n  }\n\n  /**\n   * Configure XSRF protection.\n   * @param options An object that can specify either or both\n   * cookie name or header name.\n   * - Cookie name default is `XSRF-TOKEN`.\n   * - Header name default is `X-XSRF-TOKEN`.\n   *\n   */\n  static withOptions(options: {\n    cookieName?: string,\n    headerName?: string,\n  } = {}): ModuleWithProviders<HttpClientXsrfModule> {\n    return {\n      ngModule: HttpClientXsrfModule,\n      providers: [\n        options.cookieName ? {provide: XSRF_COOKIE_NAME, useValue: options.cookieName} : [],\n        options.headerName ? {provide: XSRF_HEADER_NAME, useValue: options.headerName} : [],\n      ],\n    };\n  }\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for XSRF. Automatically imported by `HttpClientModule`.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  /**\n   * Optional configuration for XSRF protection.\n   */\n  imports: [\n    HttpClientXsrfModule.withOptions({\n      cookieName: 'XSRF-TOKEN',\n      headerName: 'X-XSRF-TOKEN',\n    }),\n  ],\n  /**\n   * Configures the [dependency injector](guide/glossary#injector) where it is imported\n   * with supporting services for HTTP communications.\n   */\n  providers: [\n    HttpClient,\n    {provide: HttpHandler, useClass: HttpInterceptingHandler},\n    HttpXhrBackend,\n    {provide: HttpBackend, useExisting: HttpXhrBackend},\n    BrowserXhr,\n    {provide: XhrFactory, useExisting: BrowserXhr},\n  ],\n})\nexport class HttpClientModule {\n}\n\n/**\n * Configures the [dependency injector](guide/glossary#injector) for `HttpClient`\n * with supporting services for JSONP.\n * Without this module, Jsonp requests reach the backend\n * with method JSONP, where they are rejected.\n *\n * You can add interceptors to the chain behind `HttpClient` by binding them to the\n * multiprovider for built-in [DI token](guide/glossary#di-token) `HTTP_INTERCEPTORS`.\n *\n * @publicApi\n */\n@NgModule({\n  providers: [\n    JsonpClientBackend,\n    {provide: JsonpCallbackContext, useFactory: jsonpCallbackContext},\n    {provide: HTTP_INTERCEPTORS, useClass: JsonpInterceptor, multi: true},\n  ],\n})\nexport class HttpClientJsonpModule {\n}\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './index';\n\nexport {NoopInterceptor as Éµangular_packages_common_http_http_a} from './src/interceptor';\nexport {JsonpCallbackContext as Éµangular_packages_common_http_http_b} from './src/jsonp';\nexport {jsonpCallbackContext as Éµangular_packages_common_http_http_c} from './src/module';\nexport {BrowserXhr as Éµangular_packages_common_http_http_d} from './src/xhr';\nexport {HttpXsrfCookieExtractor as Éµangular_packages_common_http_http_g,HttpXsrfInterceptor as Éµangular_packages_common_http_http_h,XSRF_COOKIE_NAME as Éµangular_packages_common_http_http_e,XSRF_HEADER_NAME as Éµangular_packages_common_http_http_f} from './src/xsrf';","exports.remove = removeDiacritics;\n\nvar replacementList = [\n  {\n    base: ' ',\n    chars: \"\\u00A0\",\n  }, {\n    base: '0',\n    chars: \"\\u07C0\",\n  }, {\n    base: 'A',\n    chars: \"\\u24B6\\uFF21\\u00C0\\u00C1\\u00C2\\u1EA6\\u1EA4\\u1EAA\\u1EA8\\u00C3\\u0100\\u0102\\u1EB0\\u1EAE\\u1EB4\\u1EB2\\u0226\\u01E0\\u00C4\\u01DE\\u1EA2\\u00C5\\u01FA\\u01CD\\u0200\\u0202\\u1EA0\\u1EAC\\u1EB6\\u1E00\\u0104\\u023A\\u2C6F\",\n  }, {\n    base: 'AA',\n    chars: \"\\uA732\",\n  }, {\n    base: 'AE',\n    chars: \"\\u00C6\\u01FC\\u01E2\",\n  }, {\n    base: 'AO',\n    chars: \"\\uA734\",\n  }, {\n    base: 'AU',\n    chars: \"\\uA736\",\n  }, {\n    base: 'AV',\n    chars: \"\\uA738\\uA73A\",\n  }, {\n    base: 'AY',\n    chars: \"\\uA73C\",\n  }, {\n    base: 'B',\n    chars: \"\\u24B7\\uFF22\\u1E02\\u1E04\\u1E06\\u0243\\u0181\",\n  }, {\n    base: 'C',\n    chars: \"\\u24b8\\uff23\\uA73E\\u1E08\\u0106\\u0043\\u0108\\u010A\\u010C\\u00C7\\u0187\\u023B\",\n  }, {\n    base: 'D',\n    chars: \"\\u24B9\\uFF24\\u1E0A\\u010E\\u1E0C\\u1E10\\u1E12\\u1E0E\\u0110\\u018A\\u0189\\u1D05\\uA779\",\n  }, {\n    base: 'Dh',\n    chars: \"\\u00D0\",\n  }, {\n    base: 'DZ',\n    chars: \"\\u01F1\\u01C4\",\n  }, {\n    base: 'Dz',\n    chars: \"\\u01F2\\u01C5\",\n  }, {\n    base: 'E',\n    chars: \"\\u025B\\u24BA\\uFF25\\u00C8\\u00C9\\u00CA\\u1EC0\\u1EBE\\u1EC4\\u1EC2\\u1EBC\\u0112\\u1E14\\u1E16\\u0114\\u0116\\u00CB\\u1EBA\\u011A\\u0204\\u0206\\u1EB8\\u1EC6\\u0228\\u1E1C\\u0118\\u1E18\\u1E1A\\u0190\\u018E\\u1D07\",\n  }, {\n    base: 'F',\n    chars: \"\\uA77C\\u24BB\\uFF26\\u1E1E\\u0191\\uA77B\",\n  }, {\n    base: 'G',\n    chars: \"\\u24BC\\uFF27\\u01F4\\u011C\\u1E20\\u011E\\u0120\\u01E6\\u0122\\u01E4\\u0193\\uA7A0\\uA77D\\uA77E\\u0262\",\n  }, {\n    base: 'H',\n    chars: \"\\u24BD\\uFF28\\u0124\\u1E22\\u1E26\\u021E\\u1E24\\u1E28\\u1E2A\\u0126\\u2C67\\u2C75\\uA78D\",\n  }, {\n    base: 'I',\n    chars: \"\\u24BE\\uFF29\\xCC\\xCD\\xCE\\u0128\\u012A\\u012C\\u0130\\xCF\\u1E2E\\u1EC8\\u01CF\\u0208\\u020A\\u1ECA\\u012E\\u1E2C\\u0197\",\n  }, {\n    base: 'J',\n    chars: \"\\u24BF\\uFF2A\\u0134\\u0248\\u0237\",\n  }, {\n    base: 'K',\n    chars: \"\\u24C0\\uFF2B\\u1E30\\u01E8\\u1E32\\u0136\\u1E34\\u0198\\u2C69\\uA740\\uA742\\uA744\\uA7A2\",\n  }, {\n    base: 'L',\n    chars: \"\\u24C1\\uFF2C\\u013F\\u0139\\u013D\\u1E36\\u1E38\\u013B\\u1E3C\\u1E3A\\u0141\\u023D\\u2C62\\u2C60\\uA748\\uA746\\uA780\",\n  }, {\n    base: 'LJ',\n    chars: \"\\u01C7\",\n  }, {\n    base: 'Lj',\n    chars: \"\\u01C8\",\n  }, {\n    base: 'M',\n    chars: \"\\u24C2\\uFF2D\\u1E3E\\u1E40\\u1E42\\u2C6E\\u019C\\u03FB\",\n  }, {\n    base: 'N',\n    chars: \"\\uA7A4\\u0220\\u24C3\\uFF2E\\u01F8\\u0143\\xD1\\u1E44\\u0147\\u1E46\\u0145\\u1E4A\\u1E48\\u019D\\uA790\\u1D0E\",\n  }, {\n    base: 'NJ',\n    chars: \"\\u01CA\",\n  }, {\n    base: 'Nj',\n    chars: \"\\u01CB\",\n  }, {\n    base: 'O',\n    chars: \"\\u24C4\\uFF2F\\xD2\\xD3\\xD4\\u1ED2\\u1ED0\\u1ED6\\u1ED4\\xD5\\u1E4C\\u022C\\u1E4E\\u014C\\u1E50\\u1E52\\u014E\\u022E\\u0230\\xD6\\u022A\\u1ECE\\u0150\\u01D1\\u020C\\u020E\\u01A0\\u1EDC\\u1EDA\\u1EE0\\u1EDE\\u1EE2\\u1ECC\\u1ED8\\u01EA\\u01EC\\xD8\\u01FE\\u0186\\u019F\\uA74A\\uA74C\",\n  }, {\n    base: 'OE',\n    chars: \"\\u0152\",\n  }, {\n    base: 'OI',\n    chars: \"\\u01A2\",\n  }, {\n    base: 'OO',\n    chars: \"\\uA74E\",\n  }, {\n    base: 'OU',\n    chars: \"\\u0222\",\n  }, {\n    base: 'P',\n    chars: \"\\u24C5\\uFF30\\u1E54\\u1E56\\u01A4\\u2C63\\uA750\\uA752\\uA754\",\n  }, {\n    base: 'Q',\n    chars: \"\\u24C6\\uFF31\\uA756\\uA758\\u024A\",\n  }, {\n    base: 'R',\n    chars: \"\\u24C7\\uFF32\\u0154\\u1E58\\u0158\\u0210\\u0212\\u1E5A\\u1E5C\\u0156\\u1E5E\\u024C\\u2C64\\uA75A\\uA7A6\\uA782\",\n  }, {\n    base: 'S',\n    chars: \"\\u24C8\\uFF33\\u1E9E\\u015A\\u1E64\\u015C\\u1E60\\u0160\\u1E66\\u1E62\\u1E68\\u0218\\u015E\\u2C7E\\uA7A8\\uA784\",\n  }, {\n    base: 'T',\n    chars: \"\\u24C9\\uFF34\\u1E6A\\u0164\\u1E6C\\u021A\\u0162\\u1E70\\u1E6E\\u0166\\u01AC\\u01AE\\u023E\\uA786\",\n  }, {\n    base: 'Th',\n    chars: \"\\u00DE\",\n  }, {\n    base: 'TZ',\n    chars: \"\\uA728\",\n  }, {\n    base: 'U',\n    chars: \"\\u24CA\\uFF35\\xD9\\xDA\\xDB\\u0168\\u1E78\\u016A\\u1E7A\\u016C\\xDC\\u01DB\\u01D7\\u01D5\\u01D9\\u1EE6\\u016E\\u0170\\u01D3\\u0214\\u0216\\u01AF\\u1EEA\\u1EE8\\u1EEE\\u1EEC\\u1EF0\\u1EE4\\u1E72\\u0172\\u1E76\\u1E74\\u0244\",\n  }, {\n    base: 'V',\n    chars: \"\\u24CB\\uFF36\\u1E7C\\u1E7E\\u01B2\\uA75E\\u0245\",\n  }, {\n    base: 'VY',\n    chars: \"\\uA760\",\n  }, {\n    base: 'W',\n    chars: \"\\u24CC\\uFF37\\u1E80\\u1E82\\u0174\\u1E86\\u1E84\\u1E88\\u2C72\",\n  }, {\n    base: 'X',\n    chars: \"\\u24CD\\uFF38\\u1E8A\\u1E8C\",\n  }, {\n    base: 'Y',\n    chars: \"\\u24CE\\uFF39\\u1EF2\\xDD\\u0176\\u1EF8\\u0232\\u1E8E\\u0178\\u1EF6\\u1EF4\\u01B3\\u024E\\u1EFE\",\n  }, {\n    base: 'Z',\n    chars: \"\\u24CF\\uFF3A\\u0179\\u1E90\\u017B\\u017D\\u1E92\\u1E94\\u01B5\\u0224\\u2C7F\\u2C6B\\uA762\",\n  }, {\n    base: 'a',\n    chars: \"\\u24D0\\uFF41\\u1E9A\\u00E0\\u00E1\\u00E2\\u1EA7\\u1EA5\\u1EAB\\u1EA9\\u00E3\\u0101\\u0103\\u1EB1\\u1EAF\\u1EB5\\u1EB3\\u0227\\u01E1\\u00E4\\u01DF\\u1EA3\\u00E5\\u01FB\\u01CE\\u0201\\u0203\\u1EA1\\u1EAD\\u1EB7\\u1E01\\u0105\\u2C65\\u0250\\u0251\",\n  }, {\n    base: 'aa',\n    chars: \"\\uA733\",\n  }, {\n    base: 'ae',\n    chars: \"\\u00E6\\u01FD\\u01E3\",\n  }, {\n    base: 'ao',\n    chars: \"\\uA735\",\n  }, {\n    base: 'au',\n    chars: \"\\uA737\",\n  }, {\n    base: 'av',\n    chars: \"\\uA739\\uA73B\",\n  }, {\n    base: 'ay',\n    chars: \"\\uA73D\",\n  }, {\n    base: 'b',\n    chars: \"\\u24D1\\uFF42\\u1E03\\u1E05\\u1E07\\u0180\\u0183\\u0253\\u0182\",\n  }, {\n    base: 'c',\n    chars: \"\\uFF43\\u24D2\\u0107\\u0109\\u010B\\u010D\\u00E7\\u1E09\\u0188\\u023C\\uA73F\\u2184\",\n  }, {\n    base: 'd',\n    chars: \"\\u24D3\\uFF44\\u1E0B\\u010F\\u1E0D\\u1E11\\u1E13\\u1E0F\\u0111\\u018C\\u0256\\u0257\\u018B\\u13E7\\u0501\\uA7AA\",\n  }, {\n    base: 'dh',\n    chars: \"\\u00F0\",\n  }, {\n    base: 'dz',\n    chars: \"\\u01F3\\u01C6\",\n  }, {\n    base: 'e',\n    chars: \"\\u24D4\\uFF45\\u00E8\\u00E9\\u00EA\\u1EC1\\u1EBF\\u1EC5\\u1EC3\\u1EBD\\u0113\\u1E15\\u1E17\\u0115\\u0117\\u00EB\\u1EBB\\u011B\\u0205\\u0207\\u1EB9\\u1EC7\\u0229\\u1E1D\\u0119\\u1E19\\u1E1B\\u0247\\u01DD\",\n  }, {\n    base: 'f',\n    chars: \"\\u24D5\\uFF46\\u1E1F\\u0192\",\n  }, {\n    base: 'ff',\n    chars: \"\\uFB00\",\n  }, {\n    base: 'fi',\n    chars: \"\\uFB01\",\n  }, {\n    base: 'fl',\n    chars: \"\\uFB02\",\n  }, {\n    base: 'ffi',\n    chars: \"\\uFB03\",\n  }, {\n    base: 'ffl',\n    chars: \"\\uFB04\",\n  }, {\n    base: 'g',\n    chars: \"\\u24D6\\uFF47\\u01F5\\u011D\\u1E21\\u011F\\u0121\\u01E7\\u0123\\u01E5\\u0260\\uA7A1\\uA77F\\u1D79\",\n  }, {\n    base: 'h',\n    chars: \"\\u24D7\\uFF48\\u0125\\u1E23\\u1E27\\u021F\\u1E25\\u1E29\\u1E2B\\u1E96\\u0127\\u2C68\\u2C76\\u0265\",\n  }, {\n    base: 'hv',\n    chars: \"\\u0195\",\n  }, {\n    base: 'i',\n    chars: \"\\u24D8\\uFF49\\xEC\\xED\\xEE\\u0129\\u012B\\u012D\\xEF\\u1E2F\\u1EC9\\u01D0\\u0209\\u020B\\u1ECB\\u012F\\u1E2D\\u0268\\u0131\",\n  }, {\n    base: 'j',\n    chars: \"\\u24D9\\uFF4A\\u0135\\u01F0\\u0249\",\n  }, {\n    base: 'k',\n    chars: \"\\u24DA\\uFF4B\\u1E31\\u01E9\\u1E33\\u0137\\u1E35\\u0199\\u2C6A\\uA741\\uA743\\uA745\\uA7A3\",\n  }, {\n    base: 'l',\n    chars: \"\\u24DB\\uFF4C\\u0140\\u013A\\u013E\\u1E37\\u1E39\\u013C\\u1E3D\\u1E3B\\u017F\\u0142\\u019A\\u026B\\u2C61\\uA749\\uA781\\uA747\\u026D\",\n  }, {\n    base: 'lj',\n    chars: \"\\u01C9\",\n  }, {\n    base: 'm',\n    chars: \"\\u24DC\\uFF4D\\u1E3F\\u1E41\\u1E43\\u0271\\u026F\",\n  }, {\n    base: 'n',\n    chars: \"\\u24DD\\uFF4E\\u01F9\\u0144\\xF1\\u1E45\\u0148\\u1E47\\u0146\\u1E4B\\u1E49\\u019E\\u0272\\u0149\\uA791\\uA7A5\\u043B\\u0509\",\n  }, {\n    base: 'nj',\n    chars: \"\\u01CC\",\n  }, {\n    base: 'o',\n    chars: \"\\u24DE\\uFF4F\\xF2\\xF3\\xF4\\u1ED3\\u1ED1\\u1ED7\\u1ED5\\xF5\\u1E4D\\u022D\\u1E4F\\u014D\\u1E51\\u1E53\\u014F\\u022F\\u0231\\xF6\\u022B\\u1ECF\\u0151\\u01D2\\u020D\\u020F\\u01A1\\u1EDD\\u1EDB\\u1EE1\\u1EDF\\u1EE3\\u1ECD\\u1ED9\\u01EB\\u01ED\\xF8\\u01FF\\uA74B\\uA74D\\u0275\\u0254\\u1D11\",\n  }, {\n    base: 'oe',\n    chars: \"\\u0153\",\n  }, {\n    base: 'oi',\n    chars: \"\\u01A3\",\n  }, {\n    base: 'oo',\n    chars: \"\\uA74F\",\n  }, {\n    base: 'ou',\n    chars: \"\\u0223\",\n  }, {\n    base: 'p',\n    chars: \"\\u24DF\\uFF50\\u1E55\\u1E57\\u01A5\\u1D7D\\uA751\\uA753\\uA755\\u03C1\",\n  }, {\n    base: 'q',\n    chars: \"\\u24E0\\uFF51\\u024B\\uA757\\uA759\",\n  }, {\n    base: 'r',\n    chars: \"\\u24E1\\uFF52\\u0155\\u1E59\\u0159\\u0211\\u0213\\u1E5B\\u1E5D\\u0157\\u1E5F\\u024D\\u027D\\uA75B\\uA7A7\\uA783\",\n  }, {\n    base: 's',\n    chars: \"\\u24E2\\uFF53\\u015B\\u1E65\\u015D\\u1E61\\u0161\\u1E67\\u1E63\\u1E69\\u0219\\u015F\\u023F\\uA7A9\\uA785\\u1E9B\\u0282\",\n  }, {\n    base: 'ss',\n    chars: \"\\xDF\",\n  }, {\n    base: 't',\n    chars: \"\\u24E3\\uFF54\\u1E6B\\u1E97\\u0165\\u1E6D\\u021B\\u0163\\u1E71\\u1E6F\\u0167\\u01AD\\u0288\\u2C66\\uA787\",\n  }, {\n    base: 'th',\n    chars: \"\\u00FE\",\n  }, {\n    base: 'tz',\n    chars: \"\\uA729\",\n  }, {\n    base: 'u',\n    chars: \"\\u24E4\\uFF55\\xF9\\xFA\\xFB\\u0169\\u1E79\\u016B\\u1E7B\\u016D\\xFC\\u01DC\\u01D8\\u01D6\\u01DA\\u1EE7\\u016F\\u0171\\u01D4\\u0215\\u0217\\u01B0\\u1EEB\\u1EE9\\u1EEF\\u1EED\\u1EF1\\u1EE5\\u1E73\\u0173\\u1E77\\u1E75\\u0289\",\n  }, {\n    base: 'v',\n    chars: \"\\u24E5\\uFF56\\u1E7D\\u1E7F\\u028B\\uA75F\\u028C\",\n  }, {\n    base: 'vy',\n    chars: \"\\uA761\",\n  }, {\n    base: 'w',\n    chars: \"\\u24E6\\uFF57\\u1E81\\u1E83\\u0175\\u1E87\\u1E85\\u1E98\\u1E89\\u2C73\",\n  }, {\n    base: 'x',\n    chars: \"\\u24E7\\uFF58\\u1E8B\\u1E8D\",\n  }, {\n    base: 'y',\n    chars: \"\\u24E8\\uFF59\\u1EF3\\xFD\\u0177\\u1EF9\\u0233\\u1E8F\\xFF\\u1EF7\\u1E99\\u1EF5\\u01B4\\u024F\\u1EFF\",\n  }, {\n    base: 'z',\n    chars: \"\\u24E9\\uFF5A\\u017A\\u1E91\\u017C\\u017E\\u1E93\\u1E95\\u01B6\\u0225\\u0240\\u2C6C\\uA763\",\n  }\n];\n\nvar diacriticsMap = {};\nfor (var i = 0; i < replacementList.length; i += 1) {\n  var chars = replacementList[i].chars;\n  for (var j = 0; j < chars.length; j += 1) {\n    diacriticsMap[chars[j]] = replacementList[i].base;\n  }\n}\n\nfunction removeDiacritics(str) {\n  return str.replace(/[^\\u0000-\\u007e]/g, function(c) {\n    return diacriticsMap[c] || c;\n  });\n}\n\nexports.replacementList = replacementList;\nexports.diacriticsMap = diacriticsMap;\n","var parseXml = require('xml-parse-from-string')\n\nfunction extractSvgPath (svgDoc) {\n  // concat all the <path> elements to form an SVG path string\n  if (typeof svgDoc === 'string') {\n    svgDoc = parseXml(svgDoc)\n  }\n  if (!svgDoc || typeof svgDoc.getElementsByTagName !== 'function') {\n    throw new Error('could not get an XML document from the specified SVG contents')\n  }\n\n  var paths = Array.prototype.slice.call(svgDoc.getElementsByTagName('path'))\n  return paths.reduce(function (prev, path) {\n    var d = path.getAttribute('d') || ''\n    return prev + ' ' + d.replace(/\\s+/g, ' ').trim()\n  }, '').trim()\n}\n\nmodule.exports = function () {\n  throw new Error('use extract-svg-path/transform to inline SVG contents into your bundle')\n}\n\nmodule.exports.parse = extractSvgPath\n\n//deprecated\nmodule.exports.fromString = extractSvgPath\n","/**\r\n * @license geolocation-marker\r\n * @copyright 2012, 2015 Chad Killingsworth\r\n * @see https://github.com/ChadKillingsworth/geolocation-marker/blob/master/LICENSE.txt\r\n */\r\n\r\n/**\r\n * @name GeolocationMarker for Google Maps v3\r\n * @version version 1.1\r\n * @author Chad Killingsworth [chadkillingsworth at gmail.com]\r\n * Copyright 2012\r\n * @fileoverview\r\n * This library uses geolocation to add a marker and accuracy circle to a map.\r\n * The marker position is automatically updated as the user position changes.\r\n */\r\n\r\n'use strict';\r\n\r\nclass GeolocationMarker extends google.maps.MVCObject {\r\n  /**\r\n  * @param {google.maps.Map=} opt_map\r\n  * @param {(google.maps.MarkerOptions|Object.<string>)=} opt_outerMarkerOpts\r\n  * @param {(google.maps.MarkerOptions|Object.<string>)=} opt_markerOpts\r\n  * @param {(google.maps.CircleOptions|Object.<string>)=} opt_circleOpts\r\n  */\r\n  constructor(opt_map, opt_outerMarkerOpts, opt_markerOpts, opt_circleOpts) {\r\n     super();\r\n\r\n     /**\r\n      * @private\r\n      * @type {google.maps.Marker}\r\n      */\r\n     this.outerMarker_ = null;\r\n\r\n     /**\r\n      * @private\r\n      * @type {google.maps.Marker}\r\n      */\r\n     this.marker_ = null;\r\n\r\n     /**\r\n      * @private\r\n      * @type {google.maps.Circle}\r\n      */\r\n     this.circle_ = null;\r\n\r\n     /**\r\n      * @private\r\n      * @type {number}\r\n      */\r\n     this.watchId_ = -1;\r\n\r\n     var outerMarkerOpts = {\r\n       'clickable': false,\r\n       'cursor': 'pointer',\r\n       'draggable': false,\r\n       'flat': true,\r\n       'icon': {\r\n           'path': google.maps.SymbolPath.CIRCLE,\r\n           'fillColor': '#C8D6EC',\r\n           'fillOpacity': 0.7,\r\n           'scale': 12,\r\n           'strokeWeight': 0,\r\n       },\r\n       'position': new google.maps.LatLng(0, 0),\r\n       'title': 'Current location',\r\n       'zIndex': 2\r\n     };\r\n\r\n     var markerOpts = {\r\n       'clickable': false,\r\n       'cursor': 'pointer',\r\n       'draggable': false,\r\n       'flat': true,\r\n       'icon': {\r\n           'path': google.maps.SymbolPath.CIRCLE,\r\n           'fillColor': '#4285F4',\r\n           'fillOpacity': 1,\r\n           'scale': 6,\r\n           'strokeColor': 'white',\r\n           'strokeWeight': 2,\r\n       },\r\n       // This marker may move frequently - don't force canvas tile redraw\r\n       'optimized': false,\r\n       'position': new google.maps.LatLng(0, 0),\r\n       'title': 'Current location',\r\n       'zIndex': 3\r\n     };\r\n\r\n     if(opt_outerMarkerOpts) {\r\n       outerMarkerOpts = this.copyOptions_(outerMarkerOpts, opt_outerMarkerOpts);\r\n     }\r\n\r\n     if(opt_markerOpts) {\r\n       markerOpts = this.copyOptions_(markerOpts, opt_markerOpts);\r\n     }\r\n\r\n     var circleOpts = {\r\n       'clickable': false,\r\n       'radius': 0,\r\n       'strokeColor': '1bb6ff',\r\n       'strokeOpacity': .4,\r\n       'fillColor': '61a0bf',\r\n       'fillOpacity': .4,\r\n       'strokeWeight': 1,\r\n       'zIndex': 1\r\n     };\r\n\r\n     if(opt_circleOpts) {\r\n       circleOpts = this.copyOptions_(circleOpts, opt_circleOpts);\r\n     }\r\n\r\n     this.outerMarker_ = new google.maps.Marker(outerMarkerOpts);\r\n     this.marker_ = new google.maps.Marker(markerOpts);\r\n     this.circle_ = new google.maps.Circle(circleOpts);\r\n\r\n     google.maps.MVCObject.prototype.set.call(this, 'accuracy', null);\r\n     google.maps.MVCObject.prototype.set.call(this, 'position', null);\r\n     google.maps.MVCObject.prototype.set.call(this, 'map', null);\r\n\r\n     this.set('minimum_accuracy', null);\r\n\r\n     this.set('position_options', /** GeolocationPositionOptions */\r\n         ({enableHighAccuracy: true, maximumAge: 1000}));\r\n\r\n     this.circle_.bindTo('map', this.outerMarker_);\r\n     this.circle_.bindTo('map', this.marker_);\r\n\r\n     if(opt_map) {\r\n       this.setMap(opt_map);\r\n     }\r\n  }\r\n\r\n  /**\r\n   * @override\r\n   * @param {string} key\r\n   * @param {*} value\r\n   */\r\n  set(key, value) {\r\n     if (GeolocationMarker.invalidPropertiesExpr_.test(key)) {\r\n       throw '\\'' + key + '\\' is a read-only property.';\r\n     } else if (key === 'map') {\r\n       this.setMap(/** @type {google.maps.Map} */ (value));\r\n     } else {\r\n       google.maps.MVCObject.prototype.set.call(this, key, value);\r\n     }\r\n  }\r\n\r\n  /** @return {google.maps.Map} */\r\n  getMap() {\r\n     return /** @type {google.maps.Map|null} */ (this.get('map'));\r\n  }\r\n\r\n  /** @return {GeolocationPositionOptions} */\r\n  getPositionOptions() {\r\n     return /** @type {GeolocationPositionOptions} */(this.get('position_options'));\r\n  }\r\n\r\n  /** @param {!GeolocationPositionOptions|!Object.<string, *>} positionOpts */\r\n  setPositionOptions(positionOpts) {\r\n     this.set('position_options', positionOpts);\r\n  }\r\n\r\n  /** @return {google.maps.LatLng|null} */\r\n  getPosition() {\r\n     return /** @type {google.maps.LatLng|null} */ (this.get('position'));\r\n  }\r\n\r\n  /** @return {google.maps.LatLngBounds?} */\r\n  getBounds() {\r\n     if (this.get('position')) {\r\n       return this.circle_.getBounds();\r\n     } else {\r\n       return null;\r\n     }\r\n  }\r\n\r\n  /** @return {number|null} */\r\n  getAccuracy() {\r\n     return /** @type {number|null} */ (this.get('accuracy'));\r\n  }\r\n\r\n  /** @return {number|null} */\r\n  getMinimumAccuracy() {\r\n     return /** @type {number|null} */ (this.get('minimum_accuracy'));\r\n  }\r\n\r\n  /** @param {number|null} accuracy */\r\n  setMinimumAccuracy(accuracy) {\r\n     this.set('minimum_accuracy', accuracy);\r\n  }\r\n\r\n  /** @param {google.maps.Map|null} map */\r\n  setMap(map) {\r\n     google.maps.MVCObject.prototype.set.call(this, 'map', map);\r\n     if (map) {\r\n       this.watchPosition_();\r\n     } else {\r\n       this.outerMarker_.unbind('position');\r\n       this.marker_.unbind('position');\r\n       this.circle_.unbind('center');\r\n       this.circle_.unbind('radius');\r\n       google.maps.MVCObject.prototype.set.call(this, 'accuracy', null);\r\n       google.maps.MVCObject.prototype.set.call(this, 'position', null);\r\n       navigator.geolocation.clearWatch(this.watchId_);\r\n       this.watchId_ = -1;\r\n       this.outerMarker_.setMap(map);\r\n       this.marker_.setMap(map);\r\n     }\r\n  }\r\n\r\n  /** @param {google.maps.MarkerOptions|Object.<string>} outerMarkerOpts */\r\n  setOuterMarkerOptions(outerMarkerOpts) {\r\n     this.outerMarker_.setOptions(this.copyOptions_({}, outerMarkerOpts));\r\n  }\r\n\r\n  /** @param {google.maps.MarkerOptions|Object.<string>} markerOpts */\r\n  setMarkerOptions(markerOpts) {\r\n     this.marker_.setOptions(this.copyOptions_({}, markerOpts));\r\n  }\r\n\r\n  /** @param {google.maps.CircleOptions|Object.<string>} circleOpts */\r\n  setCircleOptions(circleOpts) {\r\n     this.circle_.setOptions(this.copyOptions_({}, circleOpts));\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {GeolocationPosition} position\r\n   */\r\n  updatePosition_(position) {\r\n     var newPosition = new google.maps.LatLng(position.coords.latitude,\r\n         position.coords.longitude), mapNotSet = this.marker_.getMap() == null;\r\n\r\n     if (mapNotSet) {\r\n       if (this.getMinimumAccuracy() != null &&\r\n           position.coords.accuracy > this.getMinimumAccuracy()) {\r\n         return;\r\n       }\r\n       this.outerMarker_.setMap(this.getMap());\r\n       this.marker_.setMap(this.getMap());\r\n       this.outerMarker_.bindTo('position', this);\r\n       this.marker_.bindTo('position', this);\r\n       this.circle_.bindTo('center', this, 'position');\r\n       this.circle_.bindTo('radius', this, 'accuracy');\r\n     }\r\n\r\n     if (this.getAccuracy() != position.coords.accuracy) {\r\n       // The local set method does not allow accuracy to be updated\r\n       google.maps.MVCObject.prototype.set.call(this, 'accuracy',\r\n           position.coords.accuracy);\r\n     }\r\n\r\n     if (mapNotSet || this.getPosition() == null ||\r\n         !this.getPosition().equals(newPosition)) {\r\n       // The local set method does not allow position to be updated\r\n       google.maps.MVCObject.prototype.set.call(this, 'position', newPosition);\r\n     }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   */\r\n  watchPosition_() {\r\n     if (navigator.geolocation) {\r\n       this.watchId_ = navigator.geolocation.watchPosition(\r\n           this.updatePosition_.bind(this),\r\n           this.geolocationError_.bind(this),\r\n           this.getPositionOptions());\r\n     }\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {GeolocationPositionError} data\r\n   */\r\n  geolocationError_(data) {\r\n     google.maps.event.trigger(this, 'geolocation_error', data);\r\n  }\r\n\r\n  /**\r\n   * @private\r\n   * @param {Object.<string,*>} target\r\n   * @param {Object.<string,*>} source\r\n   * @return {Object.<string,*>}\r\n   */\r\n  copyOptions_(target, source) {\r\n     for (var opt in source) {\r\n       if (GeolocationMarker.DISALLOWED_OPTIONS[opt] !== true) {\r\n         target[opt] = source[opt];\r\n       }\r\n     }\r\n     return target;\r\n  }\r\n}\r\n\r\n/**\r\n * @const\r\n * @type {Object.<string, boolean>}\r\n */\r\nGeolocationMarker.DISALLOWED_OPTIONS = {\r\n    'map': true,\r\n    'position': true,\r\n    'radius': true\r\n};\r\n\r\n/**\r\n * @private\r\n * @const\r\n */\r\nGeolocationMarker.invalidPropertiesExpr_ = /^(?:position|accuracy)$/i;\r\n\r\nexport default GeolocationMarker;\r\n",null,"/*\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *       http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n\r\n/**\r\n * @name GeolocationMarker for Google Maps v3\r\n * @version version 1.1\r\n * @author Chad Killingsworth [chadkillingsworth at gmail.com]\r\n * Copyright 2012\r\n * @fileoverview\r\n * Exports for compiling the GeolocationMarker library with Closure-compiler\r\n * for use in external code. When compiling the library with other user\r\n * scripts, these exports are not needed.\r\n */\r\n\r\nimport GeolocationMarker from './geolocation-marker.js';\r\n\r\n;(function(root, factory) {\r\n   if (typeof root['define'] === 'function' && root['define']['amd']) {\r\n     root['define']([], factory);\r\n   } else if (typeof root['exports'] === 'object') {\r\n     root['module']['exports'] = factory();\r\n   } else {\r\n     root['GeolocationMarker'] = factory();\r\n   }\r\n }(window, function() {\r\n  GeolocationMarker.prototype['getAccuracy'] = GeolocationMarker.prototype.getAccuracy;\r\n  GeolocationMarker.prototype['getBounds'] = GeolocationMarker.prototype.getBounds;\r\n  GeolocationMarker.prototype['getMap'] = GeolocationMarker.prototype.getMap;\r\n  GeolocationMarker.prototype['getMinimumAccuracy'] = GeolocationMarker.prototype.getMinimumAccuracy;\r\n  GeolocationMarker.prototype['getPosition'] = GeolocationMarker.prototype.getPosition;\r\n  GeolocationMarker.prototype['getPositionOptions'] = GeolocationMarker.prototype.getPositionOptions;\r\n  GeolocationMarker.prototype['setCircleOptions'] = GeolocationMarker.prototype.setCircleOptions;\r\n  GeolocationMarker.prototype['setMap'] = GeolocationMarker.prototype.setMap;\r\n  GeolocationMarker.prototype['setMarkerOptions'] = GeolocationMarker.prototype.setMarkerOptions;\r\n  GeolocationMarker.prototype['setMinimumAccuracy'] = GeolocationMarker.prototype.setMinimumAccuracy;\r\n  GeolocationMarker.prototype['setPositionOptions'] = GeolocationMarker.prototype.setPositionOptions;\r\n\r\n  return GeolocationMarker;\r\n}));\r\n","var win;\n\nif (typeof window !== \"undefined\") {\n    win = window;\n} else if (typeof global !== \"undefined\") {\n    win = global;\n} else if (typeof self !== \"undefined\"){\n    win = self;\n} else {\n    win = {};\n}\n\nmodule.exports = win;\n","\"use strict\";\n\nvar codes = require(\"./codes.json\");\nvar removeDiacritics = require('diacritics').remove;\nvar registeredLocales = {};\n\n/*\n * All codes map to ISO 3166-1 alpha-2\n */\nvar alpha2 = {},\n  alpha3 = {},\n  numeric = {},\n  invertedNumeric = {};\n\ncodes.forEach(function(codeInformation) {\n  var s = codeInformation;\n  alpha2[s[0]] = s[1];\n  alpha3[s[1]] = s[0];\n  numeric[s[2]] = s[0];\n  invertedNumeric[s[0]] = s[2];\n});\n\nfunction formatNumericCode(code) {\n  return String('000'+(code ? code : '')).slice(-3);\n}\n\nfunction registerLocale(localeData) {\n  if (!localeData.locale) {\n    throw new TypeError('Missing localeData.locale');\n  }\n\n  if (!localeData.countries) {\n    throw new TypeError('Missing localeData.countries');\n  }\n\n  registeredLocales[localeData.locale] = localeData.countries;\n}\n\nexports.registerLocale = registerLocale;\n\n/*\n * @param code Alpha-3 code\n * @return Alpha-2 code or undefined\n */\nfunction alpha3ToAlpha2(code) {\n  return alpha3[code];\n}\nexports.alpha3ToAlpha2 = alpha3ToAlpha2;\n\n/*\n * @param code Alpha-2 code\n * @return Alpha-3 code or undefined\n */\nfunction alpha2ToAlpha3(code) {\n  return alpha2[code];\n}\nexports.alpha2ToAlpha3 = alpha2ToAlpha3;\n\n/*\n * @param code Alpha-3 code\n * @return Numeric code or undefined\n */\nfunction alpha3ToNumeric(code) {\n  return invertedNumeric[alpha3ToAlpha2(code)];\n}\nexports.alpha3ToNumeric = alpha3ToNumeric;\n\n/*\n * @param code Alpha-2 code\n * @return Numeric code or undefined\n */\nfunction alpha2ToNumeric(code) {\n  return invertedNumeric[code];\n}\nexports.alpha2ToNumeric = alpha2ToNumeric;\n\n/*\n * @param code Numeric code\n * @return Alpha-3 code or undefined\n */\nfunction numericToAlpha3(code) {\n  var padded = formatNumericCode(code);\n  return alpha2ToAlpha3(numeric[padded]);\n}\nexports.numericToAlpha3 = numericToAlpha3;\n\n/*\n * @param code Numeric code\n * @return Alpha-2 code or undefined\n */\nfunction numericToAlpha2(code) {\n  var padded = formatNumericCode(code);\n  return numeric[padded];\n}\nexports.numericToAlpha2 = numericToAlpha2;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-3\n */\nfunction toAlpha3(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha3(code);\n    }\n    if(code.length === 2) {\n      return alpha2ToAlpha3(code.toUpperCase());\n    }\n    if (code.length === 3) {\n      return code.toUpperCase();\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha3(code);\n  }\n  return undefined;\n}\nexports.toAlpha3 = toAlpha3;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return ISO 3166-1 alpha-2\n */\nfunction toAlpha2(code) {\n  if (typeof code === \"string\") {\n    if (/^[0-9]*$/.test(code)) {\n      return numericToAlpha2(code);\n    }\n    if (code.length === 2) {\n      return code.toUpperCase();\n    }\n    if(code.length === 3) {\n      return alpha3ToAlpha2(code.toUpperCase());\n    }\n  }\n  if (typeof code === \"number\") {\n    return numericToAlpha2(code);\n  }\n  return undefined;\n}\nexports.toAlpha2 = toAlpha2;\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @param lang language for country name\n * @return name or undefined\n */\nexports.getName = function(code, lang) {\n  try {\n    var d = registeredLocales[lang.toLowerCase()];\n    return d[toAlpha2(code)];\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @param lang language for country names\n * @return Object of country code mapped to county name\n */\nexports.getNames = function(lang) {\n  var d = registeredLocales[lang.toLowerCase()];\n  if (d === undefined) {\n    return {};\n  }\n  return d;\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getAlpha2Code = function(name, lang) {\n  try {\n    var p, codenames = registeredLocales[lang.toLowerCase()];\n    for (p in codenames) {\n      if (codenames.hasOwnProperty(p)) {\n        if (codenames[p].toLowerCase() === name.toLowerCase()) {\n          return p;\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-2 or undefined\n */\nexports.getSimpleAlpha2Code = function(name, lang) {\n  try {\n    var p, codenames = registeredLocales[lang.toLowerCase()];\n    for (p in codenames) {\n      if (codenames.hasOwnProperty(p)) {\n        if (removeDiacritics(codenames[p].toLowerCase()) === removeDiacritics(name.toLowerCase())) {\n          return p;\n        }\n      }\n    }\n    return undefined;\n  } catch (err) {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-2 codes mapped to alpha-3 codes\n */\nexports.getAlpha2Codes = function() {\n  return alpha2;\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getAlpha3Code = function(name, lang) {\n  var alpha2 = this.getAlpha2Code(name, lang);\n  if (alpha2) {\n    return this.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @param name name\n * @param lang language for country name\n * @return ISO 3166-1 alpha-3 or undefined\n */\nexports.getSimpleAlpha3Code = function(name, lang) {\n  var alpha2 = this.getSimpleAlpha2Code(name, lang);\n  if (alpha2) {\n    return this.toAlpha3(alpha2);\n  } else {\n    return undefined;\n  }\n};\n\n/*\n * @return Object of alpha-3 codes mapped to alpha-2 codes\n */\nexports.getAlpha3Codes = function() {\n  return alpha3;\n};\n\n/*\n * @return Object of numeric codes mapped to alpha-2 codes\n */\nexports.getNumericCodes = function() {\n  return numeric;\n};\n\n/*\n * @return Array of supported languages\n */\nexports.langs = function() {\n  return Object.keys(registeredLocales);\n};\n\n/*\n * @param code ISO 3166-1 alpha-2, alpha-3 or numeric code\n * @return Boolean\n */\nexports.isValid = function(code) {\n  if (!code) {\n    return false;\n  }\n\n  var coerced = code.toString().toUpperCase();\n  return alpha3.hasOwnProperty(coerced) || alpha2.hasOwnProperty(coerced) ||\n    numeric.hasOwnProperty(coerced);\n};\n","var xhr = require('xhr');\n\nmodule.exports = function (opts, cb) {\n    if (typeof opts === 'string') opts = { uri: opts };\n    \n    xhr(opts, function (err, res, body) {\n        if (err) return cb(err);\n        if (!/^2/.test(res.statusCode)) {\n            return cb(new Error('http status code: ' + res.statusCode));\n        }\n        var div = document.createElement('div');\n        div.innerHTML = body;\n        var svg = div.querySelector('svg');\n        if (!svg) return cb(new Error('svg not present in resource'));\n        cb(null, svg);\n    });\n};\n","//// <reference types=\"@types/googlemaps\" />\nimport { Injectable, EventEmitter } from '@angular/core';\n\n/**\n * Helper class for handling common GoogleMaps SDK functions\n */\n@Injectable()\nexport class GoogleMapsWrapper {\n\n  protected _infowindows: { [id: string]: google.maps.InfoWindow } = { default: null };\n  protected _map: google.maps.Map;\n  protected markers: google.maps.Marker[] = [];\n  protected polylines: google.maps.Polyline[] = [];\n  protected polygons: google.maps.Polygon[] = [];\n  private _isReady = false;\n  private _ready: Promise<void>;\n  // tslint:disable-next-line: no-any\n  private resolver: { resolve: () => void, reject: (err: any) => void };\n\n  /** If `true` the infowindows will close on clicking on any point on the map */\n  closeInfowindowOnClick = true;\n\n  /** * Emits when the map has been inited by calling `GoogleMapsWrapper.init()` */\n  onReady: EventEmitter<void> = new EventEmitter<void>();\n\n  /** * When the user clicks on the map */\n  click: EventEmitter<google.maps.LatLng> = new EventEmitter<google.maps.LatLng>();\n\n  /** When visible maps change but zooming or dragging the map */\n  boundsChanged: EventEmitter<google.maps.LatLngBounds> = new EventEmitter<google.maps.LatLngBounds>();\n\n  /** The default infowindow object */\n  get infowindow(): google.maps.InfoWindow { return this.getInfowindow('default'); }\n  set infowindow(val: google.maps.InfoWindow) { this._infowindows['default'] = val; }\n\n  constructor() {\n    this._ready = new Promise((resolve, reject) => {\n      this.resolver = { resolve: resolve, reject: reject };\n    });\n  }\n\n  /**\n   * `True` if the map has been inited by calling `GoogleMapsWrapper.init()`\n   */\n  isReady(): boolean { return this._isReady; }\n\n  /**\n   * Resolves when the map has been inited by calling `GoogleMapsWrapper.init()`\n   */\n  ready(): Promise<void> { return this._ready; }\n\n  get map(): google.maps.Map {\n    return this._map;\n  }\n\n  isInfowindowOpen(tag?: string): boolean {\n    return this.getInfowindow(tag)['isOpen'];\n  }\n\n  /**\n   * Call this before using any other function\n   */\n  async initMap(element: HTMLElement, options?: google.maps.MapOptions): Promise<google.maps.Map> {\n    try {\n\n      this._map = new google.maps.Map(element, {\n        center: new google.maps.LatLng(19.53124, -96.91589),\n        zoom: 14,\n        clickableIcons: false,\n        disableDefaultUI: false,\n        zoomControl: true,\n        streetViewControl: false,\n        scaleControl: true,\n        rotateControl: true,\n        fullscreenControl: true,\n        mapTypeControlOptions: {\n          mapTypeIds: [google.maps.MapTypeId.ROADMAP, google.maps.MapTypeId.SATELLITE]\n        },\n        ...options\n      });\n\n      // Add listeners\n      this.map.addListener('click', (e) => {\n        if (this.closeInfowindowOnClick) this.closeInfowindow();\n        this.click.emit(e.latLng);\n      });\n      this.map.addListener('bounds_changed', () => {\n        const bounds = this.map.getBounds();\n        this.boundsChanged.emit(bounds);\n      });\n\n      console.debug('map created ');\n\n      // Wait for SDK to load\n      setTimeout(() => {\n        this._isReady = true;\n        this.resolver.resolve();\n        this.onReady.emit();\n      }, 1000);\n\n      await this._isReady;\n      return this.map;\n    } catch (e) {\n      this.resolver.reject(e);\n    }\n  }\n\n  /**\n\t * Formula taken from:\n\t * [What ratio scales do Google Maps zoom levels correspond to?\n   * ](https://gis.stackexchange.com/questions/7430/what-ratio-scales-do-google-maps-zoom-levels-correspond-to)\n\t */\n  getMetersPerPx(latitude: number) {\n    if (!latitude || !this.map) return 0;\n    const zoom = this.map.getZoom();\n    return 156543.03392 * Math.cos(latitude * Math.PI / 180) / Math.pow(2, zoom);\n  }\n\n  /**\n\t * Subscribe to map event\n\t */\n  // tslint:disable-next-line: no-any\n  subscribe(eventName: string, callback: (event: any) => void) {\n    this.map.addListener(eventName, callback);\n  }\n\n  /**\n\t * Unsubscribe from map event\n\t */\n  unsubscribe(eventName: string) {\n    google.maps.event.clearListeners(this.map, eventName);\n  }\n\n  /**\n\t * Unsubscribe from all map events\n\t */\n  unsubcribeAll() {\n    google.maps.event.clearInstanceListeners(this.map);\n  }\n\n  /**\n\t * Add a marker and show it on the map\n\t */\n  addMarker(params: google.maps.MarkerOptions | google.maps.Marker) {\n    let marker: google.maps.Marker;\n\n    if (!(params instanceof google.maps.Marker)) {\n      params.map = this.map;\n      marker = new google.maps.Marker(params);\n    } else {\n      marker = params;\n      marker.setMap(this.map);\n    }\n    this.markers.push(marker);\n    return marker;\n  }\n\n  addPolyline(params: google.maps.PolylineOptions | google.maps.Polyline) {\n    let line: google.maps.Polyline;\n\n    if (!(params instanceof google.maps.Polyline)) {\n      params.map = this.map;\n      line = new google.maps.Polyline(params);\n    } else {\n      line = params;\n      line.setMap(this.map);\n    }\n\n    this.polylines.push(line);\n    return line;\n  }\n\n  addPolygone(params: google.maps.PolygonOptions | google.maps.Polygon) {\n    let polygon: google.maps.Polygon;\n\n    if (!(params instanceof google.maps.Polygon)) {\n      params.map = this.map;\n      polygon = new google.maps.Polygon(params);\n    } else {\n      polygon = params;\n      polygon.setMap(this.map);\n    }\n\n    this.polygons.push(polygon);\n    return polygon;\n  }\n\n  clearMarkers() {\n    this.markers.forEach(m => {\n      m.setMap(null);\n    });\n    this.markers = [];\n  }\n\n  clearPolylines() {\n    this.polylines.forEach(l => {\n      l.setMap(null);\n    });\n    this.polylines = [];\n  }\n\n  clearPolygones() {\n    this.polygons.forEach(l => {\n      l.setMap(null);\n    });\n    this.polygons = [];\n  }\n\n  /**\n\t * Removes current markers an copies all the markers of an array into the map\n\t */\n  setMarkers(array: google.maps.Marker[]) {\n    this.clearMarkers();\n    array.forEach(m => {\n      m.setMap(this.map);\n    });\n    this.markers = [...array];\n  }\n\n  /**\n   * @param id In case more than one infowindows are required to be shown. If no parameter is passed,\n   * the default infowindow will be opened. If a string is passed, a new infowindow will be created\n   * with that specifier.\n   */\n  openInfowindow(anchor?: google.maps.MVCObject | google.maps.LatLng, content?: string | Node, id?: string) {\n    const infowindow = id ? this.getInfowindow(id) : this.infowindow;\n    if (content) infowindow.setContent(content)\n\n    if (anchor instanceof google.maps.LatLng) {\n      infowindow.setPosition(anchor);\n      infowindow.open(this.map);\n    } else {\n      infowindow.open(this.map, anchor);\n    }\n    infowindow['isOpen'] = true;\n    return infowindow;\n  }\n\n  /**\n   * @param id Unique identifier for an infowindow in case more than one exist\n   */\n  closeInfowindow(id?: string) {\n    const infowindow = id ? this.getInfowindow(id) : this.infowindow;\n    if (infowindow) {\n      infowindow.close();\n      infowindow['isOpen'] = false;\n    }\n  }\n\n  /**\n   * Retrieve a reference to a specific infowindow\n   * @param id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\n   * string is passed, the defoult infowindow will be returned.\n   */\n  getInfowindow(id = 'default') {\n    let infowindow = this._infowindows[id];\n\n    if (!infowindow) {\n      infowindow = new google.maps.InfoWindow({\n        content: '[info]',\n        position: this.map.getCenter()\n      });\n      infowindow['closeclick'] = new EventEmitter<void>();\n      infowindow.addListener('closeclick', () => infowindow['closeclick'].emit());\n      this._infowindows[id] = infowindow;\n    }\n    return infowindow;\n  }\n\n  /**\n   * Destroy a reference to a specific infowindow.\n   * @param id Infowindow uniquer identifier (set by having called `openInfowindow()`). If no\n   * string is passed, the defoult infowindow will be returned.\n   */\n  destroyInfowindow(id: string) {\n    if (!id) return;\n    const infowindow = this._infowindows[id]\n    if (infowindow) {\n      infowindow.close();\n      infowindow.set('map', null);\n      google.maps.event.clearInstanceListeners(infowindow);\n      delete this._infowindows[id];\n    }\n  }\n}\n","//// <reference types=\"@types/googlemaps\" />\nimport { Subject, Subscription, of, timer } from 'rxjs';\nimport { TemplateRef, EventEmitter, ChangeDetectorRef, ViewContainerRef } from '@angular/core';\nimport { tap, switchMap, debounce } from 'rxjs/operators';\nimport { GoogleMapsWrapper } from '../../services/googlemaps-wrapper';\nimport { HttpClient } from '@angular/common/http';\n\nlet API_KEY = '';\nconst INFOWINDOW_ID = 'center-pin';\n\n/**\n * A marker fixed to the center of the map which emits the geo-decoded location\n * as a full address.\n *\n * @see {@link CenterMarker}\n * @emits CenterMarker#locationChanges locationChanges When the pin's location has changed\n * (by zooming or dragging) and the map has become idle again.\n * @emits CenterMarker#addressChanges addressChanges The the geocoded address has resolved.\n *\n * @example\n * <button (click)=\"map.centerPin.enable(infowindowLocation, <yourGMapsApiKey)\">Add center Pin</button>\n * <button (click)=\"map.centerPin.disable()\">Remove Pin</button>\n *\n * <ng-template #infowindowLocation let-address>\n *   <div>\n *     <span *ngIf=\"!address\">Loading...</span>\n *       <div *ngIf=\"!!address\">\n *       {{address}}\n *       <br>\n *       <button (click)=\"map.centerPin.fix = !map.centerPin.fix\">Fix</button>\n *     </div>\n *   </div>\n * </ng-template>\n */\nexport class CenterMarker {\n  /**\n   * The current decoded address obtained from google. It becomes `null` while fetching.\n   */\n  address: string;\n  /**\n   * Emitted when the the geocoded address has resolved.\n   */\n  addressChanges = new EventEmitter<string>();\n  /**\n   * Emitted when the pin's location has changed (by zooming or dragging) and the map has become idle again.\n   */\n  locationChanges = new EventEmitter<google.maps.LatLngLiteral>();\n\n  /** @ignore */\n  private _infowindowTemplate: TemplateRef<any>\n  /** @ignore */\n  private _centerChanged$ = new Subject<google.maps.LatLng>();\n  /** @ignore */\n  private _centerMarker: HTMLDivElement;\n  /** @ignore */\n  private _fixedMarker: google.maps.Marker;\n  /** @ignore */\n  private _mapEventSubscription = new Subscription();\n  /** @ignore */\n  private _geocoder = new google.maps.Geocoder();\n  /** @ignore */\n  private _idleListener: google.maps.MapsEventListener;\n  /** @ignore */\n  private _clickListener: google.maps.MapsEventListener;\n\n\n  constructor(\n    private googlemapsWrapper: GoogleMapsWrapper,\n    private viewContainer: ViewContainerRef,\n    private cdr: ChangeDetectorRef,\n    private http: HttpClient) { }\n\n  /**\n   * Fix the pin to its current position on map instead of floating over it.\n   * This value is reset on calling `disable()`.\n   */\n  get fix(): boolean { return !!this._fixedMarker; }\n  set fix(val: boolean) {\n    if (!this.googlemapsWrapper.isReady()) {\n      console.warn('Map is not ready');\n      return;\n    }\n\n    this.disable();\n    if (val) {\n      this.setFixedMarker();\n    } else {\n      this.enable(this._infowindowTemplate, API_KEY);\n    }\n  }\n\n  /** @ignore */\n  private get REVERSE_GEOCODING_URL() { return `https://maps.googleapis.com/maps/api/geocode/json?key=${API_KEY}&latlng=`; }\n\n  /**\n   * Activates the pin to show at the map's center\n   * @param infowindowTemplate A template for rendering the infowindow on top of the marker.\n   * It must have a single root element. The address string will be passed as implicit context.\n   * @param apiKey GoogleMaps API key. TODO: remove the need for this param in future versions.\n   * \n   * @example\n   * \n   * <button (click)=\"map.centerPin.enable(infowindowLocation, '<yourApiKey>')\">\n   *   Add center Pin\n   * </button>\n   * \n   * <ng-template #infowindowLocation let-address>\n   *   <div style=\"min-height: 20px; min-width: 50px;\">\n   *     {{address}}\n   *   </div>\n   * </ng-template>\n   */\n  enable(infowindowTemplate: TemplateRef<any>, apiKey: string) {\n    this.removeFixedMarker();\n\n    API_KEY = apiKey;\n    this._infowindowTemplate = infowindowTemplate;\n    if (this._centerMarker) return;\n\n    const mapDiv = this.googlemapsWrapper.map.getDiv() as HTMLDivElement;\n    this._centerMarker = document.createElement('div');\n    this._centerMarker.classList.add('centerMarker');\n    this._centerMarker.style.cssText =\n      `position:absolute;\n      background:url(https://maps.gstatic.com/mapfiles/markers/marker.png) no-repeat;\n      top:50%;left:50%;\n      z-index:1;\n      margin-left:-10px;\n      margin-top:-34px;\n      height:34px;\n      width:20px;\n      cursor: pointer;`;\n\n    mapDiv.parentElement.appendChild(this._centerMarker);\n    this._centerMarker.onclick = () => this.displayInfowindowOverPin();\n\n    this._mapEventSubscription = new Subscription();\n    this._mapEventSubscription.add(\n      this._centerChanged$\n        .pipe(\n          tap(() => {\n            this.address = null;\n            this.displayInfowindowOverPin();\n          }),\n          switchMap(latLng => of(latLng)),\n          debounce(() => timer(1000)),\n          switchMap(latLng => this.http.get(`${this.REVERSE_GEOCODING_URL}${latLng.toUrlValue()}`) as any)\n        )\n        // .subscribe((latLng) => {\n        .subscribe(response => {\n          // this._geocoder.geocode({ location: latLng }, (response) => {\n          const results = response[0] || (response as any).results;\n          const firstResult: google.maps.GeocoderResult = results[0] || results;\n          this.address = firstResult && firstResult.formatted_address || 'desconocido';\n          this.addressChanges.emit(this.address);\n          this.displayInfowindowOverPin();\n          this.cdr.detectChanges();\n          // });\n        })\n    );\n\n    this.updateAddress();\n    this._idleListener = this.googlemapsWrapper.map.addListener('idle', () => this.onMapIdle());\n    this._clickListener = this.googlemapsWrapper.map.addListener('click', () => this.googlemapsWrapper.closeInfowindow(INFOWINDOW_ID));\n  }\n\n  /**\n   * Removes the pin from the map\n   */\n  disable() {\n    if (this._centerMarker) this._centerMarker.remove();\n    this._centerMarker = null;\n    this._mapEventSubscription.unsubscribe();\n    this.googlemapsWrapper.closeInfowindow();\n    google.maps.event.removeListener(this._idleListener);\n    google.maps.event.removeListener(this._clickListener);\n    this.removeFixedMarker();\n    this.googlemapsWrapper.closeInfowindow(INFOWINDOW_ID);\n  }\n\n  /** @ignore */\n  displayInfowindowOverPin() {\n    this.viewContainer.clear();\n    const view = this.viewContainer.createEmbeddedView(this._infowindowTemplate, { $implicit: this.address });\n    const content = view.rootNodes[0] as HTMLElement;\n\n    const markerPosition = this.fix ? this._fixedMarker.getPosition() : this.googlemapsWrapper.map.getCenter();\n    const offset = this.googlemapsWrapper.getMetersPerPx(markerPosition.lat()) * 36;\n    const pos = google.maps.geometry.spherical.computeOffset(markerPosition, offset, 0);\n\n    this.googlemapsWrapper\n      .openInfowindow(pos, content, INFOWINDOW_ID)\n      .setOptions({ disableAutoPan: true });\n  }\n\n  /**\n   * Geodecode the current pin's location.\n   */\n  updateAddress() {\n    const markerPosition = this.fix ? this._fixedMarker.getPosition() : this.googlemapsWrapper.map.getCenter();\n    this._centerChanged$.next(markerPosition);\n  }\n\n  /** @ignore */\n  private setFixedMarker() {\n    if (this._fixedMarker) this.removeFixedMarker();\n    this._fixedMarker = new google.maps.Marker({\n      icon: 'https://maps.gstatic.com/mapfiles/markers/marker.png',\n      map: this.googlemapsWrapper.map,\n      position: this.googlemapsWrapper.map.getCenter(),\n    });\n\n    this._fixedMarker.addListener('click', () => this.displayInfowindowOverPin());\n  }\n\n  /** @ignore */\n  private removeFixedMarker() {\n    if (!this._fixedMarker) return;\n    this._fixedMarker.setMap(null);\n    google.maps.event.clearInstanceListeners(this._fixedMarker);\n    this._fixedMarker = null;\n  }\n\n  private onMapIdle() {\n    const center = this.googlemapsWrapper.map.getCenter();\n    this.locationChanges.emit(center.toJSON());\n    this.updateAddress();\n  }\n}\n","import { Component, OnInit, ViewChild, ElementRef, Input, TemplateRef, ViewContainerRef, ChangeDetectorRef } from '@angular/core';\nimport { TrackedObject } from './models/tracked-object';\nimport { GoogleMapsWrapper } from './services/googlemaps-wrapper';\nimport { CenterMarker } from './components/center-marker/center-marker';\nimport { HttpClient } from '@angular/common/http';\n\n/**\n * Creates an embeded google map with polygons representing the tracked objects.\n *\n * @example\n * <gmtv-map [data]=\"objectArray\" [template]=\"infowindow\" [mapOptions]=\"mapOptions\" [showLocationButton]=\"true\">\n *  <ng-template #infowindow let-o>\n *   <div id=\"root\">\n *     <h4>{{o.name}}</h4>\n *   </div>\n *  </ng-template>\n * </gmtv-map>\n */\n@Component({\n  selector: 'gmtv-map',\n  templateUrl: './ngx-googlemaps-tracking-view.component.html',\n  styleUrls: ['./ngx-googlemaps-tracking-view.component.scss'],\n  // encapsulation: ViewEncapsulation.ShadowDom,\n})\nexport class NgxGooglemapsTrackingViewComponent implements OnInit {\n  @ViewChild('map') mapDiv: ElementRef;\n  /**\n   * A marker fixed to the center of the map which emits the geo-decoded location\n   * as a full address.\n   * @see {@link CenterMarker}\n   */\n  centerPin: CenterMarker = new CenterMarker(this.googlemapsWrapper, this.vc, this.cdr, this.http);\n  protected _data: TrackedObject[] = [];\n\n  /**\n   * Options to pass on map initialization.\n   * See {@link https://developers.google.com/maps/documentation/javascript/reference/map#MapOptions MapOptions}\n   */\n  @Input() mapOptions: google.maps.MapOptions;\n\n  /**\n   * Show location button in controls to retrieve user's location.\n   * An https connection is required.\n   */\n  @Input() showLocationButton = true;\n\n  /**\n   * Infowindow's template\n   */\n  // tslint:disable-next-line: no-any\n  @Input() template: TemplateRef<any>;\n\n  /**\n   * Set this to `'hover'` to display the infowindow when hovering on the objects.\n   * Set this to `'click'` to display the infowindow when clicking on the objects.\n   */\n  @Input() triggerInfowindow: 'hover' | 'click' = 'hover';\n\n  /**\n   * Array of {@link TrackedObject} to draw on map\n   */\n  @Input()\n  set data(val: TrackedObject[]) { this._data = val || []; }\n  get data(): TrackedObject[] { return this._data; }\n\n  /**\n   * Currently inited GoogleMaps  {@link https://developers.google.com/maps/documentation/javascript/reference/map#Map Map} object\n   */\n  get map(): google.maps.Map { return this.googlemapsWrapper.map; }\n\n  constructor(\n    protected googlemapsWrapper: GoogleMapsWrapper,\n    protected vc: ViewContainerRef,\n    private http: HttpClient,\n    protected cdr: ChangeDetectorRef) { }\n\n  ngOnInit() {\n    this.googlemapsWrapper.initMap(this.mapDiv.nativeElement, this.mapOptions);\n  }\n\n  /**\n   * Resolves when map has been inited\n   */\n  ready(): Promise<void> {\n    return this.googlemapsWrapper.ready();\n  }\n\n  /** @ignore */\n  trackById(_index: number, item: TrackedObject) {\n    return item.id;\n  }\n}\n","import {\n  Component,\n  Output,\n  EventEmitter,\n  ElementRef,\n  TemplateRef,\n  Input,\n  ViewContainerRef,\n  ViewChild,\n  EmbeddedViewRef,\n  OnDestroy,\n  AfterContentInit\n} from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { GoogleMapsWrapper } from '../../services/googlemaps-wrapper';\n\n@Component({\n  selector: 'gmtv-infowindow',\n  template: `\t<div style=\"display: none;\" #root>\n                <ng-template #defaultTemplate let-o>\n                  <div id=\"rootNode\">\n                    <h3>{{o.name}}</h3>\n                    <p>\n                      <strong>ID:</strong> {{o.id}}<br>\n                      <strong>Position:</strong> {{o.position?.toJSON() | json}}<br>\n                      <strong>Heading:</strong> {{o.heading | number:'1.0-1'}}Â°<br>\n                    </p>\n                  </div>\n                </ng-template>\n                <ng-container #vc></ng-container>\n              </div>`\n})\nexport class InfowindowComponent implements AfterContentInit, OnDestroy {\n  @ViewChild('root') root: ElementRef;\n  // tslint:disable-next-line: no-any\n  @ViewChild('defaultTemplate') defaultTemplateRef: TemplateRef<any>;\n  @ViewChild('vc', { read: ViewContainerRef }) vc: ViewContainerRef;\n  /** When infowindow has closed */\n  @Output() closed = new EventEmitter<void>();\n  /** Triggered on clicking on the X button */\n  @Output() closeclick = new EventEmitter<void>();\n\n  @Input() noPadding = false;\n  @Input() padding = false;\n  /** Unique infowindow identifier */\n  @Input() id: string;\n  @Input() cssClass = '';\n  /** Template for infowindow content */\n  // tslint:disable-next-line: no-any\n  @Input('template') contentTemplateRef: TemplateRef<any>;\n  /** Implicit context for content template */\n  // tslint:disable-next-line: no-any\n  @Input('context') ctx: any;\n  @Input() closeOnMapClick = true;\n\n  content: Node;\n  // tslint:disable-next-line: no-any\n  view: EmbeddedViewRef<any>;\n  subscription = new Subscription();\n\n  constructor(protected googleMaps: GoogleMapsWrapper, protected el: ElementRef) { }\n\n  get nativeInfowindow() {\n    return this.googleMaps.getInfowindow(this.id);\n  }\n\n  get addPadding() {\n    return (this.isMobile && this.noPadding === false) || this.padding !== false;\n  }\n\n  get isMobile() {\n    return window.innerWidth < 768;\n  }\n\n  get isOpen() {\n    return this.googleMaps.isInfowindowOpen(this.id);\n  }\n\n  ngAfterContentInit() {\n    const template = this.contentTemplateRef || this.defaultTemplateRef;\n    this.view = template && template.createEmbeddedView(this.ctx);\n    this.googleMaps.click.subscribe(() => this.onMapClick());\n    this.subscription = this.nativeInfowindow['closeclick'].subscribe(() => this.closeclick.emit());\n  }\n\n  ngOnDestroy() {\n    if (this.id) this.googleMaps.destroyInfowindow(this.id);\n    this.subscription.unsubscribe();\n  }\n\n  getNativeInfowindow(): google.maps.InfoWindow {\n    return this.googleMaps.getInfowindow(this.id);\n  }\n\n  open(anchor: google.maps.MVCObject | google.maps.LatLng) {\n    if (this.vc && this.view && !this.view.destroyed) this.vc.insert(this.view);\n    this.content = this.view && this.view.rootNodes[0];\n    this.googleMaps.openInfowindow(anchor, this.content, this.id);\n  }\n\n  close() {\n    if (this.googleMaps.isInfowindowOpen(this.id)) {\n      this.googleMaps.closeInfowindow(this.id);\n      this.onClosed();\n    }\n  }\n\n  /** @ignore */\n  private onMapClick() {\n    if (this.closeOnMapClick)\n      this.close();\n  }\n\n  /** @ignore */\n  private onClosed() {\n    try {\n      this.vc.remove(0);\n      this.view.destroy();\n      this.vc.clear();\n    } catch (ex) {\n      console.warn(ex);\n    }\n    this.closed.emit();\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { Component, OnDestroy, Input, ViewChild, AfterContentInit, OnChanges, TemplateRef } from '@angular/core';\nimport { Subscription } from 'rxjs';\nimport { InfowindowComponent } from '../infowindow/infowindow.component';\nimport { TrackedObject } from '../../models/tracked-object';\nimport { GoogleMapsWrapper } from '../../services/googlemaps-wrapper';\n\n/** Size in meters to draw each unity speed on map in a dashed line */\nconst SPEED_UNIT_LENGTH_M = 20;\n\n/**\n * Level of detail.\n * Minimal zoom to start drawing objects\n * */\nconst LOD = {\n  speed: 15,\n  scaleTriangle: 15,\n  nameLabels: 0\n}\n\n/**\n * This class renders a trackable object on the map\n *\n * @example\n * // component.ts\n * const objectsToTrack: TrackedObject[] = [{\n *   id: '1',\n *   color: 'blue',\n *   heading: 45,\n *   label: {text: 'Test object #1' },\n *   position: new google.maps.LatLng(19.53124, -96.91589),\n * }]\n *\n * // component.html\n * <gmtv-map [data]=\"objectsToTrack\"></gmtv-map>\n */\n@Component({\n  selector: 'gmtv-tracked-object',\n  templateUrl: './tracked-object.component.html',\n})\nexport class TrackedObjectComponent implements AfterContentInit, OnChanges, OnDestroy {\n  vectorLine: google.maps.Polyline;\n  dotMarker = new google.maps.Marker({ position: { lat: NaN, lng: NaN } });\n  hoverDotListeners: google.maps.MapsEventListener[] = [];\n  hoverPolygonListeners: google.maps.MapsEventListener[] = [];\n  zoomListener: google.maps.MapsEventListener;\n  subscription = new Subscription();\n  defaultColor = 'red';\n  polygon = new google.maps.Polygon({\n    strokeColor: this.color,\n    strokeOpacity: 0.8,\n    strokeWeight: 2,\n    fillColor: this.color,\n    fillOpacity: !this.offline ? .55 : 0,\n    draggable: false\n  });\n\n  @Input() trackedObject: TrackedObject;\n  // tslint:disable-next-line: no-any\n  @Input() template: TemplateRef<any>;\n  drawSpeedVector = false;\n\n  /**\n   * Set this to `'hover'` to display the infowindow when hovering on the object.\n   * Set this to `'click'` to display the infowindow when clicking on the object.\n   */\n  @Input() triggerInfowindow: 'hover' | 'click' = 'hover';\n\n  @ViewChild(InfowindowComponent) infowindow: InfowindowComponent;\n  constructor(private googleMaps: GoogleMapsWrapper) { }\n\n  async ngAfterContentInit() {\n    await this.googleMaps.ready();\n\n    // Add bounds changed event\n    this.checkRenderObject();\n    this.subscription.add(\n      this.googleMaps.boundsChanged\n        .subscribe(() => this.checkRenderObject())\n    );\n\n    this.drawObject();\n  }\n\n  ngOnChanges() {\n    if (!this.trackedObject) return;\n    this.drawObject();\n  }\n\n  ngOnDestroy() {\n    this.polygon.setMap(null);\n    this.vectorLine.setMap(null);\n    this.dotMarker.setMap(null);\n    this.subscription.unsubscribe();\n    if (this.zoomListener) this.zoomListener.remove();\n  }\n\n  /**\n   * Current color for the current tracked object\n   */\n  get color(): string { return this.trackedObject && this.trackedObject.color || this.defaultColor; }\n\n  protected get isMoving(): boolean { return !!this.trackedObject && this.trackedObject.speed > 0; }\n  protected get offline(): boolean { return this.trackedObject && this.trackedObject.isOffline; }\n  protected get hasValidMeasures(): boolean { return true; }\n\n\n  /**\n   * Adaptive scale according to current zoom\n   */\n  protected get scale(): number {\n    const zoom = this.googleMaps && this.googleMaps.map && this.googleMaps.map.getZoom() || 1;\n    const s = Math.ceil(LOD.scaleTriangle - zoom);\n    return Math.pow(2, s) * (this.trackedObject.scale && this.trackedObject.scale || 1);\n  }\n\n  /**\n   * Tip point\n   */\n  get tipLatLng(): google.maps.LatLng {\n    if (this.hasValidMeasures)\n      return this.polygon && this.polygon.getPath().getAt(3);\n    else\n      return this.trackedObject.position;\n  }\n\n  /**\n   * Rear point\n   */\n  get rearLatLng(): google.maps.LatLng {\n    if (this.hasValidMeasures)\n      return this.polygon && this.polygon.getPath().getAt(0);\n    else\n      return this.trackedObject.position;\n  }\n\n  protected get canDrawPolygon(): boolean {\n    return this.hasValidMeasures;\n  }\n\n  /**\n   * Current map's zoom\n   */\n  protected get zoom(): number {\n    return this.googleMaps.map && this.googleMaps.map.getZoom();\n  }\n\n  /**\n   * Current relation to convert pixels to meters on the map\n   */\n  getMetersPerPx() {\n    if (!this.trackedObject.position || !this.googleMaps.map) return 0;\n    return this.googleMaps.getMetersPerPx(this.trackedObject.position.lat());\n  }\n\n  /**\n   * Checks if object is on screen and renders/unrenders it\n   */\n  protected checkRenderObject() {\n    const path = this.polygon && this.polygon.getPath();\n\n    // If showing a polygon\n    if (path && !!path.getLength()) {\n      let isPolygonOnScreen = false;\n      if (path.getArray().length) {\n        const bounds = this.googleMaps.map.getBounds();\n        path.forEach(p => isPolygonOnScreen = isPolygonOnScreen || bounds && bounds.contains(p));\n      }\n\n      if (isPolygonOnScreen) {\n        this.dotMarker.setVisible(true);\n        this.polygon.setVisible(true);\n        this.vectorLine.setVisible(true);\n      } else {\n        this.dotMarker.setVisible(false);\n        this.polygon.setVisible(false);\n        this.vectorLine.setVisible(false);\n      }\n    }\n    // If using the dot marker\n    else if (this.dotMarker) {\n      const bounds = this.googleMaps.map.getBounds();\n      const visible = !!bounds && bounds.contains(this.dotMarker.getPosition());\n      this.dotMarker.setVisible(visible);\n      this.polygon.setVisible(visible);\n      this.vectorLine.setVisible(visible);\n    }\n  }\n\n  protected clearEventListeners() {\n    this.hoverPolygonListeners.forEach(l => l.remove());\n    this.hoverPolygonListeners = [];\n    this.hoverDotListeners.forEach(l => l.remove());\n    this.hoverDotListeners = [];\n  }\n\n  protected setupEventListeners() {\n    const showPolygon = (this.canDrawPolygon && this.zoom >= LOD.scaleTriangle) || (this.isMoving && this.zoom < LOD.scaleTriangle);\n\n    if (showPolygon && !this.trackedObject.icon) {\n\n      // Add listeners for polygon, not do\n      if (this.hoverPolygonListeners.length < 1) {\n        this.clearEventListeners();\n        if (this.triggerInfowindow === 'click') {\n          this.hoverPolygonListeners.push(\n            this.polygon.addListener('click', () => this.onMouseOver()),\n          );\n        } else {\n          if (this.triggerInfowindow === 'hover') {\n            this.hoverPolygonListeners.push(\n              this.polygon.addListener('mouseover', () => this.onMouseOver()),\n              this.polygon.addListener('mouseout', () => this.onMouseOut()),\n            );\n          }\n        }\n      }\n    } else {\n\n      // Add listeners for dot, not polygon\n      if (this.hoverDotListeners.length < 1) {\n        this.clearEventListeners();\n        if (this.triggerInfowindow === 'click') {\n          this.hoverDotListeners.push(\n            this.dotMarker.addListener('click', () => this.onMouseOver()),\n          );\n        } else {\n          this.hoverDotListeners.push(\n            this.dotMarker.addListener('mouseover', () => this.onMouseOver()),\n            this.dotMarker.addListener('mouseout', () => this.onMouseOut()),\n          );\n        }\n      }\n    }\n\n    // Listen for zoom change\n    if (!this.zoomListener)\n      this.zoomListener = this.googleMaps.map.addListener('zoom_changed', () => this.onZoomChanged());\n  }\n\n  /**\n\t * Returns the series of icons according to the current zoom level\n\t */\n  protected getSpeedLineIcons() {\n    const s = Math.ceil(this.zoom - LOD.scaleTriangle);\n    s <= 0 ? 1 : Math.pow(2, s);\n\n    const icons: google.maps.IconSequence[] = [];\n    const l = SPEED_UNIT_LENGTH_M * this.scale;\n    const dashLength = Math.round(l / this.getMetersPerPx() * .5);\n    const skipIconOnFifth = false;\n\n    // Units\n\n    const iconUnits = {\n      path: `M 0 0 L 0 ${dashLength}`,\n      scale: 1,\n      strokeWeight: 2,\n      fillOpacity: 1\n    };\n\n    const units = Math.round(this.trackedObject.speed);\n    for (let i = 1; i <= units; i++) {\n      const percent = Math.round(100 / units * i);\n      icons.push({\n        icon: (i % 5 == 0 && skipIconOnFifth) ? null : iconUnits,\n        offset: `${percent}%`\n      });\n    }\n\n    // Fifths\n\n    const iconFifths = {\n      path: `M ${dashLength} ${dashLength / 2} L -${dashLength} ${dashLength / 2}`,\n      scale: 1,\n      strokeWeight: 2,\n    }\n\n    const fifths = Math.floor(units / 5);\n    for (let i = 1; i <= fifths; i++) {\n      const percent = Math.round(100 / units * 5 * i);\n      icons.push({\n        icon: iconFifths,\n        offset: `${percent}%`\n      });\n    }\n\n    return icons;\n  }\n\n  /**\n\t * Initis/updates polyline with icons according to current zoom level\n\t */\n  protected initSpeedPolyline() {\n    if (this.vectorLine) this.vectorLine.setMap(null);\n\n    this.vectorLine = new google.maps.Polyline({\n      strokeColor: 'green',\n      strokeWeight: 0,\n      draggable: false,\n      editable: false,\n      path: [],\n      icons: this.getSpeedLineIcons(),\n      map: this.googleMaps.map,\n    });\n\n    this.vectorLine.setVisible(false);\n  }\n\n  protected initDotaMarker() {\n    if (this.dotMarker) this.dotMarker.setMap(null);\n    this.googleMaps.addMarker(this.dotMarker);\n  }\n\n  protected getTrianglePath() {\n    if (!this.polygon) return [];\n\n    const positionDot = this.trackedObject.position;\n    const center = positionDot;\n    const h = this.trackedObject.heading || 0;\n    const w = 50;\n    const l = 100;\n\n    const rear = google.maps.geometry.spherical.computeOffset(center, l / 2 * this.scale, h + 180);\n    const rearLeft = google.maps.geometry.spherical.computeOffset(rear, w / 2 * this.scale, h - 90);\n    const rearRight = google.maps.geometry.spherical.computeOffset(rear, w / 2 * this.scale, h + 90);\n    const tip = google.maps.geometry.spherical.computeOffset(rear, l * this.scale, h);\n\n    return [rear, rearLeft, tip, rearRight];\n  }\n\n  protected getVectorLinePath(start: google.maps.LatLng) {\n    const l = SPEED_UNIT_LENGTH_M * this.trackedObject.speed;\n    const end = google.maps.geometry.spherical.computeOffset(start, l, this.trackedObject.speed);\n    return [start, end];\n  }\n\n  displayInfowindow(show: boolean) {\n    if (!this.infowindow) return;\n\n    if (show) {\n      const o = this.trackedObject.position;\n      this.infowindow.open(o);\n    } else {\n      this.infowindow.close();\n    }\n  }\n\n  drawObject() {\n    if (!this.dotMarker) this.initDotaMarker();\n    this.initSpeedPolyline();\n\n    if (!this.trackedObject.position) return;\n\n    this.setupEventListeners();\n    const showDot = !this.isMoving;\n    const showTriangle = this.isMoving && !this.trackedObject.icon;\n    const showSpeedLine = this.drawSpeedVector && this.isMoving && this.zoom >= LOD.speed;\n\n    // Show triangle\n    if (showTriangle) {\n      const polygonPath = this.getTrianglePath();\n      if (polygonPath.length) {\n        this.polygon.setOptions({\n          fillOpacity: !this.offline ? .55 : 0,\n          fillColor: this.color,\n          strokeColor: this.color,\n        });\n        this.polygon.setPath(polygonPath);\n        this.polygon.setVisible(true);\n        this.polygon.setMap(this.googleMaps.map);\n      }\n    }\n    else {\n      this.polygon.setVisible(false);\n      this.polygon.setMap(null);\n    }\n\n    // Draw speed vector\n    if (showSpeedLine) {\n      const o = this.trackedObject.position;\n      const linePath = this.getVectorLinePath(o);\n      this.vectorLine.setPath(linePath);\n      this.vectorLine.setVisible(true);\n      this.vectorLine.setMap(this.googleMaps.map);\n    } else {\n      this.vectorLine.setVisible(false);\n      this.vectorLine.setMap(null);\n    }\n\n    // Update dot icon\n    this.dotMarker.setIcon(\n      this.trackedObject.icon ||\n      {\n        path: google.maps.SymbolPath.CIRCLE,\n        fillColor: this.color,\n        fillOpacity: !this.offline && showDot ? 0.6 : 0,\n        strokeColor: this.color,\n        strokeOpacity: showDot ? 0.9 : 0,\n        strokeWeight: 1,\n        scale: 10 * (this.trackedObject.scale || 1),\n        labelOrigin: new google.maps.Point(0, 3),\n        anchor: new google.maps.Point(.5, .5),\n      }\n    );\n    this.dotMarker.setLabel(this.zoom >= LOD.nameLabels ? this.trackedObject.label : '');\n    this.dotMarker.setPosition(this.trackedObject.position);\n    this.dotMarker.setMap(this.googleMaps.map);\n    this.dotMarker.setVisible(true);\n  }\n\n  protected onMouseOver() {\n    this.displayInfowindow(true);\n  }\n\n  protected onMouseOut() {\n    this.displayInfowindow(false);\n  }\n\n  protected onZoomChanged() {\n    this.drawObject();\n  }\n}\n","/// <reference types=\"@types/googlemaps\" />\nimport { Component, Output, EventEmitter, Input } from '@angular/core';\nimport geolocationMarkrFn from 'geolocation-marker';\nimport { GoogleMapsWrapper } from '../../services/googlemaps-wrapper';\ngeolocationMarkrFn;\n\n/**\n * Extends from {@link google.maps.MVCObject https://developers.google.com/maps/documentation/javascript/reference/event#MVCObject}.\n * It shows the default blue sphere with proximity shade.\n */\ndeclare class GeolocationMarker {\n  constructor(map: google.maps.Map);\n  setMap(map: google.maps.Map);\n  position: google.maps.LatLng;\n}\n\n/**\n * Creates the default user location button.\n *\n * â  Add this component as sibling **AFTER the\n * map element**, so if renders on top of it.\n *\n * @example\n * <div id=\"parent\" style=\"height: 100%; width: 100%;\">\n *   <div id=\"map\" #map></div>\n *   <gmtv-geolocation-button (locate)=\"onLocation()\"></gmtv-geolocation-button>\n * </div>\n */\n@Component({\n  selector: 'gmtv-geolocation-button',\n  templateUrl: './geolocation-button.html',\n  styleUrls: ['./geolocation-button.scss']\n})\nexport class GeolocationButtonComponent {\n  /**\n   * If `true`, the button won't attempt to center the map on the user when clicked,\n   * but will emit the event `click` instead.\n   * \n   * @example\n   * \n   * <gmtv-geolocation-button \n   *   [useCustomClickFn]=\"true\" \n   *   (click)=\"myCustomFunction()\"></gmtv-geolocation-button>\n   */\n  @Input() useCustomClickFn = false;\n  /**\n   * Emited after obtaining the user's location\n   */\n  @Output() locate = new EventEmitter<google.maps.LatLng>();\n  private _geoLocationMarker: GeolocationMarker;\n\n  constructor(protected googlemapsWrapper: GoogleMapsWrapper) { }\n\n  /**\n   * Get user's location and center map on it\n   */\n  centerOnUser() {\n    if (this.useCustomClickFn) {\n      return;\n    }\n\n    if (navigator.geolocation) {\n      navigator.geolocation.getCurrentPosition((position) => this.onPosition(position), console.error, { enableHighAccuracy: true });\n    } else {\n      console.error('No support for geolocation');\n    }\n  }\n\n  /**\n   * Center the map on a specific position and draw the geoLocationMarker\n   */\n  setUserPosition(lat: number, lng: number) {\n    this.googlemapsWrapper.map.setCenter({ lat, lng });\n    if (this._geoLocationMarker) this._geoLocationMarker.setMap(null);\n    this._geoLocationMarker = new GeolocationMarker(this.googlemapsWrapper.map);\n    this.locate.emit(this._geoLocationMarker.position);\n  }\n\n  private onPosition(position: Position) {\n    const lng = position.coords.longitude;\n    const lat = position.coords.latitude;\n    // this.googlemapsWrapper.map.setCenter({ lat, lng });\n\n    // if (this._geoLocationMarker) this._geoLocationMarker.setMap(null);\n    // this._geoLocationMarker = new GeolocationMarker(this.googlemapsWrapper.map);\n    // this.locate.emit(this._geoLocationMarker.position);\n    this.setUserPosition(lat, lng);\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxGooglemapsTrackingViewComponent } from './ngx-googlemaps-tracking-view.component';\nimport { TrackedObjectComponent } from './components/tracked-object/tracked-object.component';\nimport { CommonModule } from '@angular/common';\nimport { GoogleMapsWrapper } from './services/googlemaps-wrapper';\nimport { InfowindowComponent } from './components/infowindow/infowindow.component';\nimport { GeolocationButtonComponent } from './components/geolocation-button/geolocation-button';\nimport { HttpClientModule } from '@angular/common/http';\n\n@NgModule({\n  declarations: [\n    NgxGooglemapsTrackingViewComponent,\n    TrackedObjectComponent,\n    InfowindowComponent,\n    GeolocationButtonComponent\n  ],\n  imports: [\n    CommonModule,\n    HttpClientModule\n  ],\n  providers: [GoogleMapsWrapper],\n  exports: [\n    NgxGooglemapsTrackingViewComponent,\n    InfowindowComponent,\n    GeolocationButtonComponent\n  ]\n})\nexport class NgxGooglemapsTrackingViewModule { }\n","var trim = function(string) {\n  return string.replace(/^\\s+|\\s+$/g, '');\n}\n  , isArray = function(arg) {\n      return Object.prototype.toString.call(arg) === '[object Array]';\n    }\n\nmodule.exports = function (headers) {\n  if (!headers)\n    return {}\n\n  var result = {}\n\n  var headersArr = trim(headers).split('\\n')\n\n  for (var i = 0; i < headersArr.length; i++) {\n    var row = headersArr[i]\n    var index = row.indexOf(':')\n    , key = trim(row.slice(0, index)).toLowerCase()\n    , value = trim(row.slice(index + 1))\n\n    if (typeof(result[key]) === 'undefined') {\n      result[key] = value\n    } else if (isArray(result[key])) {\n      result[key].push(value)\n    } else {\n      result[key] = [ result[key], value ]\n    }\n  }\n\n  return result\n}\n","\nmodule.exports = parse\n\n/**\n * expected argument lengths\n * @type {Object}\n */\n\nvar length = {a: 7, c: 6, h: 1, l: 2, m: 2, q: 4, s: 4, t: 2, v: 1, z: 0}\n\n/**\n * segment pattern\n * @type {RegExp}\n */\n\nvar segment = /([astvzqmhlc])([^astvzqmhlc]*)/ig\n\n/**\n * parse an svg path data string. Generates an Array\n * of commands where each command is an Array of the\n * form `[command, arg1, arg2, ...]`\n *\n * @param {String} path\n * @return {Array}\n */\n\nfunction parse(path) {\n\tvar data = []\n\tpath.replace(segment, function(_, command, args){\n\t\tvar type = command.toLowerCase()\n\t\targs = parseValues(args)\n\n\t\t// overloaded moveTo\n\t\tif (type == 'm' && args.length > 2) {\n\t\t\tdata.push([command].concat(args.splice(0, 2)))\n\t\t\ttype = 'l'\n\t\t\tcommand = command == 'm' ? 'l' : 'L'\n\t\t}\n\n\t\twhile (true) {\n\t\t\tif (args.length == length[type]) {\n\t\t\t\targs.unshift(command)\n\t\t\t\treturn data.push(args)\n\t\t\t}\n\t\t\tif (args.length < length[type]) throw new Error('malformed path data')\n\t\t\tdata.push([command].concat(args.splice(0, length[type])))\n\t\t}\n\t})\n\treturn data\n}\n\nvar number = /-?[0-9]*\\.?[0-9]+(?:e[-+]?\\d+)?/ig\n\nfunction parseValues(args) {\n\tvar numbers = args.match(number)\n\treturn numbers ? numbers.map(Number) : []\n}\n","// randomColor by David Merfield under the CC0 license\n// https://github.com/davidmerfield/randomColor/\n\n;(function(root, factory) {\n\n  // Support CommonJS\n  if (typeof exports === 'object') {\n    var randomColor = factory();\n\n    // Support NodeJS & Component, which allow module.exports to be a function\n    if (typeof module === 'object' && module && module.exports) {\n      exports = module.exports = randomColor;\n    }\n\n    // Support CommonJS 1.1.1 spec\n    exports.randomColor = randomColor;\n\n  // Support AMD\n  } else if (typeof define === 'function' && define.amd) {\n    define([], factory);\n\n  // Support vanilla script loading\n  } else {\n    root.randomColor = factory();\n  }\n\n}(this, function() {\n\n  // Seed to get repeatable colors\n  var seed = null;\n\n  // Shared color dictionary\n  var colorDictionary = {};\n\n  // Populate the color dictionary\n  loadColorBounds();\n\n  // check if a range is taken\n  var colorRanges = [];\n\n  var randomColor = function (options) {\n\n    options = options || {};\n\n    // Check if there is a seed and ensure it's an\n    // integer. Otherwise, reset the seed value.\n    if (options.seed !== undefined && options.seed !== null && options.seed === parseInt(options.seed, 10)) {\n      seed = options.seed;\n\n    // A string was passed as a seed\n    } else if (typeof options.seed === 'string') {\n      seed = stringToInteger(options.seed);\n\n    // Something was passed as a seed but it wasn't an integer or string\n    } else if (options.seed !== undefined && options.seed !== null) {\n      throw new TypeError('The seed value must be an integer or string');\n\n    // No seed, reset the value outside.\n    } else {\n      seed = null;\n    }\n\n    var H,S,B;\n\n    // Check if we need to generate multiple colors\n    if (options.count !== null && options.count !== undefined) {\n\n      var totalColors = options.count,\n          colors = [];\n      // Value false at index i means the range i is not taken yet.\n      for (var i = 0; i < options.count; i++) {\n        colorRanges.push(false)\n        }\n      options.count = null;\n\n      while (totalColors > colors.length) {\n\n        // Since we're generating multiple colors,\n        // incremement the seed. Otherwise we'd just\n        // generate the same color each time...\n        if (seed && options.seed) options.seed += 1;\n\n        colors.push(randomColor(options));\n      }\n\n      options.count = totalColors;\n\n      return colors;\n    }\n\n    // First we pick a hue (H)\n    H = pickHue(options);\n\n    // Then use H to determine saturation (S)\n    S = pickSaturation(H, options);\n\n    // Then use S and H to determine brightness (B).\n    B = pickBrightness(H, S, options);\n\n    // Then we return the HSB color in the desired format\n    return setFormat([H,S,B], options);\n  };\n\n  function pickHue(options) {\n    if (colorRanges.length > 0) {\n      var hueRange = getRealHueRange(options.hue)\n\n      var hue = randomWithin(hueRange)\n\n      //Each of colorRanges.length ranges has a length equal approximatelly one step\n      var step = (hueRange[1] - hueRange[0]) / colorRanges.length\n\n      var j = parseInt((hue - hueRange[0]) / step)\n\n      //Check if the range j is taken\n      if (colorRanges[j] === true) {\n        j = (j + 2) % colorRanges.length\n      }\n      else {\n        colorRanges[j] = true\n           }\n\n      var min = (hueRange[0] + j * step) % 359,\n          max = (hueRange[0] + (j + 1) * step) % 359;\n\n      hueRange = [min, max]\n\n      hue = randomWithin(hueRange)\n\n      if (hue < 0) {hue = 360 + hue;}\n      return hue\n    }\n    else {\n      var hueRange = getHueRange(options.hue)\n\n      hue = randomWithin(hueRange);\n      // Instead of storing red as two seperate ranges,\n      // we group them, using negative numbers\n      if (hue < 0) {\n        hue = 360 + hue;\n      }\n\n      return hue;\n    }\n  }\n\n  function pickSaturation (hue, options) {\n\n    if (options.hue === 'monochrome') {\n      return 0;\n    }\n\n    if (options.luminosity === 'random') {\n      return randomWithin([0,100]);\n    }\n\n    var saturationRange = getSaturationRange(hue);\n\n    var sMin = saturationRange[0],\n        sMax = saturationRange[1];\n\n    switch (options.luminosity) {\n\n      case 'bright':\n        sMin = 55;\n        break;\n\n      case 'dark':\n        sMin = sMax - 10;\n        break;\n\n      case 'light':\n        sMax = 55;\n        break;\n   }\n\n    return randomWithin([sMin, sMax]);\n\n  }\n\n  function pickBrightness (H, S, options) {\n\n    var bMin = getMinimumBrightness(H, S),\n        bMax = 100;\n\n    switch (options.luminosity) {\n\n      case 'dark':\n        bMax = bMin + 20;\n        break;\n\n      case 'light':\n        bMin = (bMax + bMin)/2;\n        break;\n\n      case 'random':\n        bMin = 0;\n        bMax = 100;\n        break;\n    }\n\n    return randomWithin([bMin, bMax]);\n  }\n\n  function setFormat (hsv, options) {\n\n    switch (options.format) {\n\n      case 'hsvArray':\n        return hsv;\n\n      case 'hslArray':\n        return HSVtoHSL(hsv);\n\n      case 'hsl':\n        var hsl = HSVtoHSL(hsv);\n        return 'hsl('+hsl[0]+', '+hsl[1]+'%, '+hsl[2]+'%)';\n\n      case 'hsla':\n        var hslColor = HSVtoHSL(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'hsla('+hslColor[0]+', '+hslColor[1]+'%, '+hslColor[2]+'%, ' + alpha + ')';\n\n      case 'rgbArray':\n        return HSVtoRGB(hsv);\n\n      case 'rgb':\n        var rgb = HSVtoRGB(hsv);\n        return 'rgb(' + rgb.join(', ') + ')';\n\n      case 'rgba':\n        var rgbColor = HSVtoRGB(hsv);\n        var alpha = options.alpha || Math.random();\n        return 'rgba(' + rgbColor.join(', ') + ', ' + alpha + ')';\n\n      default:\n        return HSVtoHex(hsv);\n    }\n\n  }\n\n  function getMinimumBrightness(H, S) {\n\n    var lowerBounds = getColorInfo(H).lowerBounds;\n\n    for (var i = 0; i < lowerBounds.length - 1; i++) {\n\n      var s1 = lowerBounds[i][0],\n          v1 = lowerBounds[i][1];\n\n      var s2 = lowerBounds[i+1][0],\n          v2 = lowerBounds[i+1][1];\n\n      if (S >= s1 && S <= s2) {\n\n         var m = (v2 - v1)/(s2 - s1),\n             b = v1 - m*s1;\n\n         return m*S + b;\n      }\n\n    }\n\n    return 0;\n  }\n\n  function getHueRange (colorInput) {\n\n    if (typeof parseInt(colorInput) === 'number') {\n\n      var number = parseInt(colorInput);\n\n      if (number < 360 && number > 0) {\n        return [number, number];\n      }\n\n    }\n\n    if (typeof colorInput === 'string') {\n\n      if (colorDictionary[colorInput]) {\n        var color = colorDictionary[colorInput];\n        if (color.hueRange) {return color.hueRange;}\n      } else if (colorInput.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorInput)[0];\n        return [ hue, hue ];\n      }\n    }\n\n    return [0,360];\n\n  }\n\n  function getSaturationRange (hue) {\n    return getColorInfo(hue).saturationRange;\n  }\n\n  function getColorInfo (hue) {\n\n    // Maps red colors to make picking hue easier\n    if (hue >= 334 && hue <= 360) {\n      hue-= 360;\n    }\n\n    for (var colorName in colorDictionary) {\n       var color = colorDictionary[colorName];\n       if (color.hueRange &&\n           hue >= color.hueRange[0] &&\n           hue <= color.hueRange[1]) {\n          return colorDictionary[colorName];\n       }\n    } return 'Color not found';\n  }\n\n  function randomWithin (range) {\n    if (seed === null) {\n      //generate random evenly destinct number from : https://martin.ankerl.com/2009/12/09/how-to-create-random-colors-programmatically/\n      var golden_ratio = 0.618033988749895\n      var r=Math.random()\n      r += golden_ratio\n      r %= 1\n      return Math.floor(range[0] + r*(range[1] + 1 - range[0]));\n    } else {\n      //Seeded random algorithm from http://indiegamr.com/generate-repeatable-random-numbers-in-js/\n      var max = range[1] || 1;\n      var min = range[0] || 0;\n      seed = (seed * 9301 + 49297) % 233280;\n      var rnd = seed / 233280.0;\n      return Math.floor(min + rnd * (max - min));\n}\n  }\n\n  function HSVtoHex (hsv){\n\n    var rgb = HSVtoRGB(hsv);\n\n    function componentToHex(c) {\n        var hex = c.toString(16);\n        return hex.length == 1 ? '0' + hex : hex;\n    }\n\n    var hex = '#' + componentToHex(rgb[0]) + componentToHex(rgb[1]) + componentToHex(rgb[2]);\n\n    return hex;\n\n  }\n\n  function defineColor (name, hueRange, lowerBounds) {\n\n    var sMin = lowerBounds[0][0],\n        sMax = lowerBounds[lowerBounds.length - 1][0],\n\n        bMin = lowerBounds[lowerBounds.length - 1][1],\n        bMax = lowerBounds[0][1];\n\n    colorDictionary[name] = {\n      hueRange: hueRange,\n      lowerBounds: lowerBounds,\n      saturationRange: [sMin, sMax],\n      brightnessRange: [bMin, bMax]\n    };\n\n  }\n\n  function loadColorBounds () {\n\n    defineColor(\n      'monochrome',\n      null,\n      [[0,0],[100,0]]\n    );\n\n    defineColor(\n      'red',\n      [-26,18],\n      [[20,100],[30,92],[40,89],[50,85],[60,78],[70,70],[80,60],[90,55],[100,50]]\n    );\n\n    defineColor(\n      'orange',\n      [19,46],\n      [[20,100],[30,93],[40,88],[50,86],[60,85],[70,70],[100,70]]\n    );\n\n    defineColor(\n      'yellow',\n      [47,62],\n      [[25,100],[40,94],[50,89],[60,86],[70,84],[80,82],[90,80],[100,75]]\n    );\n\n    defineColor(\n      'green',\n      [63,178],\n      [[30,100],[40,90],[50,85],[60,81],[70,74],[80,64],[90,50],[100,40]]\n    );\n\n    defineColor(\n      'blue',\n      [179, 257],\n      [[20,100],[30,86],[40,80],[50,74],[60,60],[70,52],[80,44],[90,39],[100,35]]\n    );\n\n    defineColor(\n      'purple',\n      [258, 282],\n      [[20,100],[30,87],[40,79],[50,70],[60,65],[70,59],[80,52],[90,45],[100,42]]\n    );\n\n    defineColor(\n      'pink',\n      [283, 334],\n      [[20,100],[30,90],[40,86],[60,84],[80,80],[90,75],[100,73]]\n    );\n\n  }\n\n  function HSVtoRGB (hsv) {\n\n    // this doesn't work for the values of 0 and 360\n    // here's the hacky fix\n    var h = hsv[0];\n    if (h === 0) {h = 1;}\n    if (h === 360) {h = 359;}\n\n    // Rebase the h,s,v values\n    h = h/360;\n    var s = hsv[1]/100,\n        v = hsv[2]/100;\n\n    var h_i = Math.floor(h*6),\n      f = h * 6 - h_i,\n      p = v * (1 - s),\n      q = v * (1 - f*s),\n      t = v * (1 - (1 - f)*s),\n      r = 256,\n      g = 256,\n      b = 256;\n\n    switch(h_i) {\n      case 0: r = v; g = t; b = p;  break;\n      case 1: r = q; g = v; b = p;  break;\n      case 2: r = p; g = v; b = t;  break;\n      case 3: r = p; g = q; b = v;  break;\n      case 4: r = t; g = p; b = v;  break;\n      case 5: r = v; g = p; b = q;  break;\n    }\n\n    var result = [Math.floor(r*255), Math.floor(g*255), Math.floor(b*255)];\n    return result;\n  }\n\n  function HexToHSB (hex) {\n    hex = hex.replace(/^#/, '');\n    hex = hex.length === 3 ? hex.replace(/(.)/g, '$1$1') : hex;\n\n    var red = parseInt(hex.substr(0, 2), 16) / 255,\n          green = parseInt(hex.substr(2, 2), 16) / 255,\n          blue = parseInt(hex.substr(4, 2), 16) / 255;\n\n    var cMax = Math.max(red, green, blue),\n          delta = cMax - Math.min(red, green, blue),\n          saturation = cMax ? (delta / cMax) : 0;\n\n    switch (cMax) {\n      case red: return [ 60 * (((green - blue) / delta) % 6) || 0, saturation, cMax ];\n      case green: return [ 60 * (((blue - red) / delta) + 2) || 0, saturation, cMax ];\n      case blue: return [ 60 * (((red - green) / delta) + 4) || 0, saturation, cMax ];\n    }\n  }\n\n  function HSVtoHSL (hsv) {\n    var h = hsv[0],\n      s = hsv[1]/100,\n      v = hsv[2]/100,\n      k = (2-s)*v;\n\n    return [\n      h,\n      Math.round(s*v / (k<1 ? k : 2-k) * 10000) / 100,\n      k/2 * 100\n    ];\n  }\n\n  function stringToInteger (string) {\n    var total = 0\n    for (var i = 0; i !== string.length; i++) {\n      if (total >= Number.MAX_SAFE_INTEGER) break;\n      total += string.charCodeAt(i)\n    }\n    return total\n  }\n\n  // get The range of given hue when options.count!=0\n  function getRealHueRange(colorHue)\n  { if (!isNaN(colorHue)) {\n    var number = parseInt(colorHue);\n\n    if (number < 360 && number > 0) {\n      return getColorInfo(colorHue).hueRange\n    }\n  }\n    else if (typeof colorHue === 'string') {\n\n      if (colorDictionary[colorHue]) {\n        var color = colorDictionary[colorHue];\n\n        if (color.hueRange) {\n          return color.hueRange\n       }\n    } else if (colorHue.match(/^#?([0-9A-F]{3}|[0-9A-F]{6})$/i)) {\n        var hue = HexToHSB(colorHue)[0]\n        return getColorInfo(hue).hueRange\n    }\n  }\n\n    return [0,360]\n}\n  return randomColor;\n}));\n","export default \"<ion-header>\\r\\n  <ion-toolbar>\\r\\n    <ion-title>Tracking View Demo</ion-title>\\r\\n  </ion-toolbar>\\r\\n  <ion-toolbar>\\r\\n    <ion-buttons slot=\\\"end\\\">\\r\\n      <ion-button size=\\\"small\\\" fill=\\\"clear\\\" color=\\\"primary\\\" (click)=\\\"openDocumentation()\\\">Documentation</ion-button>\\r\\n      <ion-button size=\\\"small\\\" fill=\\\"outline\\\" (click)=\\\"map.centerPin.enable(infowindowLocation, '<yourApiKey>')\\\">Add Pin\\r\\n      </ion-button>\\r\\n      <ion-button size=\\\"small\\\" fill=\\\"outline\\\" (click)=\\\"map.centerPin.disable()\\\">Remove Pin</ion-button>\\r\\n    </ion-buttons>\\r\\n  </ion-toolbar>\\r\\n</ion-header>\\r\\n<ion-content [fullscreen]=\\\"true\\\">\\r\\n\\r\\n  <div class=\\\"container text-center bg-white\\\" id=\\\"header\\\">\\r\\n    <p class=\\\"ion-margin-vertical\\\">\\r\\n      This demo shows 50 real-time aircrafts flying over the location, updated every 10 seconds.\\r\\n      <br>\\r\\n      The map includes geolocation functions. Click on the top right buttons to add a pick-location pin.\\r\\n    </p>\\r\\n  </div>\\r\\n\\r\\n  <!-- Address Infowindow Template -->\\r\\n  <ng-template #infowindowLocation let-address>\\r\\n    <div style=\\\"min-height: 20px; min-width: 50px;\\\">\\r\\n      <span *ngIf=\\\"!address\\\">Loading...</span>\\r\\n      <div *ngIf=\\\"!!address\\\" class=\\\"ion-text-center\\\">\\r\\n        (add your gMaps Api Key to call geolocation service)\\r\\n        <br>\\r\\n        <ion-button size=\\\"small\\\" (click)=\\\"map.centerPin.fix = !map.centerPin.fix\\\">\\r\\n          {{map.centerPin.fix ? 'Move' : 'Fix Pin'}}</ion-button>\\r\\n      </div>\\r\\n    </div>\\r\\n  </ng-template>\\r\\n\\r\\n  <!-- Map Component -->\\r\\n  <div id=\\\"parent\\\">\\r\\n    <gmtv-map [data]=\\\"objectsToTrack\\\"\\r\\n              [triggerInfowindow]=\\\"isMobile ? 'click' : 'hover'\\\"\\r\\n              [template]=\\\"infowindow\\\"\\r\\n              [mapOptions]=\\\"mapOptions\\\"\\r\\n              [showLocationButton]=\\\"true\\\"\\r\\n              #map>\\r\\n      <ng-template #infowindow let-o>\\r\\n        <div>\\r\\n          <h3>Flight #{{o.label?.text}} <span class=\\\"flag-icon flag-icon-{{getIsoCode(o.country)?.toLowerCase()}}\\\"\\r\\n                  [title]=\\\"o.country\\\"></span></h3>\\r\\n          <span><strong>Altitude: </strong>{{o.altitude | number: '1.0-0'}}m</span>\\r\\n        </div>\\r\\n      </ng-template>\\r\\n    </gmtv-map>\\r\\n\\r\\n    <gmtv-geolocation-button></gmtv-geolocation-button>\\r\\n\\r\\n  </div>\\r\\n\\r\\n</ion-content>\\r\\n\"","module.exports = function(module) {\n\tif (!module.webpackPolyfill) {\n\t\tmodule.deprecate = function() {};\n\t\tmodule.paths = [];\n\t\t// module.parent = undefined by default\n\t\tif (!module.children) module.children = [];\n\t\tObject.defineProperty(module, \"loaded\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.l;\n\t\t\t}\n\t\t});\n\t\tObject.defineProperty(module, \"id\", {\n\t\t\tenumerable: true,\n\t\t\tget: function() {\n\t\t\t\treturn module.i;\n\t\t\t}\n\t\t});\n\t\tmodule.webpackPolyfill = 1;\n\t}\n\treturn module;\n};\n","var window = require(\"global/window\")\nvar once = require(\"once\")\nvar parseHeaders = require('parse-headers')\n\nvar messages = {\n    \"0\": \"Internal XMLHttpRequest Error\",\n    \"4\": \"4xx Client Error\",\n    \"5\": \"5xx Server Error\"\n}\n\nvar XHR = window.XMLHttpRequest || noop\nvar XDR = \"withCredentials\" in (new XHR()) ? XHR : window.XDomainRequest\n\nmodule.exports = createXHR\n\nfunction createXHR(options, callback) {\n    if (typeof options === \"string\") {\n        options = { uri: options }\n    }\n\n    options = options || {}\n    callback = once(callback)\n\n    var xhr = options.xhr || null\n\n    if (!xhr) {\n        if (options.cors || options.useXDR) {\n            xhr = new XDR()\n        }else{\n            xhr = new XHR()\n        }\n    }\n\n    var uri = xhr.url = options.uri || options.url\n    var method = xhr.method = options.method || \"GET\"\n    var body = options.body || options.data\n    var headers = xhr.headers = options.headers || {}\n    var sync = !!options.sync\n    var isJson = false\n    var key\n    var load = options.response ? loadResponse : loadXhr\n\n    if (\"json\" in options) {\n        isJson = true\n        headers[\"Accept\"] = \"application/json\"\n        if (method !== \"GET\" && method !== \"HEAD\") {\n            headers[\"Content-Type\"] = \"application/json\"\n            body = JSON.stringify(options.json)\n        }\n    }\n\n    xhr.onreadystatechange = readystatechange\n    xhr.onload = load\n    xhr.onerror = error\n    // IE9 must have onprogress be set to a unique function.\n    xhr.onprogress = function () {\n        // IE must die\n    }\n    // hate IE\n    xhr.ontimeout = noop\n    xhr.open(method, uri, !sync)\n                                    //backward compatibility\n    if (options.withCredentials || (options.cors && options.withCredentials !== false)) {\n        xhr.withCredentials = true\n    }\n\n    // Cannot set timeout with sync request\n    if (!sync) {\n        xhr.timeout = \"timeout\" in options ? options.timeout : 5000\n    }\n\n    if (xhr.setRequestHeader) {\n        for(key in headers){\n            if(headers.hasOwnProperty(key)){\n                xhr.setRequestHeader(key, headers[key])\n            }\n        }\n    } else if (options.headers) {\n        throw new Error(\"Headers cannot be set on an XDomainRequest object\")\n    }\n\n    if (\"responseType\" in options) {\n        xhr.responseType = options.responseType\n    }\n    \n    if (\"beforeSend\" in options && \n        typeof options.beforeSend === \"function\"\n    ) {\n        options.beforeSend(xhr)\n    }\n\n    xhr.send(body)\n\n    return xhr\n\n    function readystatechange() {\n        if (xhr.readyState === 4) {\n            load()\n        }\n    }\n\n    function getBody() {\n        // Chrome with requestType=blob throws errors arround when even testing access to responseText\n        var body = null\n\n        if (xhr.response) {\n            body = xhr.response\n        } else if (xhr.responseType === 'text' || !xhr.responseType) {\n            body = xhr.responseText || xhr.responseXML\n        }\n\n        if (isJson) {\n            try {\n                body = JSON.parse(body)\n            } catch (e) {}\n        }\n\n        return body\n    }\n\n    function getStatusCode() {\n        return xhr.status === 1223 ? 204 : xhr.status\n    }\n\n    // if we're getting a none-ok statusCode, build & return an error\n    function errorFromStatusCode(status, body) {\n        var error = null\n        if (status === 0 || (status >= 400 && status < 600)) {\n            var message = (typeof body === \"string\" ? body : false) ||\n                messages[String(status).charAt(0)]\n            error = new Error(message)\n            error.statusCode = status\n        }\n\n        return error\n    }\n\n    // will load the data & process the response in a special response object\n    function loadResponse() {\n        var status = getStatusCode()\n        var body = getBody()\n        var error = errorFromStatusCode(status, body)\n        var response = {\n            body: body,\n            statusCode: status,\n            statusText: xhr.statusText,\n            raw: xhr\n        }\n        if(xhr.getAllResponseHeaders){ //remember xhr can in fact be XDR for CORS in IE\n            response.headers = parseHeaders(xhr.getAllResponseHeaders())\n        } else {\n            response.headers = {}\n        }\n\n        callback(error, response, response.body)\n    }\n\n    // will load the data and add some response properties to the source xhr\n    // and then respond with that\n    function loadXhr() {\n        var status = getStatusCode()\n        var error = errorFromStatusCode(status)\n\n        xhr.status = xhr.statusCode = status\n        xhr.body = getBody()\n        xhr.headers = parseHeaders(xhr.getAllResponseHeaders())\n\n        callback(error, xhr, xhr.body)\n    }\n\n    function error(evt) {\n        callback(evt, xhr)\n    }\n}\n\n\nfunction noop() {}\n","module.exports = once\n\nonce.proto = once(function () {\n  Object.defineProperty(Function.prototype, 'once', {\n    value: function () {\n      return once(this)\n    },\n    configurable: true\n  })\n})\n\nfunction once (fn) {\n  var called = false\n  return function () {\n    if (called) return\n    called = true\n    return fn.apply(this, arguments)\n  }\n}\n","module.exports = (function xmlparser() {\n  //common browsers\n  if (typeof self.DOMParser !== 'undefined') {\n    return function(str) {\n      var parser = new self.DOMParser()\n      return parser.parseFromString(str, 'application/xml')\n    }\n  } \n\n  //IE8 fallback\n  if (typeof self.ActiveXObject !== 'undefined'\n      && new self.ActiveXObject('Microsoft.XMLDOM')) {\n    return function(str) {\n      var xmlDoc = new self.ActiveXObject(\"Microsoft.XMLDOM\")\n      xmlDoc.async = \"false\"\n      xmlDoc.loadXML(str)\n      return xmlDoc\n    }\n  }\n\n  //last resort fallback\n  return function(str) {\n    var div = document.createElement('div')\n    div.innerHTML = str\n    return div\n  }\n})()\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { IonicModule } from '@ionic/angular';\r\nimport { RouterModule } from '@angular/router';\r\nimport { HomePage } from './home.page';\r\nimport { NgxGooglemapsTrackingViewModule } from 'ngx-googlemaps-tracking-view';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\n@NgModule({\r\n  providers: [],\r\n  imports: [\r\n    NgxGooglemapsTrackingViewModule,\r\n    HttpClientModule,\r\n    CommonModule,\r\n    IonicModule,\r\n    RouterModule.forChild([\r\n      {\r\n        path: '',\r\n        component: HomePage\r\n      }\r\n    ])\r\n  ],\r\n  declarations: [HomePage]\r\n})\r\nexport class HomePageModule {}\r\n","export default \"* {\\n  --header-height: 90px; }\\n\\n#header {\\n  height: var(--header-height);\\n  overflow-y: auto; }\\n\\n#parent {\\n  width: 100%;\\n  position: relative;\\n  height: calc(100% - var(--header-height)); }\\n\\n/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNyYy9hcHAvaG9tZS9DOlxcVXNlcnNcXFJhc2NoaWRcXEdpdFxcYW5ndWxhclxcZ29vZ2xlbWFwcy10cmFja2luZy12aWV3XFxkZW1vL3NyY1xcYXBwXFxob21lXFxob21lLnBhZ2Uuc2NzcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtFQUNFLHFCQUFnQixFQUFBOztBQUdsQjtFQUNFLDRCQUE0QjtFQUM1QixnQkFBZ0IsRUFBQTs7QUFHbEI7RUFDRSxXQUFXO0VBQ1gsa0JBQWtCO0VBQ2xCLHlDQUF5QyxFQUFBIiwiZmlsZSI6InNyYy9hcHAvaG9tZS9ob21lLnBhZ2Uuc2NzcyIsInNvdXJjZXNDb250ZW50IjpbIioge1xyXG4gIC0taGVhZGVyLWhlaWdodDogOTBweDtcclxufVxyXG5cclxuI2hlYWRlciB7XHJcbiAgaGVpZ2h0OiB2YXIoLS1oZWFkZXItaGVpZ2h0KTtcclxuICBvdmVyZmxvdy15OiBhdXRvO1xyXG59XHJcblxyXG4jcGFyZW50IHtcclxuICB3aWR0aDogMTAwJTtcclxuICBwb3NpdGlvbjogcmVsYXRpdmU7XHJcbiAgaGVpZ2h0OiBjYWxjKDEwMCUgLSB2YXIoLS1oZWFkZXItaGVpZ2h0KSk7XHJcbn1cclxuIl19 */\"","/// <reference types=\"@types/googlemaps\" />\r\nimport { Component, ViewChild, AfterContentInit, ViewContainerRef, TemplateRef } from '@angular/core';\r\nimport { NgxGooglemapsTrackingViewComponent, TrackedObject } from 'ngx-googlemaps-tracking-view';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport * as i18IsoCountries from 'i18n-iso-countries';\r\nimport * as randomColor from 'randomcolor';\r\nimport * as parseSvg from 'parse-svg-path';\r\nimport * as extractSvg from 'extract-svg-path';\r\nimport * as loadSvg from 'load-svg';\r\nimport { Platform } from '@ionic/angular';\r\n\r\ni18IsoCountries.registerLocale(require('i18n-iso-countries/langs/en.json'));\r\ninterface Aircraft {\r\n  /** icao24 */\r\n  0: string;\r\n  /** origin_country */\r\n  2: string;\r\n  /** longitude */\r\n  5: number;\r\n  /** latitude */\r\n  6: number;\r\n  /** on_ground */\r\n  8: boolean;\r\n  /** true_track */\r\n  10: number;\r\n  /** geo_altitude */\r\n  13: number;\r\n}\r\n\r\ninterface TrackedAircraft extends TrackedObject {\r\n  altitude: number;\r\n  country: string;\r\n  onGround: boolean;\r\n}\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: 'home.page.html',\r\n  styleUrls: ['home.page.scss'],\r\n})\r\nexport class HomePage implements AfterContentInit {\r\n  @ViewChild(NgxGooglemapsTrackingViewComponent, { static: true }) mapView: NgxGooglemapsTrackingViewComponent;\r\n  @ViewChild('infowindowLocation', { static: false }) infowindowLocation: TemplateRef<any>;\r\n\r\n  objectsToTrack: TrackedObject[] = [1, 2, 3, 4, 5] as any;\r\n  symbolPath = '';\r\n\r\n  mapOptions: google.maps.MapOptions = {\r\n    center: {\r\n      lat: 42.504154,\r\n      lng: 12.646361\r\n    },\r\n    zoom: 6,\r\n    mapTypeId: google.maps.MapTypeId.SATELLITE,\r\n  };\r\n\r\n  get isMobile() { return this.platform.is('mobile'); }\r\n\r\n  constructor(private http: HttpClient, public vc: ViewContainerRef, private platform: Platform) {\r\n    // Load svg as symbol path\r\n    loadSvg('assets/baseline-local_airport-24px.svg', (err, svg) => {\r\n      const paths: any[][] = parseSvg(extractSvg.parse(svg));\r\n      const i = paths.findIndex(p => p[0] === 'z');\r\n      this.symbolPath = paths\r\n        .slice(0, i - 1)\r\n        .map(p => p.join(' ')).join(' ');\r\n    });\r\n  }\r\n\r\n  async ngAfterContentInit() {\r\n    await this.mapView.ready();\r\n    this.getAircracts();\r\n    setInterval(() => this.getAircracts(), 10000);\r\n  }\r\n\r\n  getAircracts() {\r\n    const bounds = this.mapView.map.getBounds();\r\n    const ne = bounds.getNorthEast();\r\n    const sw = bounds.getSouthWest();\r\n    this.http.get(`https://opensky-network.org/api/states/all?lamin=${sw.lat()}&lomin=${sw.lng()}&lamax=${ne.lat()}&lomax=${ne.lng()}`)\r\n      .subscribe((response: { states: Aircraft[] }) => {\r\n        this.objectsToTrack = response.states &&\r\n          response.states.map(aircraft => {\r\n            const found = this.objectsToTrack.find(a => a.id === aircraft[0]);\r\n            const trkObj: TrackedAircraft = {\r\n              altitude: aircraft[13],\r\n              id: aircraft[0],\r\n              color: found && found.color || randomColor(),\r\n              country: aircraft[2],\r\n              heading: aircraft[10],\r\n              icon: found && found.icon || this.getIcon(aircraft[10]),\r\n              speed: 1,\r\n              label: {\r\n                text: aircraft[0].toLocaleUpperCase(),\r\n                color: 'white'\r\n              },\r\n              // isOffline: true,\r\n              onGround: aircraft[8],\r\n              position: new google.maps.LatLng(aircraft[6], aircraft[5]),\r\n              // scale: 2,\r\n            };\r\n            return trkObj;\r\n          })\r\n            .filter(a => !a.onGround)\r\n            .splice(0, 50)\r\n          || [];\r\n      });\r\n  }\r\n\r\n  getIsoCode(countryName: string) {\r\n    return i18IsoCountries.getAlpha2Code(countryName, 'en');\r\n  }\r\n\r\n  getIcon(rotation: number): google.maps.Symbol {\r\n    const color = randomColor();\r\n    return {\r\n      path: this.symbolPath,\r\n      labelOrigin: new google.maps.Point(0, 5),\r\n      fillColor: color,\r\n      fillOpacity: .6,\r\n      strokeColor: color,\r\n      strokeOpacity: 1,\r\n      strokeWeight: 2,\r\n      scale: 2,\r\n      rotation\r\n    };\r\n  }\r\n\r\n  openDocumentation() {\r\n    open('https://raschidjfr.github.io/ngx-googlemaps-tracking-view/reference/', '_blank');\r\n  }\r\n}\r\n"],"sourceRoot":"webpack:///","file":"home-home-module-es5.js"}