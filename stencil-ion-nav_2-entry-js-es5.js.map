{"version":3,"mappings":"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AAA;AAAA,sFA+PA;AAAA;AAAA;AAAA;AAAA;AAAA;AACAC,4BADA,GACA,oBADA;AAAA,wDAEAA,SACA;AACAC,kDADA;AAEAjB,6CAFA;AAGAZ;AAHA,uBADA,GAMA8B,SARA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aA/PA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAyQA;AACA;AACA;;AA3QA;AAAA;AAAA,iBA4QA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnRA;AAAA;AAAA,iBAoRA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AA3RA;AAAA;AAAA,iBA4RA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAnSA;AAAA;AAAA,iBAoSA;AACA;AACA;AAtSA;AAAA;AAAA,iBAuSA;AACA;AACA;AAzSA;AAAA;AAAA,iBA0SA;AACA;AACA;AA5SA;AAAA;AAAA,iBA6SA;AAAA;AACA;AACA;AA/SA;AAAA;AAAA,iBAgTA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA,WAvTA,CAwTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAjUA;AAAA;AAAA,iBAkUA;AACA;AACA;AACA;;AACA;AACAC;AACAA;AACS,aAHT;AAIAA,2BARA,CASA;;AACA;AACAA;AACA,aAZA,CAaA;;;AACA,qCAdA,CAeA;AACA;;AACA;AACA;AACA;AArVA;AAAA;AAAA,iBAsVA;AACA;AACA;AACA;AACA;;AACA;AACAA;AACA;;AACAA;;AACA;AACA;;AACA;AACA;AACAC;AACA;AACA;AACA;AAtWA;AAAA;AAAA,iBAuWA;AACA;AACA;AACA;AACA;;AACA;AACA;AACA;AA9WA;AAAA;AAAA,iBA+WA;AACA;AACAD;AACA;;AACA;AACAA;AACA,aAFA,MAGA;AACAA;AACA;AACA;AAzXA;AAAA;AAAA,iBA0XA;AACA;AACA;AACA;AACA;AACA,aALA,CAMA;AACA;;;AACA;;AACA;AACA;AACA;;AACA;AACA;AACA;AAxYA;AAAA;AAAA;AAAA,yFAyYA;AAAA;AAAA;AA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","names":["ViewController","component","container","element","filter","hostRef","_ionic_global_a175fa73_js__WEBPACK_IMPORTED_MODULE_1__","mode","__webpack_require__","createSwipeBackGesture","view","_index_157155ee_js__WEBPACK_IMPORTED_MODULE_3__","insertStart","insertViews","page","params","opts","done","removeStart","removeCount","tiConfig","changed","updateURL","viewIsReady","resolve","markVisible","mark","finish","commonOpts","direction","animated","active","id","undefined","ti","router","leavingView","enteringView","requiresTransition","hasCompleted","result","viewControllers","i","destroyQueue","finalBalance","console","insertIndex","progressCallback","enteringEl","leavingEl","animationOpts","Object","showGoBack","baseEl","animationBuilder","views","index","progressAnimation","oneTimeCallback","newStepValue","stepValue","Nav","skipIfBusy","_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__","onClick"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-nav_2.entry.js"],"sourcesContent":["import { r as registerInstance, d as createEvent, h, e as getElement, H as Host } from './index-2cd7e630.js';\nimport { b as getIonMode, c as config } from './ionic-global-a175fa73.js';\nimport { b as assert } from './helpers-d8b49b57.js';\nimport { l as lifecycle, t as transition, s as setPageHidden, d as LIFECYCLE_WILL_UNLOAD, b as LIFECYCLE_WILL_LEAVE, c as LIFECYCLE_DID_LEAVE } from './index-157155ee.js';\nimport { g as getTimeGivenProgression } from './cubic-bezier-685f606a.js';\nimport { a as attachComponent } from './framework-delegate-d1eb6504.js';\n\nconst VIEW_STATE_NEW = 1;\nconst VIEW_STATE_ATTACHED = 2;\nconst VIEW_STATE_DESTROYED = 3;\nclass ViewController {\n    constructor(component, params) {\n        this.component = component;\n        this.params = params;\n        this.state = VIEW_STATE_NEW;\n    }\n    async init(container) {\n        this.state = VIEW_STATE_ATTACHED;\n        if (!this.element) {\n            const component = this.component;\n            this.element = await attachComponent(this.delegate, container, component, ['ion-page', 'ion-page-invisible'], this.params);\n        }\n    }\n    /**\n     * DOM WRITE\n     */\n    _destroy() {\n        assert(this.state !== VIEW_STATE_DESTROYED, 'view state must be ATTACHED');\n        const element = this.element;\n        if (element) {\n            if (this.delegate) {\n                this.delegate.removeViewFromDom(element.parentElement, element);\n            }\n            else {\n                element.remove();\n            }\n        }\n        this.nav = undefined;\n        this.state = VIEW_STATE_DESTROYED;\n    }\n}\nconst matches = (view, id, params) => {\n    if (!view) {\n        return false;\n    }\n    if (view.component !== id) {\n        return false;\n    }\n    const currentParams = view.params;\n    if (currentParams === params) {\n        return true;\n    }\n    if (!currentParams && !params) {\n        return true;\n    }\n    if (!currentParams || !params) {\n        return false;\n    }\n    const keysA = Object.keys(currentParams);\n    const keysB = Object.keys(params);\n    if (keysA.length !== keysB.length) {\n        return false;\n    }\n    // Test for A's keys different from B.\n    for (const key of keysA) {\n        if (currentParams[key] !== params[key]) {\n            return false;\n        }\n    }\n    return true;\n};\nconst convertToView = (page, params) => {\n    if (!page) {\n        return null;\n    }\n    if (page instanceof ViewController) {\n        return page;\n    }\n    return new ViewController(page, params);\n};\nconst convertToViews = (pages) => {\n    return pages.map(page => {\n        if (page instanceof ViewController) {\n            return page;\n        }\n        if ('page' in page) {\n            return convertToView(page.page, page.params);\n        }\n        return convertToView(page, undefined);\n    }).filter(v => v !== null);\n};\n\nconst navCss = \":host{left:0;right:0;top:0;bottom:0;position:absolute;contain:layout size style;overflow:hidden;z-index:0}\";\n\nconst Nav = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.transInstr = [];\n        this.animationEnabled = true;\n        this.useRouter = false;\n        this.isTransitioning = false;\n        this.destroyed = false;\n        this.views = [];\n        /**\n         * If `true`, the nav should animate the transition of components.\n         */\n        this.animated = true;\n        this.ionNavWillLoad = createEvent(this, \"ionNavWillLoad\", 7);\n        this.ionNavWillChange = createEvent(this, \"ionNavWillChange\", 3);\n        this.ionNavDidChange = createEvent(this, \"ionNavDidChange\", 3);\n    }\n    swipeGestureChanged() {\n        if (this.gesture) {\n            this.gesture.enable(this.swipeGesture === true);\n        }\n    }\n    rootChanged() {\n        if (this.root !== undefined) {\n            if (!this.useRouter) {\n                this.setRoot(this.root, this.rootParams);\n            }\n        }\n    }\n    componentWillLoad() {\n        this.useRouter =\n            !!document.querySelector('ion-router') &&\n                !this.el.closest('[no-router]');\n        if (this.swipeGesture === undefined) {\n            const mode = getIonMode(this);\n            this.swipeGesture = config.getBoolean('swipeBackEnabled', mode === 'ios');\n        }\n        this.ionNavWillLoad.emit();\n    }\n    async componentDidLoad() {\n        this.rootChanged();\n        this.gesture = (await import('./swipe-back-69ef585b.js')).createSwipeBackGesture(this.el, this.canStart.bind(this), this.onStart.bind(this), this.onMove.bind(this), this.onEnd.bind(this));\n        this.swipeGestureChanged();\n    }\n    componentDidUnload() {\n        for (const view of this.views) {\n            lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            view._destroy();\n        }\n        if (this.gesture) {\n            this.gesture.destroy();\n            this.gesture = undefined;\n        }\n        // release swipe back gesture and transition\n        this.transInstr.length = this.views.length = 0;\n        this.destroyed = true;\n    }\n    /**\n     * Push a new component onto the current navigation stack. Pass any additional\n     * information along as an object. This additional information is accessible\n     * through NavParams.\n     *\n     * @param component The component to push onto the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    push(component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: -1,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts a component into the navigation stack at the specified index.\n     * This is useful to add a component at any point in the navigation stack.\n     *\n     * @param insertIndex The index to insert the component at in the stack.\n     * @param component The component to insert into the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insert(insertIndex, component, componentProps, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: [{ page: component, params: componentProps }],\n            opts\n        }, done);\n    }\n    /**\n     * Inserts an array of components into the navigation stack at the specified index.\n     * The last component in the array will become instantiated as a view, and animate\n     * in to become the active view.\n     *\n     * @param insertIndex The index to insert the components at in the stack.\n     * @param insertComponents The components to insert into the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    insertPages(insertIndex, insertComponents, opts, done) {\n        return this.queueTrns({\n            insertStart: insertIndex,\n            insertViews: insertComponents,\n            opts\n        }, done);\n    }\n    /**\n     * Pop a component off of the navigation stack. Navigates back from the current\n     * component.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    pop(opts, done) {\n        return this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts\n        }, done);\n    }\n    /**\n     * Pop to a specific index in the navigation stack.\n     *\n     * @param indexOrViewCtrl The index or view controller to pop to.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popTo(indexOrViewCtrl, opts, done) {\n        const tiConfig = {\n            removeStart: -1,\n            removeCount: -1,\n            opts\n        };\n        if (typeof indexOrViewCtrl === 'object' && indexOrViewCtrl.component) {\n            tiConfig.removeView = indexOrViewCtrl;\n            tiConfig.removeStart = 1;\n        }\n        else if (typeof indexOrViewCtrl === 'number') {\n            tiConfig.removeStart = indexOrViewCtrl + 1;\n        }\n        return this.queueTrns(tiConfig, done);\n    }\n    /**\n     * Navigate back to the root of the stack, no matter how far back that is.\n     *\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    popToRoot(opts, done) {\n        return this.queueTrns({\n            removeStart: 1,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /**\n     * Removes a component from the navigation stack at the specified index.\n     *\n     * @param startIndex The number to begin removal at.\n     * @param removeCount The number of components to remove.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    removeIndex(startIndex, removeCount = 1, opts, done) {\n        return this.queueTrns({\n            removeStart: startIndex,\n            removeCount,\n            opts\n        }, done);\n    }\n    /**\n     * Set the root for the current navigation stack to a component.\n     *\n     * @param component The component to set as the root of the navigation stack.\n     * @param componentProps Any properties of the component.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setRoot(component, componentProps, opts, done) {\n        return this.setPages([{ page: component, params: componentProps }], opts, done);\n    }\n    /**\n     * Set the views of the current navigation stack and navigate to the last view.\n     * By default animations are disabled, but they can be enabled by passing options\n     * to the navigation controller. Navigation parameters can also be passed to the\n     * individual pages in the array.\n     *\n     * @param views The list of views to set as the navigation stack.\n     * @param opts The navigation options.\n     * @param done The transition complete function.\n     */\n    setPages(views, opts, done) {\n        if (opts == null) {\n            opts = {};\n        }\n        // if animation wasn't set to true then default it to NOT animate\n        if (opts.animated !== true) {\n            opts.animated = false;\n        }\n        return this.queueTrns({\n            insertStart: 0,\n            insertViews: views,\n            removeStart: 0,\n            removeCount: -1,\n            opts\n        }, done);\n    }\n    /** @internal */\n    setRouteId(id, params, direction) {\n        const active = this.getActiveSync();\n        if (matches(active, id, params)) {\n            return Promise.resolve({\n                changed: false,\n                element: active.element\n            });\n        }\n        let resolve;\n        const promise = new Promise(r => (resolve = r));\n        let finish;\n        const commonOpts = {\n            updateURL: false,\n            viewIsReady: enteringEl => {\n                let mark;\n                const p = new Promise(r => (mark = r));\n                resolve({\n                    changed: true,\n                    element: enteringEl,\n                    markVisible: async () => {\n                        mark();\n                        await finish;\n                    }\n                });\n                return p;\n            }\n        };\n        if (direction === 'root') {\n            finish = this.setRoot(id, params, commonOpts);\n        }\n        else {\n            const viewController = this.views.find(v => matches(v, id, params));\n            if (viewController) {\n                finish = this.popTo(viewController, Object.assign(Object.assign({}, commonOpts), { direction: 'back' }));\n            }\n            else if (direction === 'forward') {\n                finish = this.push(id, params, commonOpts);\n            }\n            else if (direction === 'back') {\n                finish = this.setRoot(id, params, Object.assign(Object.assign({}, commonOpts), { direction: 'back', animated: true }));\n            }\n        }\n        return promise;\n    }\n    /** @internal */\n    async getRouteId() {\n        const active = this.getActiveSync();\n        return active\n            ? {\n                id: active.element.tagName,\n                params: active.params,\n                element: active.element\n            }\n            : undefined;\n    }\n    /**\n     * Get the active view.\n     */\n    getActive() {\n        return Promise.resolve(this.getActiveSync());\n    }\n    /**\n     * Get the view at the specified index.\n     *\n     * @param index The index of the view.\n     */\n    getByIndex(index) {\n        return Promise.resolve(this.views[index]);\n    }\n    /**\n     * Returns `true` if the current view can go back.\n     *\n     * @param view The view to check.\n     */\n    canGoBack(view) {\n        return Promise.resolve(this.canGoBackSync(view));\n    }\n    /**\n     * Get the previous view.\n     *\n     * @param view The view to get.\n     */\n    getPrevious(view) {\n        return Promise.resolve(this.getPreviousSync(view));\n    }\n    getLength() {\n        return this.views.length;\n    }\n    getActiveSync() {\n        return this.views[this.views.length - 1];\n    }\n    canGoBackSync(view = this.getActiveSync()) {\n        return !!(view && this.getPreviousSync(view));\n    }\n    getPreviousSync(view = this.getActiveSync()) {\n        if (!view) {\n            return undefined;\n        }\n        const views = this.views;\n        const index = views.indexOf(view);\n        return index > 0 ? views[index - 1] : undefined;\n    }\n    // _queueTrns() adds a navigation stack change to the queue and schedules it to run:\n    // 1. _nextTrns(): consumes the next transition in the queue\n    // 2. _viewInit(): initializes enteringView if required\n    // 3. _viewTest(): ensures canLeave/canEnter Returns `true`, so the operation can continue\n    // 4. _postViewInit(): add/remove the views from the navigation stack\n    // 5. _transitionInit(): initializes the visual transition if required and schedules it to run\n    // 6. _viewAttachToDOM(): attaches the enteringView to the DOM\n    // 7. _transitionStart(): called once the transition actually starts, it initializes the Animation underneath.\n    // 8. _transitionFinish(): called once the transition finishes\n    // 9. _cleanup(): syncs the navigation internal state with the DOM. For example it removes the pages from the DOM or hides/show them.\n    queueTrns(ti, done) {\n        if (this.isTransitioning && ti.opts != null && ti.opts.skipIfBusy) {\n            return Promise.resolve(false);\n        }\n        const promise = new Promise((resolve, reject) => {\n            ti.resolve = resolve;\n            ti.reject = reject;\n        });\n        ti.done = done;\n        // Normalize empty\n        if (ti.insertViews && ti.insertViews.length === 0) {\n            ti.insertViews = undefined;\n        }\n        // Enqueue transition instruction\n        this.transInstr.push(ti);\n        // if there isn't a transition already happening\n        // then this will kick off this transition\n        this.nextTrns();\n        return promise;\n    }\n    success(result, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        if (ti.done) {\n            ti.done(result.hasCompleted, result.requiresTransition, result.enteringView, result.leavingView, result.direction);\n        }\n        ti.resolve(result.hasCompleted);\n        if (ti.opts.updateURL !== false && this.useRouter) {\n            const router = document.querySelector('ion-router');\n            if (router) {\n                const direction = result.direction === 'back' ? 'back' : 'forward';\n                router.navChanged(direction);\n            }\n        }\n    }\n    failed(rejectReason, ti) {\n        if (this.destroyed) {\n            this.fireError('nav controller was destroyed', ti);\n            return;\n        }\n        this.transInstr.length = 0;\n        this.fireError(rejectReason, ti);\n    }\n    fireError(rejectReason, ti) {\n        if (ti.done) {\n            ti.done(false, false, rejectReason);\n        }\n        if (ti.reject && !this.destroyed) {\n            ti.reject(rejectReason);\n        }\n        else {\n            ti.resolve(false);\n        }\n    }\n    nextTrns() {\n        // this is the framework's bread 'n butta function\n        // only one transition is allowed at any given time\n        if (this.isTransitioning) {\n            return false;\n        }\n        // there is no transition happening right now\n        // get the next instruction\n        const ti = this.transInstr.shift();\n        if (!ti) {\n            return false;\n        }\n        this.runTransition(ti);\n        return true;\n    }\n    async runTransition(ti) {\n        try {\n            // set that this nav is actively transitioning\n            this.ionNavWillChange.emit();\n            this.isTransitioning = true;\n            this.prepareTI(ti);\n            const leavingView = this.getActiveSync();\n            const enteringView = this.getEnteringView(ti, leavingView);\n            if (!leavingView && !enteringView) {\n                throw new Error('no views in the stack to be removed');\n            }\n            if (enteringView && enteringView.state === VIEW_STATE_NEW) {\n                await enteringView.init(this.el);\n            }\n            this.postViewInit(enteringView, leavingView, ti);\n            // Needs transition?\n            const requiresTransition = (ti.enteringRequiresTransition || ti.leavingRequiresTransition) &&\n                enteringView !== leavingView;\n            const result = requiresTransition\n                ? await this.transition(enteringView, leavingView, ti)\n                : {\n                    // transition is not required, so we are already done!\n                    // they're inserting/removing the views somewhere in the middle or\n                    // beginning, so visually nothing needs to animate/transition\n                    // resolve immediately because there's no animation that's happening\n                    hasCompleted: true,\n                    requiresTransition: false\n                };\n            this.success(result, ti);\n            this.ionNavDidChange.emit();\n        }\n        catch (rejectReason) {\n            this.failed(rejectReason, ti);\n        }\n        this.isTransitioning = false;\n        this.nextTrns();\n    }\n    prepareTI(ti) {\n        const viewsLength = this.views.length;\n        ti.opts = ti.opts || {};\n        if (ti.opts.delegate === undefined) {\n            ti.opts.delegate = this.delegate;\n        }\n        if (ti.removeView !== undefined) {\n            assert(ti.removeStart !== undefined, 'removeView needs removeStart');\n            assert(ti.removeCount !== undefined, 'removeView needs removeCount');\n            const index = this.views.indexOf(ti.removeView);\n            if (index < 0) {\n                throw new Error('removeView was not found');\n            }\n            ti.removeStart += index;\n        }\n        if (ti.removeStart !== undefined) {\n            if (ti.removeStart < 0) {\n                ti.removeStart = viewsLength - 1;\n            }\n            if (ti.removeCount < 0) {\n                ti.removeCount = viewsLength - ti.removeStart;\n            }\n            ti.leavingRequiresTransition =\n                ti.removeCount > 0 && ti.removeStart + ti.removeCount === viewsLength;\n        }\n        if (ti.insertViews) {\n            // allow -1 to be passed in to auto push it on the end\n            // and clean up the index if it's larger then the size of the stack\n            if (ti.insertStart < 0 || ti.insertStart > viewsLength) {\n                ti.insertStart = viewsLength;\n            }\n            ti.enteringRequiresTransition = ti.insertStart === viewsLength;\n        }\n        const insertViews = ti.insertViews;\n        if (!insertViews) {\n            return;\n        }\n        assert(insertViews.length > 0, 'length can not be zero');\n        const viewControllers = convertToViews(insertViews);\n        if (viewControllers.length === 0) {\n            throw new Error('invalid views to insert');\n        }\n        // Check all the inserted view are correct\n        for (const view of viewControllers) {\n            view.delegate = ti.opts.delegate;\n            const nav = view.nav;\n            if (nav && nav !== this) {\n                throw new Error('inserted view was already inserted');\n            }\n            if (view.state === VIEW_STATE_DESTROYED) {\n                throw new Error('inserted view was already destroyed');\n            }\n        }\n        ti.insertViews = viewControllers;\n    }\n    getEnteringView(ti, leavingView) {\n        const insertViews = ti.insertViews;\n        if (insertViews !== undefined) {\n            // grab the very last view of the views to be inserted\n            // and initialize it as the new entering view\n            return insertViews[insertViews.length - 1];\n        }\n        const removeStart = ti.removeStart;\n        if (removeStart !== undefined) {\n            const views = this.views;\n            const removeEnd = removeStart + ti.removeCount;\n            for (let i = views.length - 1; i >= 0; i--) {\n                const view = views[i];\n                if ((i < removeStart || i >= removeEnd) && view !== leavingView) {\n                    return view;\n                }\n            }\n        }\n        return undefined;\n    }\n    postViewInit(enteringView, leavingView, ti) {\n        assert(leavingView || enteringView, 'Both leavingView and enteringView are null');\n        assert(ti.resolve, 'resolve must be valid');\n        assert(ti.reject, 'reject must be valid');\n        const opts = ti.opts;\n        const insertViews = ti.insertViews;\n        const removeStart = ti.removeStart;\n        const removeCount = ti.removeCount;\n        let destroyQueue;\n        // there are views to remove\n        if (removeStart !== undefined && removeCount !== undefined) {\n            assert(removeStart >= 0, 'removeStart can not be negative');\n            assert(removeCount >= 0, 'removeCount can not be negative');\n            destroyQueue = [];\n            for (let i = 0; i < removeCount; i++) {\n                const view = this.views[i + removeStart];\n                if (view && view !== enteringView && view !== leavingView) {\n                    destroyQueue.push(view);\n                }\n            }\n            // default the direction to \"back\"\n            opts.direction = opts.direction || 'back';\n        }\n        const finalBalance = this.views.length +\n            (insertViews !== undefined ? insertViews.length : 0) -\n            (removeCount !== undefined ? removeCount : 0);\n        assert(finalBalance >= 0, 'final balance can not be negative');\n        if (finalBalance === 0) {\n            console.warn(`You can't remove all the pages in the navigation stack. nav.pop() is probably called too many times.`, this, this.el);\n            throw new Error('navigation stack needs at least one root page');\n        }\n        // At this point the transition can not be rejected, any throw should be an error\n        // there are views to insert\n        if (insertViews) {\n            // add the views to the\n            let insertIndex = ti.insertStart;\n            for (const view of insertViews) {\n                this.insertViewAt(view, insertIndex);\n                insertIndex++;\n            }\n            if (ti.enteringRequiresTransition) {\n                // default to forward if not already set\n                opts.direction = opts.direction || 'forward';\n            }\n        }\n        // if the views to be removed are in the beginning or middle\n        // and there is not a view that needs to visually transition out\n        // then just destroy them and don't transition anything\n        // batch all of lifecycles together\n        // let's make sure, callbacks are zoned\n        if (destroyQueue && destroyQueue.length > 0) {\n            for (const view of destroyQueue) {\n                lifecycle(view.element, LIFECYCLE_WILL_LEAVE);\n                lifecycle(view.element, LIFECYCLE_DID_LEAVE);\n                lifecycle(view.element, LIFECYCLE_WILL_UNLOAD);\n            }\n            // once all lifecycle events has been delivered, we can safely detroy the views\n            for (const view of destroyQueue) {\n                this.destroyView(view);\n            }\n        }\n    }\n    async transition(enteringView, leavingView, ti) {\n        // we should animate (duration > 0) if the pushed page is not the first one (startup)\n        // or if it is a portal (modal, actionsheet, etc.)\n        const opts = ti.opts;\n        const progressCallback = opts.progressAnimation\n            ? (ani) => this.sbAni = ani\n            : undefined;\n        const mode = getIonMode(this);\n        const enteringEl = enteringView.element;\n        const leavingEl = leavingView && leavingView.element;\n        const animationOpts = Object.assign({ mode, showGoBack: this.canGoBackSync(enteringView), baseEl: this.el, animationBuilder: this.animation || opts.animationBuilder || config.get('navAnimation'), progressCallback, animated: this.animated && config.getBoolean('animated', true), enteringEl,\n            leavingEl }, opts);\n        const { hasCompleted } = await transition(animationOpts);\n        return this.transitionFinish(hasCompleted, enteringView, leavingView, opts);\n    }\n    transitionFinish(hasCompleted, enteringView, leavingView, opts) {\n        const cleanupView = hasCompleted ? enteringView : leavingView;\n        if (cleanupView) {\n            this.cleanup(cleanupView);\n        }\n        return {\n            hasCompleted,\n            requiresTransition: true,\n            enteringView,\n            leavingView,\n            direction: opts.direction\n        };\n    }\n    insertViewAt(view, index) {\n        const views = this.views;\n        const existingIndex = views.indexOf(view);\n        if (existingIndex > -1) {\n            // this view is already in the stack!!\n            // move it to its new location\n            assert(view.nav === this, 'view is not part of the nav');\n            views.splice(index, 0, views.splice(existingIndex, 1)[0]);\n        }\n        else {\n            assert(!view.nav, 'nav is used');\n            // this is a new view to add to the stack\n            // create the new entering view\n            view.nav = this;\n            // insert the entering view into the correct index in the stack\n            views.splice(index, 0, view);\n        }\n    }\n    removeView(view) {\n        assert(view.state === VIEW_STATE_ATTACHED || view.state === VIEW_STATE_DESTROYED, 'view state should be loaded or destroyed');\n        const views = this.views;\n        const index = views.indexOf(view);\n        assert(index > -1, 'view must be part of the stack');\n        if (index >= 0) {\n            views.splice(index, 1);\n        }\n    }\n    destroyView(view) {\n        view._destroy();\n        this.removeView(view);\n    }\n    /**\n     * DOM WRITE\n     */\n    cleanup(activeView) {\n        // ok, cleanup time!! Destroy all of the views that are\n        // INACTIVE and come after the active view\n        // only do this if the views exist, though\n        if (this.destroyed) {\n            return;\n        }\n        const views = this.views;\n        const activeViewIndex = views.indexOf(activeView);\n        for (let i = views.length - 1; i >= 0; i--) {\n            const view = views[i];\n            const element = view.element;\n            if (i > activeViewIndex) {\n                // this view comes after the active view\n                // let's unload it\n                lifecycle(element, LIFECYCLE_WILL_UNLOAD);\n                this.destroyView(view);\n            }\n            else if (i < activeViewIndex) {\n                // this view comes before the active view\n                // and it is not a portal then ensure it is hidden\n                setPageHidden(element, true);\n            }\n        }\n    }\n    canStart() {\n        return (!!this.swipeGesture &&\n            !this.isTransitioning &&\n            this.transInstr.length === 0 &&\n            this.animationEnabled &&\n            this.canGoBackSync());\n    }\n    onStart() {\n        this.queueTrns({\n            removeStart: -1,\n            removeCount: 1,\n            opts: {\n                direction: 'back',\n                progressAnimation: true\n            }\n        }, undefined);\n    }\n    onMove(stepValue) {\n        if (this.sbAni) {\n            this.sbAni.progressStep(stepValue);\n        }\n    }\n    onEnd(shouldComplete, stepValue, dur) {\n        if (this.sbAni) {\n            this.animationEnabled = false;\n            this.sbAni.onFinish(() => {\n                this.animationEnabled = true;\n            }, { oneTimeCallback: true });\n            // Account for rounding errors in JS\n            let newStepValue = (shouldComplete) ? -0.001 : 0.001;\n            /**\n             * Animation will be reversed here, so need to\n             * reverse the easing curve as well\n             *\n             * Additionally, we need to account for the time relative\n             * to the new easing curve, as `stepValue` is going to be given\n             * in terms of a linear curve.\n             */\n            if (!shouldComplete) {\n                this.sbAni.easing('cubic-bezier(1, 0, 0.68, 0.28)');\n                newStepValue += getTimeGivenProgression([0, 0], [1, 0], [0.68, 0.28], [1, 1], stepValue)[0];\n            }\n            else {\n                newStepValue += getTimeGivenProgression([0, 0], [0.32, 0.72], [0, 1], [1, 1], stepValue)[0];\n            }\n            this.sbAni.progressEnd(shouldComplete ? 1 : 0, newStepValue, dur);\n        }\n    }\n    render() {\n        return (h(\"slot\", null));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"swipeGesture\": [\"swipeGestureChanged\"],\n        \"root\": [\"rootChanged\"]\n    }; }\n};\nNav.style = navCss;\n\nconst navLink = (el, routerDirection, component, componentProps) => {\n    const nav = el.closest('ion-nav');\n    if (nav) {\n        if (routerDirection === 'forward') {\n            if (component !== undefined) {\n                return nav.push(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'root') {\n            if (component !== undefined) {\n                return nav.setRoot(component, componentProps, { skipIfBusy: true });\n            }\n        }\n        else if (routerDirection === 'back') {\n            return nav.pop({ skipIfBusy: true });\n        }\n    }\n    return Promise.resolve(false);\n};\n\nconst NavLink = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        /**\n         * The transition direction when navigating to another page.\n         */\n        this.routerDirection = 'forward';\n        this.onClick = () => {\n            return navLink(this.el, this.routerDirection, this.component, this.componentProps);\n        };\n    }\n    render() {\n        return (h(Host, { onClick: this.onClick }));\n    }\n    get el() { return getElement(this); }\n};\n\nexport { Nav as ion_nav, NavLink as ion_nav_link };\n"]}