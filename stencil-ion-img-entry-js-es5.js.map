{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAGA;;AAEA;AACA;AAAA;;AAAA;;AACQ,iEAAgB,IAAhB,EAAgBA,OAAhB;;AACR;AACA;AACA,WAFA;;AAGA;AACA;AACA,WAFA;;AAGA,gCAA8B,uDAAW,IAAX,EAAW,gBAAX,EAAW,CAAX,CAA9B;AACA,+BAA6B,uDAAW,IAAX,EAAW,eAAX,EAAW,CAAX,CAA7B;AACA,0BAAwB,uDAAW,IAAX,EAAW,UAAX,EAAW,CAAX,CAAxB;AACA;;AAZA;AAAA;AAAA,iBAaA;AACA;AACA;AAfA;AAAA;AAAA,iBAgBA;AACA;AACA;AAlBA;AAAA;AAAA,iBAmBA;AAAA;;AACA;AACA;AACA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA;AACA;AACa,eARb;AASA;AACA,aAZA,MAaA;AACA;AACAC;AAAA;AAAA;AACA;AACA;AAxCA;AAAA;AAAA,iBAyCA;AACA;AACA;AACA;AACA;AA7CA;AAAA;AAAA,iBA8CA;AACA;AACA;AACA;AACA;AACA;AAnDA;AAAA;AAAA,iBAoDA;AACA,mBAAgB,uDAAEC,iDAAF,EAAM;AAAI,uBAAO,8DAAU,IAAV;AAAX,aAAN,EAAqC,uDAAC,KAAD,EAAC;AAAUC,+BAAV;AAAUC,+BAAV;AAAUC,2BAAV;AAAUC,iCAAV;AAAUC;AAAV,aAAD,CAArC,CAAhB;AACA;AAtDA;AAAA;AAAA,eAuDA;AAAe,mBAAO,uDAAU,IAAV,CAAP;AAAiB;AAvDhC;AAAA;AAAA,eAwDA;AAA4B;AAC5B;AAD4B;AAE5B;AA1DA;;AAAA;AAAA;;AA4DAC;;;","names":["hostRef","setTimeout","_index_2cd7e630_js__WEBPACK_IMPORTED_MODULE_0__","decoding","src","alt","onLoad","onError","Img"],"sources":["webpack:///node_modules/@ionic/core/dist/esm/ion-img.entry.js"],"sourcesContent":["import { r as registerInstance, d as createEvent, h, H as Host, e as getElement } from './index-2cd7e630.js';\nimport { b as getIonMode } from './ionic-global-a175fa73.js';\n\nconst imgCss = \":host{display:block;-o-object-fit:contain;object-fit:contain}img{display:block;width:100%;height:100%;-o-object-fit:inherit;object-fit:inherit;-o-object-position:inherit;object-position:inherit}\";\n\nconst Img = class {\n    constructor(hostRef) {\n        registerInstance(this, hostRef);\n        this.onLoad = () => {\n            this.ionImgDidLoad.emit();\n        };\n        this.onError = () => {\n            this.ionError.emit();\n        };\n        this.ionImgWillLoad = createEvent(this, \"ionImgWillLoad\", 7);\n        this.ionImgDidLoad = createEvent(this, \"ionImgDidLoad\", 7);\n        this.ionError = createEvent(this, \"ionError\", 7);\n    }\n    srcChanged() {\n        this.addIO();\n    }\n    componentDidLoad() {\n        this.addIO();\n    }\n    addIO() {\n        if (this.src === undefined) {\n            return;\n        }\n        if ('IntersectionObserver' in window) {\n            this.removeIO();\n            this.io = new IntersectionObserver(data => {\n                // because there will only ever be one instance\n                // of the element we are observing\n                // we can just use data[0]\n                if (data[0].isIntersecting) {\n                    this.load();\n                    this.removeIO();\n                }\n            });\n            this.io.observe(this.el);\n        }\n        else {\n            // fall back to setTimeout for Safari and IE\n            setTimeout(() => this.load(), 200);\n        }\n    }\n    load() {\n        this.loadError = this.onError;\n        this.loadSrc = this.src;\n        this.ionImgWillLoad.emit();\n    }\n    removeIO() {\n        if (this.io) {\n            this.io.disconnect();\n            this.io = undefined;\n        }\n    }\n    render() {\n        return (h(Host, { class: getIonMode(this) }, h(\"img\", { decoding: \"async\", src: this.loadSrc, alt: this.alt, onLoad: this.onLoad, onError: this.loadError })));\n    }\n    get el() { return getElement(this); }\n    static get watchers() { return {\n        \"src\": [\"srcChanged\"]\n    }; }\n};\nImg.style = imgCss;\n\nexport { Img as ion_img };\n"]}